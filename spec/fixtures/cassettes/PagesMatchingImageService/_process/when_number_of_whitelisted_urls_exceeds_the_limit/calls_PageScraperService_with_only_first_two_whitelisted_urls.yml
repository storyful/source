---
http_interactions:
- request:
    method: get
    uri: http://google.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Typhoeus - https://github.com/typhoeus/typhoeus
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 28 Apr 2021 16:55:36 GMT
      Expires:
      - "-1"
      Cache-Control:
      - private, max-age=0
      Content-Type:
      - text/html; charset=ISO-8859-1
      P3p:
      - CP="This is not a P3P policy! See g.co/p3phelp for more info."
      Server:
      - gws
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - NID=214=qmyLFjdoFZ_EIvqki3OMl33lvXaF-GfzkDMMpNMrTSL8ZugygTKrGUPWcnb51eeIMbFR5ZZ7mSk9lpFVGRzmbvnYIM9u9zkeUjpB5yf3EgvpuXbT42H-8Z-vKln4Mk3rXXufJWa-YttkWopFM3_s_OOOVwyYz6XLM3qZec719yk;
        expires=Thu, 28-Oct-2021 16:55:36 GMT; path=/; domain=.google.com; HttpOnly
      Accept-Ranges:
      - none
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 28 Apr 2021 16:55:36 GMT
- request:
    method: get
    uri: https://www.thejournal.ie/factcheck/news/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Typhoeus - https://github.com/typhoeus/typhoeus
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 28 Apr 2021 16:55:36 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      X-Powered-By:
      - PHP/7.1.33-34+ubuntu18.04.1+deb.sury.org+1
      Set-Cookie:
      - jSID=jjomjbqrt88h95d9g7liqpbq7u; expires=Wed, 05-May-2021 16:55:36 GMT; Max-Age=604800;
        path=/; domain=.thejournal.ie
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPgo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgIGNsYXNzPSJ0aGVtZS0tdGhlam91cm5hbCBhY3RpdmUtcHVibGljYXRpb24tbWFzdGhlYWQiIHN0eWxlPSIiIGxhbmc9ImVuIiB4bWw6bGFuZz0iZW4iIHhtbG5zOm9nPSJodHRwOi8vb3BlbmdyYXBocHJvdG9jb2wub3JnL3NjaGVtYS8iPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+CiAgICAgICAgPHRpdGxlPkZhY3RjaGVjayAmbWlkZG90OyBUaGVKb3VybmFsLmllPC90aXRsZT4KICAgICAgICAKPHNjcmlwdCBzcmM9Ii8vZDJ3eThmN2E5dXJzbm0uY2xvdWRmcm9udC5uZXQvdjcvYnVnc25hZy5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGlkPSJidWdzbmFnQ29uZmlnIj57ImFwaUtleSI6ImQ4ZWExNjA3YTE4OTA2MTIxNDBkNTU3YTNlMDE1OWI4IiwicmVsZWFzZVN0YWdlIjoicHJvZHVjdGlvbiIsImFwcFZlcnNpb24iOiIyMDIxMDQyODExMzgzOCJ9PC9zY3JpcHQ+CjxzY3JpcHQ+CiAgICB2YXIgYnVnc25hZ0NvbmZpZyA9IEpTT04ucGFyc2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJ1Z3NuYWdDb25maWciKS5pbm5lckhUTUwpOwogICAgQnVnc25hZy5zdGFydChidWdzbmFnQ29uZmlnKTsKPC9zY3JpcHQ+CiAgICAgICAgCiAgICA8IS0tIE9uZVRydXN0IENvb2tpZXMgQ29uc2VudCBOb3RpY2Ugc3RhcnQgLS0+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIgogICAgICAgICAgICB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiCiAgICAgICAgICAgIGNoYXJzZXQ9IlVURi04IgogICAgICAgICAgICBkYXRhLWRvbWFpbi1zY3JpcHQ9IjYzY2QwMDhmLTlkMDQtNDUwYi04MGQxLWUxYmM5MTlkNzMyYSIKICAgID48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgICAgIGlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnLCB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChzZWFyY2gsIHJhd1BvcykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gcmF3UG9zID4gMCA/IHJhd1BvcyB8IDAgOiAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJzdHJpbmcocG9zLCBwb3MgKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBmdW5jdGlvbiAoc2VhcmNoLCByYXdQb3MpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gcmF3UG9zID4gMCA/IHJhd1BvcyB8IDAgOiAwOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnN0cmluZyhwb3MsIHBvcyArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgQ29va2llQ29uc2VudExpc3RlbmVyID0ge307CiAgICAgICAgdmFyIENvb2tpZUNvbnNlbnRSZXBvc2l0b3J5ID0ge307CgogICAgICAgIChmdW5jdGlvbigpCiAgICAgICAgewogICAgICAgICAgICBmdW5jdGlvbiBDb29raWVDb25zZW50KGZ1bmN0aW9uYWwsIHBlcmZvcm1hbmNlLCB0YXJnZXRpbmcpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25hbCA9IGZ1bmN0aW9uYWw7CiAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7CiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldGluZyA9IHRhcmdldGluZzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEByZXR1cm5zIHtDb29raWVDb25zZW50fQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgQ29va2llQ29uc2VudC5tYWtlRGVmYXVsdE5vQ29uc2VudCA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uYWwgPSBmYWxzZSwgcGVyZm9ybWFuY2UgPSBmYWxzZSwgdGFyZ2V0aW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvb2tpZUNvbnNlbnQoZnVuY3Rpb25hbCwgcGVyZm9ybWFuY2UsIHRhcmdldGluZyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQHJldHVybnMge0Nvb2tpZUNvbnNlbnR9CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBDb29raWVDb25zZW50UmVwb3NpdG9yeS5mZXRjaCA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHJhd0NvbnNlbnRDb29raWUgPSBkb2N1bWVudC5jb29raWUKICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJzsgJykKICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5zdGFydHNXaXRoKCdPcHRhbm9uQ29uc2VudCcpOwogICAgICAgICAgICAgICAgICAgIH0pWzBdOwoKICAgICAgICAgICAgICAgIGlmIChyYXdDb25zZW50Q29va2llID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29va2llQ29uc2VudC5tYWtlRGVmYXVsdE5vQ29uc2VudCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBjb25zZW50Q29va2llID0gbmV3IFF1ZXJ5U3RyaW5nKHJhd0NvbnNlbnRDb29raWUuc3Vic3RyaW5nKDE1KSk7CgogICAgICAgICAgICAgICAgdmFyIGNvbnNlbnRHcm91cHMgPSBjb25zZW50Q29va2llLmdldCgnZ3JvdXBzJyk7CgogICAgICAgICAgICAgICAgaWYgKCFjb25zZW50Q29va2llLmhhcygnZ3JvdXBzJykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29va2llQ29uc2VudC5tYWtlRGVmYXVsdE5vQ29uc2VudCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBjb25zZW50QnlDYXRlZ29yeSA9IHt9OwoKICAgICAgICAgICAgICAgIGNvbnNlbnRHcm91cHMuc3BsaXQoIiwiKS5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkgewogICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGNhdGVnb3J5LnNwbGl0KCI6Iik7CiAgICAgICAgICAgICAgICAgICAgY29uc2VudEJ5Q2F0ZWdvcnlbcGFydHNbMF1dID0gcGFydHNbMV0gPT09ICIxIjsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbmFsID0gY29uc2VudEJ5Q2F0ZWdvcnkuQzAwMDMgPT09IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgcGVyZm9ybWFuY2UgPSBjb25zZW50QnlDYXRlZ29yeS5DMDAwMiA9PT0gdHJ1ZTsKICAgICAgICAgICAgICAgIHZhciB0YXJnZXRpbmcgPSBjb25zZW50QnlDYXRlZ29yeS5DMDAwNCA9PT0gdHJ1ZTsKCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvb2tpZUNvbnNlbnQoZnVuY3Rpb25hbCwgcGVyZm9ybWFuY2UsIHRhcmdldGluZyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBmdW5jdGlvbiBRdWVyeVN0cmluZyhzdHJpbmdWYWx1ZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNCeUtleSA9IHt9OwoKICAgICAgICAgICAgICAgIHZhciBrZXlWYWx1ZVBhaXJzID0gc3RyaW5nVmFsdWUuc3BsaXQoIiYiKTsKCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleVZhbHVlUGFpcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIga2V5VmFsdWVQYWlyID0ga2V5VmFsdWVQYWlyc1tpXS5zcGxpdCgiPSIpOwogICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5VmFsdWVQYWlyWzBdKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5VmFsdWVQYWlyWzFdKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc0J5S2V5W2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgUXVlcnlTdHJpbmcucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc0J5S2V5W2tleV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFF1ZXJ5U3RyaW5nLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNCeUtleS5oYXNPd25Qcm9wZXJ0eShrZXkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIgPSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbmFsOiBbXSwKICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlOiBbXSwKICAgICAgICAgICAgICAgIHRhcmdldGluZzogW10sCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIub25GdW5jdGlvbmFsQ29uc2VudENoYW5nZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIuZnVuY3Rpb25hbC5wdXNoKGNhbGxiYWNrKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIENvb2tpZUNvbnNlbnRMaXN0ZW5lci5vblBlcmZvcm1hbmNlQ29uc2VudENoYW5nZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIucGVyZm9ybWFuY2UucHVzaChjYWxsYmFjayk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIub25UYXJnZXRpbmdDb25zZW50Q2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvb2tpZUNvbnNlbnRMaXN0ZW5lci50YXJnZXRpbmcucHVzaChjYWxsYmFjayk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgcHJldmlvdXNDb25zZW50ID0gQ29va2llQ29uc2VudFJlcG9zaXRvcnkuZmV0Y2goKTsKCiAgICAgICAgICAgIENvb2tpZUNvbnNlbnRMaXN0ZW5lci50cmlnZ2VyQ2hhbmdlID0gZnVuY3Rpb24oKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgY29uc2VudCA9IENvb2tpZUNvbnNlbnRSZXBvc2l0b3J5LmZldGNoKCk7CgogICAgICAgICAgICAgICAgdmFyIGtleTsKCiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDb25zZW50LmZ1bmN0aW9uYWwgIT09IGNvbnNlbnQuZnVuY3Rpb25hbCkgewogICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIENvb2tpZUNvbnNlbnRMaXN0ZW5lci5mdW5jdGlvbmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIENvb2tpZUNvbnNlbnRMaXN0ZW5lci5mdW5jdGlvbmFsW2tleV0oY29uc2VudC5mdW5jdGlvbmFsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQ29uc2VudC5wZXJmb3JtYW5jZSAhPT0gY29uc2VudC5wZXJmb3JtYW5jZSkgewogICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIENvb2tpZUNvbnNlbnRMaXN0ZW5lci5wZXJmb3JtYW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIucGVyZm9ybWFuY2Vba2V5XShjb25zZW50LnBlcmZvcm1hbmNlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQ29uc2VudC50YXJnZXRpbmcgIT09IGNvbnNlbnQudGFyZ2V0aW5nKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gQ29va2llQ29uc2VudExpc3RlbmVyLnRhcmdldGluZykgewogICAgICAgICAgICAgICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIudGFyZ2V0aW5nW2tleV0oY29uc2VudC50YXJnZXRpbmcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwcmV2aW91c0NvbnNlbnQgPSBjb25zZW50OwogICAgICAgICAgICB9OwogICAgICAgIH0oKSk7CgogICAgICAgIGZ1bmN0aW9uIGJvb3RZb3V0dWJlSWZyYW1lcygpCiAgICAgICAgewogICAgICAgICAgICBmdW5jdGlvbiBjb25zZW50WWVzKCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIGlmcmFtZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd5b3V0dWJlLXBsYXllcicpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZnJhbWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IGlmcmFtZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpOwogICAgICAgICAgICAgICAgICAgIGlmcmFtZXNbaV0uc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjb25zZW50Tm8oKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3lvdXR1YmUtcGxheWVyJyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlmcmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZnJhbWVzW2ldLnNldEF0dHJpYnV0ZSgnc3JjJywgJycpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29uc2VudCA9IENvb2tpZUNvbnNlbnRSZXBvc2l0b3J5LmZldGNoKCk7CiAgICAgICAgICAgIGlmIChjb25zZW50LnRhcmdldGluZykgewogICAgICAgICAgICAgICAgY29uc2VudFllcygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBDb29raWVDb25zZW50TGlzdGVuZXIub25UYXJnZXRpbmdDb25zZW50Q2hhbmdlKGZ1bmN0aW9uKGhhc1RhcmdldGluZ0NvbnNlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChoYXNUYXJnZXRpbmdDb25zZW50KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc2VudFllcygpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnNlbnRObygpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGJvb3RWaW1lb0lmcmFtZXMoKQogICAgICAgIHsKICAgICAgICAgICAgZnVuY3Rpb24gY29uc2VudFllcygpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBpZnJhbWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndmltZW8tcGxheWVyJyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlmcmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gaWZyYW1lc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJyk7CiAgICAgICAgICAgICAgICAgICAgaWZyYW1lc1tpXS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnNlbnRObygpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBpZnJhbWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndmltZW8tcGxheWVyJyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlmcmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZnJhbWVzW2ldLnNldEF0dHJpYnV0ZSgnc3JjJywgJycpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29uc2VudCA9IENvb2tpZUNvbnNlbnRSZXBvc2l0b3J5LmZldGNoKCk7CiAgICAgICAgICAgIGlmIChjb25zZW50LmZ1bmN0aW9uYWwpIHsKICAgICAgICAgICAgICAgIGNvbnNlbnRZZXMoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgQ29va2llQ29uc2VudExpc3RlbmVyLm9uRnVuY3Rpb25hbENvbnNlbnRDaGFuZ2UoZnVuY3Rpb24oaGFzRnVuY3Rpb25hbENvbnNlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChoYXNGdW5jdGlvbmFsQ29uc2VudCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNlbnRZZXMoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb25zZW50Tm8oKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgYm9vdFlvdXR1YmVJZnJhbWVzKCk7CiAgICAgICAgICAgIGJvb3RWaW1lb0lmcmFtZXMoKTsKICAgICAgICB9KTsKCiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEgPT09ICJvcGVuQ29va2llQ29uc2VudERpYWxvZyIpIHsKICAgICAgICAgICAgICAgIE9uZVRydXN0LlRvZ2dsZUluZm9EaXNwbGF5KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LCBmYWxzZSk7CgogICAgICAgIGZ1bmN0aW9uIE9wdGFub25XcmFwcGVyKCkKICAgICAgICB7CiAgICAgICAgICAgIE9uZVRydXN0Lk9uQ29uc2VudENoYW5nZWQoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIENvb2tpZUNvbnNlbnRMaXN0ZW5lci50cmlnZ2VyQ2hhbmdlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIDwvc2NyaXB0PgoKICAgICAgICAKICAgICAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvdGhlam91cm5hbC9mYXZpY29uLmljbyIgdHlwZT0iaW1hZ2UveC1pY29uIiByZWw9Imljb24iIC8+CiAgICAgICAgPGxpbmsgaHJlZj0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS90aGVqb3VybmFsL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIHJlbD0ic2hvcnRjdXQgaWNvbiIgLz4KICAgICAgICA8bGluayBocmVmPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL3RoZWpvdXJuYWwvYXBwbGUtdG91Y2gtaWNvbi5wbmciIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgLz4KICAgICAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9U291cmNlK1NhbnMrUHJvOjIwMCwyMDBpLDMwMCwzMDBpLDQwMCw0MDBpLDYwMCw2MDBpLDcwMCw3MDBpLDkwMCw5MDBpIiByZWw9InN0eWxlc2hlZXQiPgogICAgICAgIDxtZXRhIG5hbWU9ImFwcGxlLWl0dW5lcy1hcHAiIGNvbnRlbnQ9ImFwcC1pZD00MDkzNTk0OTEiPgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NOYW1lKz0nIGpzJzsKICAgIHZhciBhamF4dXJsID0gJy8vd3d3LnRoZWpvdXJuYWwuaWUvYWpheC5waHAnOwogICAgdmFyIHN0YXRzX3VybCA9ICdodHRwczovL3d3dy50aGVqb3VybmFsLmllL3N0YXRzc2NyaXB0LnBocCc7CiAgICB2YXIgY3VycmVudF91cmwgPSAnd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvJzsKICAgIHZhciBsb2FkX3RpbWUgPSAnMjAyMS0wNC0yOCAxNzo1NTozNic7CiAgICB2YXIgY3VycmVudF9wb3N0X2lkID0gMDsKICAgIHZhciBjdXJyZW50X3Bvc3RfcGVybWFsaW5rID0gJyc7CiAgICB2YXIgc3RhdHNfa2V5ID0gIjk5NzZkMWMxM2RmY2YzYTI3NjY5NDE0MGYwYzgzZWExIjsKICAgIHZhciB3cF9sb2dnZWRfaW4gPSBmYWxzZTsKICAgIHZhciBjdXJyZW50X3RpdGxlID0gIiI7CgogICAgd2luZG93Lmpybmxfc29jaWFsX2Nvbm5lY3RlZCA9IGZhbHNlOwoKICAgIHZhciBfc2Zfc3RhcnRwdD0obmV3IERhdGUoKSkuZ2V0VGltZSgpCgogICAgdmFyIGFwcF9jb29raWVfZG9tYWluID0gJy50aGVqb3VybmFsLmllJzsKICAgIHZhciBzZXNzaW9uX2RvbWFpbiA9ICJodHRwczovL3d3dy50aGVqb3VybmFsLmllIjsKICAgIHZhciByb290X2RvbWFpbiA9ICJ0aGVqb3VybmFsLmllIjsKPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIGRvY3VtZW50LmRvbWFpbiA9ICJ0aGVqb3VybmFsLmllIjsKCiAgICB3aW5kb3cub25fZnJvbnQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHdpbmRvdy5hdXRoZW50aWNhdG9yID0gJyc7CiAgICB3aW5kb3cubG9naW5fZXhwaXJlcyA9IDE3NzczOTUzMzY7CiAgICB3aW5kb3cudXNlcnNfdG9rZW4gPSAnJzsKCiAgICAgICAgICAgICAgICB3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIEZCLmluaXQoe2FwcElkOiAiMTE2MTQxMTIxNzY4MjE1Iiwgc3RhdHVzOiB0cnVlLCBjb29raWU6IHRydWUsCiAgICAgICAgICAgICAgICB4ZmJtbDogdHJ1ZX0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHN5bmNfd2l0aF9zZXJ2ZXIgIT0gJ3VuZGVmaW5lZCcpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNfd2l0aF9zZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAoZnVuY3Rpb24oZCl7CiAgICAgICAgICAgICAgICB2YXIganMsIGlkID0gJ2ZhY2Vib29rLWpzc2RrJzsgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7cmV0dXJuO30KICAgICAgICAgICAgICAgIGpzID0gZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsganMuaWQgPSBpZDsganMuYXN5bmMgPSB0cnVlOwogICAgICAgICAgICAgICAganMuc3JjID0gIi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvYWxsLmpzIjsKICAgICAgICAgICAgICAgIGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChqcyk7CiAgICAgICAgICAgIH0oZG9jdW1lbnQpKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5lbWFpbF9wZXJtaXNzaW9uID0gZmFsc2U7CiAgICAgICAgd2luZG93LnNoYXJlX3Blcm1pc3Npb24gPSBmYWxzZTsKICAgICAgICAgICAgdmFyIGpybmxfc29jaWFsX3dpbmRvdyA9IG51bGw7CiAgICAgICAgZnVuY3Rpb24ganJubF9zb2NpYWxfbG9naW4oc2VydmljZSwgc3VibWl0X2NvbW1lbnQsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBsaW5rID0gJyc7CiAgICAgICAgICAgIGlmKHNlcnZpY2UgPT0gJ3R3aXR0ZXInKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsaW5rID0gImh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdXRpbHMvbG9naW4vdHdpdHRlci8/IjsKICAgICAgICAgICAgICAgIGlmKHN1Ym1pdF9jb21tZW50KQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGxpbmsgPSBsaW5rICsgIiZjb21tZW50PTEiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZihjYWxsYmFjawogICAgICAgICAgICAgICAgICAgICYmIGNhbGxiYWNrLmxlbmd0aCA+IDAKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsaW5rID0gbGluayArICI/Y2I9IiArIGNhbGxiYWNrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYoc2VydmljZSA9PSAnZmFjZWJvb2snKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAvLyBGYWNlYm9vayBsaW5rIGlzIGEgYml0IG1lc3NpZXIgLSBuZWVkIHRvIGJvdW5jZSB0aHJvdWdoIHBvcHVwCiAgICAgICAgICAgICAgICBsaW5rID0gImh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdXRpbHMvbG9naW4vZmFjZWJvb2svP3VybD1odHRwcyUzQSUyRiUyRnd3dy5mYWNlYm9vay5jb20lMkZkaWFsb2clMkZvYXV0aCUzRmRpc3BsYXklM0Rwb3B1cCUyNmNsaWVudF9pZCUzRDExNjE0MTEyMTc2ODIxNSUyNnNjb3BlJTNEIiArIGdldF9mYl9wZXJtX3N0cmluZygpICsgIiUyNnJlZGlyZWN0X3VyaSUzRGh0dHBzJTNBJTJGJTJGd3d3LnRoZWpvdXJuYWwuaWUlMkZ1dGlscyUyRmxvZ2luJTJGZmFjZWJvb2slMkYiOwogICAgICAgICAgICAgICAgLy8gQXJlIHdlIHN1Ym1pdHRpbmcgYWZ0ZXIgbG9nLWluPwogICAgICAgICAgICAgICAgaWYoc3VibWl0X2NvbW1lbnQpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbGluayA9IGxpbmsgKyAiP2NvbW1lbnQ9MSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmKGNhbGxiYWNrCiAgICAgICAgICAgICAgICAgICAgJiYgY2FsbGJhY2subGVuZ3RoID4gMAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGxpbmsgPSBsaW5rICsgIj9jYj0iICsgY2FsbGJhY2s7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgganJubF9zb2NpYWxfd2luZG93ICE9IG51bGwgJiYgIWpybmxfc29jaWFsX3dpbmRvdy5jbG9zZWQgKQogICAgICAgICAgICAgICAganJubF9zb2NpYWxfd2luZG93LmNsb3NlKCk7CgogICAgICAgICAgICBqcm5sX3NvY2lhbF93aW5kb3cgPSB3aW5kb3cub3BlbigKICAgICAgICAgICAgICAgIGxpbmssCiAgICAgICAgICAgICAgICAnanJubF9zb2NpYWxfd2luZG93JywKICAgICAgICAgICAgICAgICdzdGF0dXMsc2Nyb2xsYmFycyxsb2NhdGlvbixyZXNpemFibGUsd2lkdGg9NjAwLGhlaWdodD0zNTAnCiAgICAgICAgICAgICkKICAgICAgICAgICAganJubF9zb2NpYWxfd2luZG93LmZvY3VzKCk7CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQo8L3NjcmlwdD4KICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgdHlwZT0iYXBwbGljYXRpb24vcnNzK3htbCIgdGl0bGU9IlRoZUpvdXJuYWwuaWUgJnJhcXVvOyBGZWVkIiBocmVmPSIvZmVlZC8iIC8+CgogICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjcuMi9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgICAgIHdpbmRvdy5qUXVlcnkgfHwgZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQgc3JjPSJodHRwczovL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9qcy9qcXVlcnktMS43LjIubWluLmpzIj48XC9zY3JpcHQ+JykKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgCiAgICAgICAgPCEtLSBTdGFydCBkbWxwb29sIFRhZyAtLT4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvL3Bvb2wuam91cm5hbG1lZGlhLmllL2pzL2xzY2FjaGUubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICB2YXIgX3Bvb2wgPSBfcG9vbCB8fCBbXTsKICAgICAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICAgICAgcy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICAgICAgICAgICAgICBzLmFzeW5jID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHMuc3JjID0gJy8vcG9vbC5qb3VybmFsbWVkaWEuaWUvanMvcG9vbC5taW4uanMnOwogICAgICAgICAgICAgICAgdmFyIHggPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07CiAgICAgICAgICAgICAgICB4LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIHgpOwogICAgICAgICAgICB9KSgpOwogICAgICAgICAgICBfcG9vbC5wdXNoKFsnY2FjaGVCdWNrZXRMb2NhbGx5JywgWydfZG1sJ11dKTsKCiAgICAgICAgICAgIC8vIHZpZXdhYmlsaXR5IGpzCiAgICAgICAgICAgIF9qcm5sX3ZpZXdhYmlsaXR5ID0gW107CiAgICAgICAgICAgIF9qcm5sX3NpZGViYXIgPSBbXTsKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8IS0tIEVuZCBkbWxwb29sIFRhZyAtLT4KCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY2hhcnRzL2xvYWRlci5qcyI+PC9zY3JpcHQ+CgoKCiAgICAgICAgCiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+CiAgICAgICAgICAgICAgICAgICAgdmFyIGlzX2JveF93aW5kb3cgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNfYm94X25hbWUgPSAnJzsKICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2pzL2J1aWxkL2N1cnJlbnQtYTA5YjU5ZmNmYS5qcyI+PC9zY3JpcHQ+CiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2pzL2J1aWxkL2xlZ2FjeS1jb21tb24tZjJhODdhM2YyZi5qcyI+PC9zY3JpcHQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iIj48L3NjcmlwdD4KCiAgICAgICAgICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvY3NzL2J1aWxkL2Rlc2t0b3AtYzJkYjZiYjcxMC5jc3MiIC8+CiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvY3NzL2J1aWxkL2xlZ2FjeS1jb21tb24tMGM5YzJhZGNhOS5jc3MiIC8+CiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iIiAvPgogICAgICAgICAgICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlJlYWQsIHNoYXJlIGFuZCBzaGFwZSB0aGUgbmV3cyBvbiBUaGVKb3VybmFsLmllIC0gQnJlYWtpbmcgSXJpc2ggYW5kIEludGVybmF0aW9uYWwgTmV3cyIgLz4KICAgICAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0ibmV3cywgaXJpc2ggbmV3cywgYnJlYWtpbmcgbmV3cywgaXJpc2ggcG9saXRpY3MsIGJ1c2luZXNzLCBzcG9ydHMsIGVudGVydGFpbm1lbnQsIG5ld3MgYmxvZywgaXJlbGFuZCwgaXJpc2giIC8+CiAgICAgICAgPG1ldGEgbmFtZT0ibmV3c19rZXl3b3JkcyIgY29udGVudD0ibmV3cywgaXJpc2ggbmV3cywgYnJlYWtpbmcgbmV3cywgaXJpc2ggcG9saXRpY3MsIGJ1c2luZXNzLCBzcG9ydHMsIGVudGVydGFpbm1lbnQsIG5ld3MgYmxvZywgaXJlbGFuZCwgaXJpc2giIC8+CjxsaW5rIHJlbD0ibmV4dCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy9wYWdlLzIvIiAvPjxtZXRhIG5hbWU9ImZiOmFwcF9pZCIgY29udGVudD0iMTE2MTQxMTIxNzY4MjE1IiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSIvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IkZhY3RjaGVjayAmbWlkZG90OyBUaGVKb3VybmFsLmllIi8+CjxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUiLz4KPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92My4yLzEzNzU3NjA3NjI2MjgyNS9waWN0dXJlP3R5cGU9bGFyZ2UiLz4KPG1ldGEgcHJvcGVydHk9Im9nOnNpdGVfbmFtZSIgY29udGVudD0iVGhlSm91cm5hbC5pZSIvPgo8bWV0YSBwcm9wZXJ0eT0iZmI6cGFnZXMiIGNvbnRlbnQ9IjEzNzU3NjA3NjI2MjgyNSIvPgo8c2NyaXB0PgogICAgdmFyIGNvbW1lbnRTZWMgPSB7CiAgICAgICAgdG9rZW4gOiAiYzY1NTYwNzQzIgogICAgfQo8L3NjcmlwdD4KCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KdmFyIGdvb2dsZXRhZyA9IGdvb2dsZXRhZyB8fCB7fTsKZ29vZ2xldGFnLmNtZCA9IGdvb2dsZXRhZy5jbWQgfHwgW107CihmdW5jdGlvbigpIHsKdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZ2Fkcy5hc3luYyA9IHRydWU7CmdhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwp2YXIgdXNlU1NMID0gJ2h0dHBzOicgPT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2w7CmdhZHMuc3JjID0gKHVzZVNTTCA/ICdodHRwczonIDogJ2h0dHA6JykgKwonLy93d3cuZ29vZ2xldGFnc2VydmljZXMuY29tL3RhZy9qcy9ncHQuanMnOwp2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKfSkoKTsKPC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+Cgpnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24oKSB7CiAgICAKICAgIHZhciBjb25zZW50ID0gQ29va2llQ29uc2VudFJlcG9zaXRvcnkuZmV0Y2goKTsKICAgIHZhciBhcmVDb29raWVzRGlzYWJsZWQgPSBjb25zZW50LnRhcmdldGluZyA/IDAgOiAxOwogICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldENvb2tpZU9wdGlvbnMoYXJlQ29va2llc0Rpc2FibGVkKTsKICAgIGNvbnNvbGUubG9nKCJVc2VyIENvbnNlbnQ6IEdvb2dsZSBBZHMgIiArIChjb25zZW50LnRhcmdldGluZyA/ICJlbmFibGVkIiA6ICJkaXNhYmxlZCIpKTsKCiAgICBDb29raWVDb25zZW50TGlzdGVuZXIub25UYXJnZXRpbmdDb25zZW50Q2hhbmdlKGZ1bmN0aW9uIChoYXNUYXJnZXRpbmdDb25zZW50KSB7CiAgICAgICAgdmFyIGFyZUNvb2tpZXNEaXNhYmxlZCA9IGhhc1RhcmdldGluZ0NvbnNlbnQgPyAwIDogMTsKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0Q29va2llT3B0aW9ucyhhcmVDb29raWVzRGlzYWJsZWQpOwogICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCk7CiAgICAgICAgY29uc29sZS5sb2coIlVzZXIgQ29uc2VudDogR29vZ2xlIEFkcyAiICsgKGhhc1RhcmdldGluZ0NvbnNlbnQgPyAiZW5hYmxlZCIgOiAiZGlzYWJsZWQiKSk7CiAgICB9KTsKZ29vZ2xldGFnLmRlZmluZVNsb3QoJy81NTEyNDI5L0pfSGFsZl9QYWdlJywgW1syLDFdLFszMDAsNjAwXSxbMTYwLDYwMF1dLCAnZGl2LWdwdC1hZC0xMzY1MDkyNDA2MjEzLTAnKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7Cmdvb2dsZXRhZy5kZWZpbmVTbG90KCcvNTUxMjQyOS9KX01QVScsIFtbImZsdWlkIl0sWzEsMV0sWzMwMCwyNTBdLFszMDAsNjAwXV0sICdkaXYtZ3B0LWFkLTEzNjUwOTI0MDYyMTMtMScpLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsKZ29vZ2xldGFnLmRlZmluZVNsb3QoJy81NTEyNDI5L0pfUml2ZXJibG9jaycsIFtbMiwxXSxbNjMwLDE3Ml1dLCAnZGl2LWdwdC1hZC0xMzY1MDkyNDA2MjEzLTInKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7Cmdvb2dsZXRhZy5kZWZpbmVTbG90KCcvNTUxMjQyOS9KX0xlYWRlcmJvYXJkJywgW1sxLDFdLFs3MjgsOTBdLFs5NzAsMjUwXV0sICdkaXYtZ3B0LWFkLTEzNjUwOTI0MDYyMTMtMycpLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsKZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnZmlsdGVyX3R5cGUnLCAidGFnIik7Cmdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ3BsYXRmb3JtJywgJ2Rlc2t0b3AnKTsKZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnc2l0ZW1vZGUnLCAnZGVmYXVsdCcpOwoKZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnc2l0ZScsICd0aGVqb3VybmFsJyk7Cmdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ3B1YmxpY2F0aW9uJywgJ3RoZWpvdXJuYWwnKTsKZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnc2VjdGlvbicsICJyaXZlciIpOwpnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCd0YWdzJywgWyJmYWN0Y2hlY2siXSk7Cmdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ3RpbGluZycsICc3Jyk7CgppZiAoJCgiI2pzLXJldGFyZ2V0aW5nIikubGVuZ3RoID4gMCkKewogICAgdHJ5CiAgICB7CiAgICAgICAgdmFyIHJldGFyZ2V0aW5nID0gbmV3IFJldGFyZ2V0aW5nQ2xpZW50KCk7CiAgICAgICAgcmV0YXJnZXRpbmcudHJhY2tWaWV3KCk7CiAgICB9CiAgICBjYXRjaCAoZSkKICAgIHsKICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7CiAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICB9Cn0KCi8vZ29vZ2xldGFnLnB1YmFkcygpLmRpc2FibGVJbml0aWFsTG9hZCgpOwppZihsc2NhY2hlICYmIE9iamVjdC5rZXlzKQp7CiAgICB2YXIgX2RtbCA9IE9iamVjdC5rZXlzKGxzY2FjaGUuZ2V0QnVja2V0KCdfZG1sJykpLmpvaW4oIiwiKTsKICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ19kbWwnLCBfZG1sKTsKfQoKCgogICAgZ29vZ2xldGFnLnB1YmFkcygpLmVuYWJsZVNpbmdsZVJlcXVlc3QoKTsKICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5jb2xsYXBzZUVtcHR5RGl2cygpOwogICAgZ29vZ2xldGFnLmVuYWJsZVNlcnZpY2VzKCk7Cgp9KTsKCgpkZnBMb2FkQ2hlY2soJ2Rpdi1ncHQtYWQtMTM2NTA5MjQwNjIxMy0zJyk7Cgo8L3NjcmlwdD4KICAgICAgICA8IS0tIElFOSBQaW5uaW5nIC0tPgogICAgICAgIDxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IlRoZUpvdXJuYWwiIC8+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi10b29sdGlwIiBjb250ZW50PSJUaGVKb3VybmFsLmllIC0gUmVhZCwgU2hhcmUgYW5kIFNoYXBlIHRoZSBuZXdzIiAvPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3RhcnR1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvIiAvPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tdGFzayIgY29udGVudD0ibmFtZT1UaGUgOSBhdCA5O2FjdGlvbi11cmk9aHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS85YXQ5O2ljb24tdXJpPS8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvdGhlam91cm5hbC9mYXZpY29uLmljbyIgLz4KICAgICAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXRhc2siIGNvbnRlbnQ9Im5hbWU9VGhlNDI7YWN0aW9uLXVyaT1odHRwczovL3d3dy50aGU0Mi5pZS87aWNvbi11cmk9Ly9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS90aGU0Mi9mYXZpY29uLmljbyIgLz4KICAgICAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXRhc2siIGNvbnRlbnQ9Im5hbWU9QnVzaW5lc3MgRXRjO2FjdGlvbi11cmk9aHR0cHM6Ly9idXNpbmVzc2V0Yy50aGVqb3VybmFsLmllLztpY29uLXVyaT0vL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL2J1c2luZXNzZXRjL2Zhdmljb24uaWNvIiAvPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tdGFzayIgY29udGVudD0ibmFtZT1EYWlseUVkZ2UuaWU7YWN0aW9uLXVyaT1odHRwczovL3RoZWRhaWx5ZWRnZS50aGVqb3VybmFsLmllLztpY29uLXVyaT0vL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL3RoZWRhaWx5ZWRnZS9mYXZpY29uLmljbyIgLz4KICAgICAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXRhc2siIGNvbnRlbnQ9Im5hbWU9SXJpc2ggTmV3czthY3Rpb24tdXJpPWh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvaXJpc2gvO2ljb24tdXJpPS8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvdGhlam91cm5hbC9mYXZpY29uLmljbyIgLz4KICAgICAgICA8IS0tIC9JRTkgUGlubmluZyAtLT4KCgogICAgICAgIDxzY3JpcHQgc3JjPSdodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanMnPjwvc2NyaXB0PgogICAgPC9oZWFkPgoKICAgIAogICAgPCEtLVtpZiBJRSA2XT48Ym9keSBjbGFzcz0iaWUgaWU2IGllLWx0OCAiPjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA3XT48Ym9keSBjbGFzcz0iaWUgaWU3IGllLWx0OCAiPjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA4XT48Ym9keSBjbGFzcz0iaWUgaWU4ICI+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGd0ZSBJRSA5XT48Ym9keSBjbGFzcz0iaWU5dXAgIj48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgIUlFXT48IS0tPgogICAgPGJvZHkgY2xhc3M9Im5pZSAiPgogICAgPCEtLTwhW2VuZGlmXS0tPgogICAgPHNjcmlwdD4KICAoZnVuY3Rpb24oaSxzLG8sZyxyLGEsbSl7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J109cjtpW3JdPWlbcl18fGZ1bmN0aW9uKCl7CiAgKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksCiAgbT1zLmdldEVsZW1lbnRzQnlUYWdOYW1lKG8pWzBdO2EuYXN5bmM9MTthLnNyYz1nO20ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxtKQogIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJywnZ2EnKTsKPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCihmdW5jdGlvbigpewoKICAgIHZhciBoYXNTZW50UGFnZVZpZXcgPSBmYWxzZTsKCiAgICBmdW5jdGlvbiBjb25zZW50WWVzKCkKICAgIHsKICAgICAgICB3aW5kb3dbJ2dhLWRpc2FibGUtVUEtMTc0NTY0MDMtMzcnXSA9IGZhbHNlOwogICAgICAgIGNvbnNvbGUubG9nKCJVc2VyIENvbnNlbnQ6IEdvb2dsZSBBbmFseXRpY3MgZW5hYmxlZCIpOwogICAgICAgIGlmIChoYXNTZW50UGFnZVZpZXcpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBnYSgnc2VuZCcsICdwYWdldmlldycpOwogICAgICAgIGhhc1NlbnRQYWdlVmlldyA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gY29uc2VudE5vKCkKICAgIHsKICAgICAgICB3aW5kb3dbJ2dhLWRpc2FibGUtVUEtMTc0NTY0MDMtMzcnXSA9IHRydWU7CiAgICAgICAgY29uc29sZS5sb2coIlVzZXIgQ29uc2VudDogR29vZ2xlIEFuYWx5dGljcyBkaXNhYmxlZCIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJvb3QoKQogICAgewogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtMTc0NTY0MDMtMzcnLCAnYXV0bycpOwoKICAgICAgICB2YXIgY29uc2VudCA9IENvb2tpZUNvbnNlbnRSZXBvc2l0b3J5LmZldGNoKCk7CiAgICAgICAgaWYgKGNvbnNlbnQucGVyZm9ybWFuY2UpIHsKICAgICAgICAgICAgY29uc2VudFllcygpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNlbnRObygpOwogICAgICAgIH0KCiAgICAgICAgQ29va2llQ29uc2VudExpc3RlbmVyLm9uUGVyZm9ybWFuY2VDb25zZW50Q2hhbmdlKGZ1bmN0aW9uKGhhc1BlcmZvcm1hbmNlQ29uc2VudCkgewogICAgICAgICAgICBpZiAoaGFzUGVyZm9ybWFuY2VDb25zZW50KSB7CiAgICAgICAgICAgICAgICBjb25zZW50WWVzKCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc2VudE5vKCk7CiAgICAgICAgfSk7CiAgICB9CgogICAgYm9vdCgpOwp9KCkpOwoKPC9zY3JpcHQ+CjxkaXYgaWQ9Im15ZmVlZC1iYW5uZXIiIGNsYXNzPSIgaGlkZGVuICI+CiAgICA8ZGl2IGNsYXNzPSJwYWdlLWNvbnRlbnQgc2NyZWVuLTEgIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9ucy1ibHVyYiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIE15IE5ld3MgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VidGV4dCI+CiAgICAgICAgICAgICAgICBQZXJzb25hbGlzZSB5b3VyIG5ld3MgZmVlZCBieSBjaG9vc2luZyB5b3VyIGZhdm91cml0ZSB0b3BpY3Mgb2YgaW50ZXJlc3QgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9ucyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4gYnRuLWFjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgR2V0IFN0YXJ0ZWQKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1kZWNsaW5lIj4KICAgICAgICAgICAgICAgICAgICBObyBUaGFua3MKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icGFnZS1jb250ZW50IHNjcmVlbi0yIGhpZGRlbiI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbnMtYmx1cmIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICBDcmVhdGUgeW91ciBvd24gbmV3c2ZlZWQgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VidGV4dCI+CiAgICAgICAgICAgICAgICBDaG9vc2UgMyBvciBtb3JlIHRvcGljcyB0aGF0IHlvdSB3YW50IHRvIHNlZS4gICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9ucy1vcHRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VjdGlvbi1vcHRpb24gIgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2VjdGlvbj0iaXJpc2giCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLWlyaXNoIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC9pcmlzaC5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3RpY2sucG5nIiBjbGFzcz0ic2VjdGlvbi10aWNrIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPklyaXNoIE5ld3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlY3Rpb24tb3B0aW9uICIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlY3Rpb249InBvbGl0aWNzIgogICAgICAgICAgICAgICAgICAgIGlkPSJteWZlZWQtc2VjdGlvbi1wb2xpdGljcyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvcG9saXRpY3MucG5nIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC90aWNrLnBuZyIgY2xhc3M9InNlY3Rpb24tdGljayIgLz4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Qb2xpdGljczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VjdGlvbi1vcHRpb24gIgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2VjdGlvbj0iaW50ZXJuYXRpb25hbCIKICAgICAgICAgICAgICAgICAgICBpZD0ibXlmZWVkLXNlY3Rpb24taW50ZXJuYXRpb25hbCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvaW50ZXJuYXRpb25hbC5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3RpY2sucG5nIiBjbGFzcz0ic2VjdGlvbi10aWNrIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkludGVybmF0aW9uYWw8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlY3Rpb24tb3B0aW9uICIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlY3Rpb249InJlYWRtZSIKICAgICAgICAgICAgICAgICAgICBpZD0ibXlmZWVkLXNlY3Rpb24tcmVhZG1lIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC9yZWFkbWUucG5nIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC90aWNrLnBuZyIgY2xhc3M9InNlY3Rpb24tdGljayIgLz4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5PcGluaW9uPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJsaXZpbmciCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLWxpdmluZyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvbGl2aW5nLnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+TGl2aW5nPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJmYW1pbHkiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLWZhbWlseSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvZmFtaWx5LnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+RmFtaWx5PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJ0ZWNobm9sb2d5IgogICAgICAgICAgICAgICAgICAgIGlkPSJteWZlZWQtc2VjdGlvbi10ZWNobm9sb2d5IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC90ZWNobm9sb2d5LnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VGVjaG5vbG9neTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VjdGlvbi1vcHRpb24gIgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2VjdGlvbj0iYnVzaW5lc3MiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLWJ1c2luZXNzIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC9idXNpbmVzcy5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3RpY2sucG5nIiBjbGFzcz0ic2VjdGlvbi10aWNrIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkJ1c2luZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJnYWEiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLWdhYSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvZ2FhLnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+R0FBPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJzb2NjZXIiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLXNvY2NlciIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvc29jY2VyLnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+U29jY2VyPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJydWdieSIKICAgICAgICAgICAgICAgICAgICBpZD0ibXlmZWVkLXNlY3Rpb24tcnVnYnkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3J1Z2J5LnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UnVnYnk8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlY3Rpb24tb3B0aW9uICIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlY3Rpb249Im1tYSIKICAgICAgICAgICAgICAgICAgICBpZD0ibXlmZWVkLXNlY3Rpb24tbW1hIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC9tbWEucG5nIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC90aWNrLnBuZyIgY2xhc3M9InNlY3Rpb24tdGljayIgLz4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NTUE8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlY3Rpb24tb3B0aW9uICIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlY3Rpb249IndhdGVyY29vbGVyIgogICAgICAgICAgICAgICAgICAgIGlkPSJteWZlZWQtc2VjdGlvbi13YXRlcmNvb2xlciIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvd2F0ZXJjb29sZXIucG5nIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC90aWNrLnBuZyIgY2xhc3M9InNlY3Rpb24tdGljayIgLz4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5XYXRlcmNvb2xlcjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VjdGlvbi1vcHRpb24gIgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2VjdGlvbj0iZ29pbmctb3V0IgogICAgICAgICAgICAgICAgICAgIGlkPSJteWZlZWQtc2VjdGlvbi1nb2luZy1vdXQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL2dvaW5nLW91dC5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3RpY2sucG5nIiBjbGFzcz0ic2VjdGlvbi10aWNrIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvaW5nIE91dDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VjdGlvbi1vcHRpb24gIgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2VjdGlvbj0ic2NyZWVucyIKICAgICAgICAgICAgICAgICAgICBpZD0ibXlmZWVkLXNlY3Rpb24tc2NyZWVucyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvc2NyZWVucy5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3RpY2sucG5nIiBjbGFzcz0ic2VjdGlvbi10aWNrIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlNjcmVlbnM8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlY3Rpb24tb3B0aW9uICIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlY3Rpb249InF1aXoiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im15ZmVlZC1zZWN0aW9uLXF1aXoiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL3F1aXoucG5nIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL215ZmVlZC90aWNrLnBuZyIgY2xhc3M9InNlY3Rpb24tdGljayIgLz4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5RdWl6emVzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWN0aW9uLW9wdGlvbiAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWN0aW9uPSJjaGFuZ2UtZ2VuZXJhdGlvbiIKICAgICAgICAgICAgICAgICAgICBpZD0ibXlmZWVkLXNlY3Rpb24tY2hhbmdlLWdlbmVyYXRpb24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbXlmZWVkL2NoYW5nZS1nZW5lcmF0aW9uLnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9teWZlZWQvdGljay5wbmciIGNsYXNzPSJzZWN0aW9uLXRpY2siIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q2hhbmdlIEdlbmVyYXRpb248L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1hY3Rpb24gaW5hY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIENyZWF0ZSBteSBuZXdzZmVlZAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJteS1mZWVkLWNsb3NlIj4KICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoIGRvY3VtZW50ICkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gYWNjZXB0cyBpZiBvbiBmZWVkIHJpdmVyCiAgICAgICAgbXlmZWVkU2VsZWN0b3IuaW5pdCgwKTsKICAgIH0pOwo8L3NjcmlwdD4KPGRpdiBpZD0iaGVhZGVyX2xlYWRlcmJvYXJkX2NvbnRhaW5lciI+CiAgICA8Y2VudGVyIGlkPSJoZWFkZXJfbGVhZGVyYm9hcmQiIGNsYXNzPSJoZWFkZXJfbGVhZGVyYm9hcmQgcml2ZXJfbGVhZGVyYm9hcmQiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbmZvcm1hdGlvbiI+QWR2ZXJ0aXNlbWVudDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRTcGFjaW5nID0gIjEwMSI7CiAgICAgICAgICAgICAgICBpZih3aW5kb3cubG9jYWxTdG9yYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RCYW5uZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdF9tYXN0aGVhZF9hZF9zaXplJyk7CiAgICAgICAgICAgICAgICAgICAgaWYobGFzdEJhbm5lciA9PSAnYmlsbGJvYXJkJykgewogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3BhY2luZyA9ICIyNjEiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGxhc3RCYW5uZXIgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTcGFjaW5nID0gIjExIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkb2N1bWVudC53cml0ZSgnPGRpdiBpZD0ibGVhZGVyYm9hcmRfaGVpZ2h0X3NwYWNlciIgc3R5bGU9IndpZHRoOjFweDsgZmxvYXQ6bGVmdDsgZGlzcGxheTppbmxpbmU7IGhlaWdodDonK2RlZmF1bHRTcGFjaW5nKydweCI+PC9kaXY+Jyk7CiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICA8ZGl2IHN0eWxlPSd3aWR0aDogOTcwcHg7Jz48ZGl2IGlkPSdkaXYtZ3B0LWFkLTEzNjUwOTI0MDYyMTMtMyc+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uKCkgeyBnb29nbGV0YWcuZGlzcGxheSgnZGl2LWdwdC1hZC0xMzY1MDkyNDA2MjEzLTMnKTsgfSk7Cjwvc2NyaXB0Pgo8L2Rpdj48L2Rpdj4gICAgPC9jZW50ZXI+CjwvZGl2PgogICAgICAgIDxkaXYgaWQ9ImZiLXJvb3QiPjwvZGl2PgogICAgICAgIDxzZWN0aW9uIGlkPSJjb250cmlidXRpb24tcHJvbXB0LW92ZXJsYXkiIGNsYXNzPSJjb250cmlidXRpb24tcHJvbXB0Ij4KICAgIDxpbWcgY2xhc3M9ImNsb3NlLWJ1dHRvbiIgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pLy9jb250cmlidXRpb24tcHJvbXB0L2Nsb3NlLWJ1dHRvbi5zdmciIGFsdD0iIj4KCiAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNvbnRlbnQiPgogICAgICAgIDxzcGFuIGNsYXNzPSJoYXNodGFnIj4jT3BlbiBqb3VybmFsaXNtPC9zcGFuPgoKICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPk5vIG5ld3MgaXMgYmFkIG5ld3M8L3NwYW4+CiAgICAgICAgPHA+CiAgICAgICAgICAgIFlvdXIgPGI+Y29udHJpYnV0aW9uczwvYj4gd2lsbCBoZWxwIHVzIGNvbnRpbnVlIHRvIGRlbGl2ZXIgdGhlIHN0b3JpZXMgdGhhdCBhcmUgaW1wb3J0YW50IHRvIHlvdQogICAgICAgIDwvcD4KICAgIDwvZGl2PgoKICAgIDxhIGhyZWY9Ii9jb250cmlidXRlIj4KICAgICAgICBTdXBwb3J0IFRoZSBKb3VybmFsCiAgICA8L2E+Cjwvc2VjdGlvbj4KCiAgICAgICAgPGhlYWRlcj4KICAgIDxkaXYgY2xhc3M9ImhlYWRlci13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvLXdyYXBwZXIiPgogICAgICAgICAgICA8YSBjbGFzcz0ibG9nby1saW5rIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllLyIgZGF0YS1hbmFseXRpY3MtbGFiZWw9IkhvbWVwYWdlIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxvZ28iIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS90aGVqb3VybmFsL2xvZ28uc3ZnIj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFkZGl0aW9uYWwtYnV0dG9uIGhhcy1ob3ZlciIgaHJlZj0iL2NvbnRyaWJ1dGUiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJDb250cmlidXRlIFtMb2dvIEJ1dHRvbl0iPkNvbnRyaWJ1dGUgOiA8Yj5TdXBwb3J0IHVzIG5vdzwvYj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYWRkaXRpb25hbC1pbmZvcyI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJ3ZWF0aGVyIGhhcy1ob3ZlciIgaHJlZj0iL3dlYXRoZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5EdWJsaW46IDEwwrBDPC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL3RoZWpvdXJuYWwvd2VhdGhlci1pY29ucy8wMi5zdmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICBXZWRuZXNkYXkgMjggQXByaWwgMjAyMQogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9oZWFkZXI+Cgo8bmF2IGlkPSJtYWluLW5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0ibmF2LWxpbmtzIj4KICAgICAgICA8dWwgY2xhc3M9Im5hdi1jYXRlZ29yaWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9pcmlzaC8iPgogICAgICAgICAgICAgICAgICAgICAgICBJcmlzaCBOZXdzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgICAgIEZhY3RDaGVjawogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdm9pY2VzLyI+CiAgICAgICAgICAgICAgICAgICAgICAgIFZvaWNlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdGhlLWdvb2QtaW5mb3JtYXRpb24tcHJvamVjdC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBHb29kIEluZm9ybWF0aW9uIFByb2plY3QKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2NvdmlkMTktZmFjdHMvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICAgICBDb3ZpZC0xOQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJtYWluLW5hdi10b2dnbGUtaGFuZGxlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2LXRvZ2dsZS1vcGVuIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2LXRvZ2dsZSI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5ld3NsZXR0ZXJzPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UG9kY2FzdHM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Nb3JlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9IjMwIiBoZWlnaHQ9IjMwIiB2aWV3Qm94PSIwIDAgMjUgMjUiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CiAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD0iMTIuNSIgY3k9IjEyLjUiIHI9IjEyLjUiIGZpbGw9ImN1cnJlbnRDb2xvciIgLz4KICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMTguMTI1IDEwLjA4M0g2Ljg3NSIgc3Ryb2tlPSJ3aGl0ZSIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiAvPgogICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xOC4xMjUgMTNINi44NzUiIHN0cm9rZT0id2hpdGUiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgLz4KICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMTguMTI1IDE1LjkxNkg2Ljg3NSIgc3Ryb2tlPSJ3aGl0ZSIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiAvPgogICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdi10b2dnbGUtY2xvc2UgaGlkZGVuIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2LXRvZ2dsZSI+CiAgICAgICAgICAgICAgICA8dWw+PGxpPkNsb3NlPC9saT48L3VsPgogICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD0iMzAiIGhlaWdodD0iMzAiIHZpZXdCb3g9IjAgMCAyNSAyNSIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PSIxMi41IiBjeT0iMTIuNSIgcj0iMTIuNSIgZmlsbD0iY3VycmVudENvbG9yIiAvPgogICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik05LjE2NjAyIDkuMTY2MDJMMTYuODMyNyAxNi44MzI3IiBzdHJva2U9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIC8+CiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD0iTTE2LjgzMjcgOS4xNjYwMkw5LjE2NjAyIDE2LjgzMjciIHN0cm9rZT0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgLz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L25hdj4KPGRpdiBpZD0ibWFpbi1uYXYtZHJvcGRvd24iIGNsYXNzPSJjbG9zZWQiPgogICAgPGEgY2xhc3M9ImxlZnQtbGluay1zZWN0aW9uIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3RoZS1leHBsYWluZXIvbmV3cy8iIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJUaGUgRXhwbGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWxzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGluZyI+V2Vla2x5IFBvZGNhc3Q8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUiPlRoZSBFeHBsYWluZXI8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPlRoZSBFeHBsYWluZXIgaXMgYSB3ZWVrbHkgcG9kY2FzdCBmcm9tIFRoZUpvdXJuYWwuaWUgdGhhdCB0YWtlcyBhIGRlZXBlciBsb29rIGF0IG9uZSBiaWcgbmV3cyBzdG9yeSB5b3UgbmVlZCB0byBrbm93IGFib3V0LiBMaXN0ZW4gbm93IHdoZXJldmVyIHlvdSBnZXQgeW91ciBwb2RjYXN0czwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9hPgogICAgPGRpdiBjbGFzcz0ib3B0aW9ucyI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRpbmciPk5ld3NsZXR0ZXJzIDogU2lnbiBVcDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzZWN0aW9uLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL21vcm5pbmctbWVtby1idXNpbmVzcy1uZXdzbGV0dGVyLTUwODE0MDgtQXByMjAyMC8iPk1vcm5pbmcgTWVtbzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY29yb25hdmlydXMtaW5mb3JtYXRpb24tZW1haWwtbmV3c2xldHRlci01MDM5NTUzLU1hcjIwMjAvIj5Db3JvbmF2aXJ1czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvYnJleGl0LW5ld3NsZXR0ZXItc2lnbnVwLTQ3NzQ4MTEtU2VwMjAxOS8iPkJyZXhpdDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZXZlbmluZy1maXgtc2lnbi11cC01MTc3NzI0LUF1ZzIwMjAvIj5UaGUgRXZlbmluZyBGaXg8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGluZyI+U2VjdGlvbnMgJiBUb3BpY3M8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VjdGlvbi1saW5rcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9pbnRlcm5hdGlvbmFsLyI+SW50ZXJuYXRpb25hbDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFtaWx5LyI+RmFtaWx5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9wb2xpdGljcy8iPlBvbGl0aWNzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9wcm9wZXJ0eS1tYWdhemluZS9uZXdzLyI+UHJvcGVydHk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2N1bHR1cmUvIj5DdWx0dXJlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9ob21lLW1hZ2F6aW5lL25ld3MvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9idXNpbmVzcy8iPkJ1c2luZXNzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InBhcnRuZXItcHVicy1ob2xkZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkaW5nIj4KICAgICAgICAgICAgICAgIFBhcnRuZXIgUHVibGljYXRpb25zCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYXJ0bmVyLXB1YnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwYXJ0bmVyIiBocmVmPSJodHRwczovL3d3dy50aGU0Mi5pZS8iIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJUaGU0MiIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlNDIKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBsYXRlc3QgSXJpc2ggYW5kIGludGVybmF0aW9uYWwgc3BvcnRzIG5ld3MgZm9yIHJlYWRlcnMgYW5kIG1lbWJlcnMKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icGFydG5lciIgaHJlZj0iaHR0cHM6Ly93d3cubm90ZXdvcnRoeS5pZS8iIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJOb3Rld29ydGh5IiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICBOb3Rld29ydGh5CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICBBIHBsYXRmb3JtIGhlbHBpbmcgZnVuZCB0aGUgdHlwZSBvZiBpbi1kZXB0aCBqb3VybmFsaXNtIHRoYXQgdGhlIHB1YmxpYyB3YW50cyB0byBzZWUKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxhIGNsYXNzPSJidG4tc3VwcG9ydCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb250cmlidXRlLyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0Ij5TdXBwb3J0IFRoZSBKb3VybmFsPC9zcGFuPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJhcnJvdyIgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL2NvbnRyaWJ1dGlvbi1wcm9tcHQvbGluay1hcnJvdy5zdmciPgogICAgICAgIDwvYT4KICAgIDwvZGl2Pgo8L2Rpdj4KCgogICAgICAgIDxkaXYgY2xhc3M9Im1haW5Db250YWluZXIgY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbkNvbnRlbnQgY29udGFpbmVyIj4KPGRpdiBjbGFzcz0icml2ZXIgc3Bhbi04Ij4KPGRpdiBjbGFzcz0id2lraVRhZ0hlYWRlciI+Cgo8aDE+JiMzNTtmYWN0Y2hlY2s8L2gxPgoKCjwvZGl2PgoKCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFN1bmRheSAyNSBBcHJpbCwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvbHVrZS1vbmVpbGwtdmFjY2luZS01NDE3MTIwLUFwcjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzU0MTcxMjAvcml2ZXI/dmVyc2lvbj01NDE3NTMwJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgUHJvZmVzc29yIEx1a2UgTydOZWlsbCBkaWRuJ3QgcmVmdXNlIGEgQ292aWQgdmFjY2luZSBiZWNhdXNlIGhlICdkaWRuJ3Qgd2FudCcgb25lIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81NDE3MTIwL3JpdmVyP3ZlcnNpb249NTQxNzUzMCZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCBQcm9mZXNzb3IgTHVrZSBPJ05laWxsIGRpZG4ndCByZWZ1c2UgYSBDb3ZpZCB2YWNjaW5lIGJlY2F1c2UgaGUgJ2RpZG4ndCB3YW50JyBvbmUiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb3ZpZDE5LWZhY3RzL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBDb3ZpZDE5IEZhY3RzICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY292aWQxOS1mYWN0cy9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBDb3ZpZDE5IEZhY3RzICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9sdWtlLW9uZWlsbC12YWNjaW5lLTU0MTcxMjAtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBObywgUHJvZmVzc29yIEx1a2UgTydOZWlsbCBkaWRuJ3QgcmVmdXNlIGEgQ292aWQgdmFjY2luZSBiZWNhdXNlIGhlICdkaWRuJ3Qgd2FudCcgb25lICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VuIDc6MDAgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj45MiwwOTU8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2x1a2Utb25laWxsLXZhY2NpbmUtNTQxNzEyMC1BcHIyMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IE5vLCBQcm9mZXNzb3IgTHVrZSBPJ05laWxsIGRpZG4ndCByZWZ1c2UgYSBDb3ZpZCB2YWNjaW5lIGJlY2F1c2UgaGUgJ2RpZG4ndCB3YW50JyBvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgTyYjODIxNztOZWlsbCBoYXMgc2FpZCBoZSB3aWxsIHRha2UgYW55IHZhY2NpbmUgb2ZmZXJlZCB0byBoaW0gJiM4MjExOyB3aGVuIGhlIGlzIGVsaWdpYmxlIGZvciBvbmUuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBUaHVyc2RheSAxNSBBcHJpbCwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdGhlLWV4cGxhaW5lci1wb2RjYXN0LW1pc2luZm9ybWF0aW9uLTU0MTEwMzUtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTQxMTAzNS9yaXZlcj92ZXJzaW9uPTU0MTEyMTYmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iVGhlIEV4cGxhaW5lcjogRnJvbSBpbmZsdWVuY2VycyB0byBRQW5vbiAtIGhvdyBtaXNpbmZvcm1hdGlvbiBjaGFuZ2VkIGluIElyZWxhbmQgb3ZlciB0aGUgcGFzdCB5ZWFyIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81NDExMDM1L3JpdmVyP3ZlcnNpb249NTQxMTIxNiZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iVGhlIEV4cGxhaW5lcjogRnJvbSBpbmZsdWVuY2VycyB0byBRQW5vbiAtIGhvdyBtaXNpbmZvcm1hdGlvbiBjaGFuZ2VkIGluIElyZWxhbmQgb3ZlciB0aGUgcGFzdCB5ZWFyIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcG9kY2FzdC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgUG9kY2FzdCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3BvZGNhc3QvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgUG9kY2FzdCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdGhlLWV4cGxhaW5lci1wb2RjYXN0LW1pc2luZm9ybWF0aW9uLTU0MTEwMzUtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIFRoZSBFeHBsYWluZXI6IEZyb20gaW5mbHVlbmNlcnMgdG8gUUFub24gLSBob3cgbWlzaW5mb3JtYXRpb24gY2hhbmdlZCBpbiBJcmVsYW5kIG92ZXIgdGhlIHBhc3QgeWVhciAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwciAxNXRoIDIwMjEsIDY6MzAgUE0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj42LDc4OTxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdGhlLWV4cGxhaW5lci1wb2RjYXN0LW1pc2luZm9ybWF0aW9uLTU0MTEwMzUtQXByMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIFRoZSBFeHBsYWluZXI6IEZyb20gaW5mbHVlbmNlcnMgdG8gUUFub24gLSBob3cgbWlzaW5mb3JtYXRpb24gY2hhbmdlZCBpbiBJcmVsYW5kIG92ZXIgdGhlIHBhc3QgeWVhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBGcm9tIFdoYXRzQXBwIG1lc3NhZ2VzIHRvIGNvbnNwaXJhY3kgdGhlb3JpZXMsIHdlIGV4cGxvcmUgaG93IG1pc2luZm9ybWF0aW9uIGhhcyBldm9sdmVkIG92ZXIgdGhlIGxhc3QgMTIgbW9udGhzLiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFR1ZXNkYXkgMTMgQXByaWwsIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3RyYXZlbGxlcnMtd2VyZS1ub3Qtb2NjdXB5aW5nLXRoZS1jYXItcGFyay1vZi1hLXBmaXplci1mYWN0b3J5LXRvLWdldC12YWNjaW5lcy01NDA4NDI1LUFwcjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzU0MDg0MjUvcml2ZXI/dmVyc2lvbj01NDA3MTA4JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgVHJhdmVsbGVycyB3ZXJlIG5vdCBwcm90ZXN0aW5nIG91dHNpZGUgYSBEdWJsaW4gUGZpemVyIHBsYW50IGZvciBhY2Nlc3MgdG8gdGhlIENvdmlkLTE5IHZhY2NpbmUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzU0MDg0MjUvcml2ZXI/dmVyc2lvbj01NDA3MTA4JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWJ1bmtlZDogTm8sIFRyYXZlbGxlcnMgd2VyZSBub3QgcHJvdGVzdGluZyBvdXRzaWRlIGEgRHVibGluIFBmaXplciBwbGFudCBmb3IgYWNjZXNzIHRvIHRoZSBDb3ZpZC0xOSB2YWNjaW5lIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS90cmF2ZWxsZXJzLXdlcmUtbm90LW9jY3VweWluZy10aGUtY2FyLXBhcmstb2YtYS1wZml6ZXItZmFjdG9yeS10by1nZXQtdmFjY2luZXMtNTQwODQyNS1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRGVidW5rZWQ6IE5vLCBUcmF2ZWxsZXJzIHdlcmUgbm90IHByb3Rlc3Rpbmcgb3V0c2lkZSBhIER1YmxpbiBQZml6ZXIgcGxhbnQgZm9yIGFjY2VzcyB0byB0aGUgQ292aWQtMTkgdmFjY2luZSAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwciAxM3RoIDIwMjEsIDc6NTggUE0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj40MCw1MTE8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3RyYXZlbGxlcnMtd2VyZS1ub3Qtb2NjdXB5aW5nLXRoZS1jYXItcGFyay1vZi1hLXBmaXplci1mYWN0b3J5LXRvLWdldC12YWNjaW5lcy01NDA4NDI1LUFwcjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBEZWJ1bmtlZDogTm8sIFRyYXZlbGxlcnMgd2VyZSBub3QgcHJvdGVzdGluZyBvdXRzaWRlIGEgRHVibGluIFBmaXplciBwbGFudCBmb3IgYWNjZXNzIHRvIHRoZSBDb3ZpZC0xOSB2YWNjaW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIFRoZSBjbGFpbSB3YXMgY2lyY3VsYXRlZCBvbiBXaGF0c0FwcCwgVHdpdHRlciBhbmQgRmFjZWJvb2sgdGhpcyB3ZWVrLiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFRodXJzZGF5IDI1IE1hcmNoLCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9sZW8tdmFyYWRrYXItaW5kZWZpbml0ZS1yZXN0cmljdGlvbnMtemVyby1jb3ZpZC01Mzg4OTY1LU1hcjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzODg5NjUvcml2ZXI/dmVyc2lvbj01Mzg4OTc3JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIHRoZSBUw6FuYWlzdGUgZGlkIG5vdCBzYXkgbG9ja2Rvd24gd291bGQgY29udGludWUgJ2luZGVmaW5pdGVseSciCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzODg5NjUvcml2ZXI/dmVyc2lvbj01Mzg4OTc3JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IE5vLCB0aGUgVMOhbmFpc3RlIGRpZCBub3Qgc2F5IGxvY2tkb3duIHdvdWxkIGNvbnRpbnVlICdpbmRlZmluaXRlbHknIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvemVyby1jb3ZpZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgWmVybyBDb3ZpZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3plcm8tY292aWQvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgWmVybyBDb3ZpZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvbGVvLXZhcmFka2FyLWluZGVmaW5pdGUtcmVzdHJpY3Rpb25zLXplcm8tY292aWQtNTM4ODk2NS1NYXIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdENoZWNrOiBObywgdGhlIFTDoW5haXN0ZSBkaWQgbm90IHNheSBsb2NrZG93biB3b3VsZCBjb250aW51ZSAnaW5kZWZpbml0ZWx5JyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hciAyNXRoIDIwMjEsIDY6MDAgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4yNCw3NzM8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2xlby12YXJhZGthci1pbmRlZmluaXRlLXJlc3RyaWN0aW9ucy16ZXJvLWNvdmlkLTUzODg5NjUtTWFyMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RDaGVjazogTm8sIHRoZSBUw6FuYWlzdGUgZGlkIG5vdCBzYXkgbG9ja2Rvd24gd291bGQgY29udGludWUgJ2luZGVmaW5pdGVseSciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgTGVvIFZhcmFka2FyIHdhcyB0YWxraW5nIGFib3V0IHRoZSBaZXJvIENvdmlkIHN0cmF0ZWd5IGFuZCBtYW5kYXRvcnkgaG90ZWwgcXVhcmFudGluZS4gICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBXZWRuZXNkYXkgMjQgTWFyY2gsIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1pdmVybWVjdGluLWNvdmlkLTE5LTUzODU3ODItTWFyMjAyMS8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM4NTc4Mi9yaXZlcj92ZXJzaW9uPTUzODU3ODUmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdENoZWNrOiBJcyB0aGUgbWVkaWNhdGlvbiBpdmVybWVjdGluIGFuIGFsdGVybmF0aXZlIHRvIENvdmlkLTE5IHZhY2NpbmVzPyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM4NTc4Mi9yaXZlcj92ZXJzaW9uPTUzODU3ODUmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogSXMgdGhlIG1lZGljYXRpb24gaXZlcm1lY3RpbiBhbiBhbHRlcm5hdGl2ZSB0byBDb3ZpZC0xOSB2YWNjaW5lcz8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1pdmVybWVjdGluLWNvdmlkLTE5LTUzODU3ODItTWFyMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIEZhY3RDaGVjazogSXMgdGhlIG1lZGljYXRpb24gaXZlcm1lY3RpbiBhbiBhbHRlcm5hdGl2ZSB0byBDb3ZpZC0xOSB2YWNjaW5lcz8gICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFyIDI0dGggMjAyMSwgMTI6MDUgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4zOCw1MzE8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1pdmVybWVjdGluLWNvdmlkLTE5LTUzODU3ODItTWFyMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RDaGVjazogSXMgdGhlIG1lZGljYXRpb24gaXZlcm1lY3RpbiBhbiBhbHRlcm5hdGl2ZSB0byBDb3ZpZC0xOSB2YWNjaW5lcz8gIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIEEgbG90IG9mIHN0dWRpZXMgYXJlIGJlaW5nIGNhcnJpZWQgb3V0IGludG8gd2hldGhlciB0aGUgYW50aS1wYXJhc2l0aWMgZHJ1ZyBjb3VsZCBiZSB1c2VkIHRvIHRyZWF0IENvdmlkLTE5LiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIEZyaWRheSAxMiBNYXJjaCwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtaXJlbGFuZC1leGNlc3MtZGVhdGhzLWNvdmlkLTE5LTUzNzYyNjItTWFyMjAyMS8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM3NjI2Mi9yaXZlcj92ZXJzaW9uPTUzNzg2OTAmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdGZpbmQ6IEhhcyBJcmVsYW5kIGV4cGVyaWVuY2VkICdleGNlc3MgbW9ydGFsaXR5JyBzaW5jZSB0aGUgc3RhcnQgb2YgdGhlIENvdmlkLTE5IHBhbmRlbWljPyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM3NjI2Mi9yaXZlcj92ZXJzaW9uPTUzNzg2OTAmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RmaW5kOiBIYXMgSXJlbGFuZCBleHBlcmllbmNlZCAnZXhjZXNzIG1vcnRhbGl0eScgc2luY2UgdGhlIHN0YXJ0IG9mIHRoZSBDb3ZpZC0xOSBwYW5kZW1pYz8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGZpbmQgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0ZmluZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtaXJlbGFuZC1leGNlc3MtZGVhdGhzLWNvdmlkLTE5LTUzNzYyNjItTWFyMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIEZhY3RmaW5kOiBIYXMgSXJlbGFuZCBleHBlcmllbmNlZCAnZXhjZXNzIG1vcnRhbGl0eScgc2luY2UgdGhlIHN0YXJ0IG9mIHRoZSBDb3ZpZC0xOSBwYW5kZW1pYz8gICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXIgMTJ0aCAyMDIxLCA2OjAwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NjMsNDUzPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC1pcmVsYW5kLWV4Y2Vzcy1kZWF0aHMtY292aWQtMTktNTM3NjI2Mi1NYXIyMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRmFjdGZpbmQ6IEhhcyBJcmVsYW5kIGV4cGVyaWVuY2VkICdleGNlc3MgbW9ydGFsaXR5JyBzaW5jZSB0aGUgc3RhcnQgb2YgdGhlIENvdmlkLTE5IHBhbmRlbWljPyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBTZXZlcmFsIHBvc3RzIG9uIHNvY2lhbCBtZWRpYSBoYXZlIHRyaWVkIHRvIHBsYXkgZG93biB0aGUgbmVlZCBmb3IgbG9ja2Rvd25zIGJ5IHBvaW50aW5nIHRvIGV4Y2VzcyBkZWF0aHMuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBUaHVyc2RheSAxMSBNYXJjaCwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvbW9zbmV5LWRpcmVjdC1wcm92aXNpb24tdmFjY2luZS01Mzc2MDQzLU1hcjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNzYwNDMvcml2ZXI/dmVyc2lvbj01Mzc2MDc3JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgYWxsIERpcmVjdCBQcm92aXNpb24gcmVzaWRlbnRzIGF0IE1vc25leSBhcmUgbm90IHJlY2VpdmluZyB2YWNjaW5lIGFoZWFkIG9mIHByaW9yaXR5IHNjaGVkdWxlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81Mzc2MDQzL3JpdmVyP3ZlcnNpb249NTM3NjA3NyZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCBhbGwgRGlyZWN0IFByb3Zpc2lvbiByZXNpZGVudHMgYXQgTW9zbmV5IGFyZSBub3QgcmVjZWl2aW5nIHZhY2NpbmUgYWhlYWQgb2YgcHJpb3JpdHkgc2NoZWR1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL21vc25leS1kaXJlY3QtcHJvdmlzaW9uLXZhY2NpbmUtNTM3NjA0My1NYXIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRGVidW5rZWQ6IE5vLCBhbGwgRGlyZWN0IFByb3Zpc2lvbiByZXNpZGVudHMgYXQgTW9zbmV5IGFyZSBub3QgcmVjZWl2aW5nIHZhY2NpbmUgYWhlYWQgb2YgcHJpb3JpdHkgc2NoZWR1bGUgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXIgMTF0aCAyMDIxLCA2OjMwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MTIsMjU4PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9tb3NuZXktZGlyZWN0LXByb3Zpc2lvbi12YWNjaW5lLTUzNzYwNDMtTWFyMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIERlYnVua2VkOiBObywgYWxsIERpcmVjdCBQcm92aXNpb24gcmVzaWRlbnRzIGF0IE1vc25leSBhcmUgbm90IHJlY2VpdmluZyB2YWNjaW5lIGFoZWFkIG9mIHByaW9yaXR5IHNjaGVkdWxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIFRoZSBIU0UgaXMgc3RpbGwgd29ya2luZyB0aHJvdWdoIHRoZSBmaXJzdCBmb3VyIGNvaG9ydHMgaW4gdGhlIHNlcXVlbmNpbmcgbGlzdC4gICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgoKPGRpdiBjbGFzcz0icG9zdCByaXZlcmJsb2NrQWQiPgo8Y2VudGVyPgogICAgPGRpdiBpZD0nZGl2LWdwdC1hZC0xMzY1MDkyNDA2MjEzLTInPgo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+Cmdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpIHsgZ29vZ2xldGFnLmRpc3BsYXkoJ2Rpdi1ncHQtYWQtMTM2NTA5MjQwNjIxMy0yJyk7IH0pOwo8L3NjcmlwdD4KPC9kaXY+PC9jZW50ZXI+CjwvZGl2PgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBUdWVzZGF5IDIgTWFyY2gsIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhbHNlLWNsYWltcy1yZW51YS1pcmlzaC1mcmVlZG9tLXBhcnR5LWRpcmVjdC1kZW1vY3JhY3ktaXJlbGFuZC1sZWFmbGV0LWR1Ymxpbi01MzU4NDcxLU1hcjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNTg0NzEvcml2ZXI/dmVyc2lvbj01MzYxNzY1JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTWlzbGVhZGluZyBDb3ZpZC0xOSBjbGFpbXMgaW4gYSBsZWFmbGV0IG1hZGUgYnkgdGhyZWUgcG9saXRpY2FsIHBhcnRpZXMiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNTg0NzEvcml2ZXI/dmVyc2lvbj01MzYxNzY1JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IE1pc2xlYWRpbmcgQ292aWQtMTkgY2xhaW1zIGluIGEgbGVhZmxldCBtYWRlIGJ5IHRocmVlIHBvbGl0aWNhbCBwYXJ0aWVzIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY29yb25hdmlydXMvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIENvcm9uYXZpcnVzICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY29yb25hdmlydXMvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgQ29yb25hdmlydXMgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhbHNlLWNsYWltcy1yZW51YS1pcmlzaC1mcmVlZG9tLXBhcnR5LWRpcmVjdC1kZW1vY3JhY3ktaXJlbGFuZC1sZWFmbGV0LWR1Ymxpbi01MzU4NDcxLU1hcjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0Q2hlY2s6IE1pc2xlYWRpbmcgQ292aWQtMTkgY2xhaW1zIGluIGEgbGVhZmxldCBtYWRlIGJ5IHRocmVlIHBvbGl0aWNhbCBwYXJ0aWVzICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFyIDJuZCAyMDIxLCAxMjowNSBBTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjc1LDgxMzxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFsc2UtY2xhaW1zLXJlbnVhLWlyaXNoLWZyZWVkb20tcGFydHktZGlyZWN0LWRlbW9jcmFjeS1pcmVsYW5kLWxlYWZsZXQtZHVibGluLTUzNTg0NzEtTWFyMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RDaGVjazogTWlzbGVhZGluZyBDb3ZpZC0xOSBjbGFpbXMgaW4gYSBsZWFmbGV0IG1hZGUgYnkgdGhyZWUgcG9saXRpY2FsIHBhcnRpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnRQb3B1bGFyIj48L3NwYW4+IDE3PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBUaGUgbGVhZmxldCB3YXMgcHJvZHVjZWQgYnkgUmVudWEsIHRoZSBJcmlzaCBGcmVlZG9tIFBhcnR5IGFuZCBEaXJlY3QgRGVtb2NyYWN5IElyZWxhbmQuICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gRnJpZGF5IDI2IEZlYnJ1YXJ5LCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC13aG8tYWR2aWNlLXJhcGlkLXRlc3Rpbmctc2Nob29scy1jb3ZpZC0xOS01MzY1Mjg3LUZlYjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNjUyODcvcml2ZXI/dmVyc2lvbj01MzY2Nzg4JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RmaW5kOiBEb2VzIHRoZSBXSE8gJ25vdCByZWNvbW1lbmQnIHVzaW5nIHJhcGlkIENvdmlkIHRlc3RzIGluIHNjaG9vbHMsIGFzIE5vcm1hIEZvbGV5IGNsYWltZWQ/IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzY1Mjg3L3JpdmVyP3ZlcnNpb249NTM2Njc4OCZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdGZpbmQ6IERvZXMgdGhlIFdITyAnbm90IHJlY29tbWVuZCcgdXNpbmcgcmFwaWQgQ292aWQgdGVzdHMgaW4gc2Nob29scywgYXMgTm9ybWEgRm9sZXkgY2xhaW1lZD8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGZpbmQgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0ZmluZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtd2hvLWFkdmljZS1yYXBpZC10ZXN0aW5nLXNjaG9vbHMtY292aWQtMTktNTM2NTI4Ny1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdGZpbmQ6IERvZXMgdGhlIFdITyAnbm90IHJlY29tbWVuZCcgdXNpbmcgcmFwaWQgQ292aWQgdGVzdHMgaW4gc2Nob29scywgYXMgTm9ybWEgRm9sZXkgY2xhaW1lZD8gICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWIgMjZ0aCAyMDIxLCA4OjMxIFBNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MjUsOTU4PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC13aG8tYWR2aWNlLXJhcGlkLXRlc3Rpbmctc2Nob29scy1jb3ZpZC0xOS01MzY1Mjg3LUZlYjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBGYWN0ZmluZDogRG9lcyB0aGUgV0hPICdub3QgcmVjb21tZW5kJyB1c2luZyByYXBpZCBDb3ZpZCB0ZXN0cyBpbiBzY2hvb2xzLCBhcyBOb3JtYSBGb2xleSBjbGFpbWVkPyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBVbmlvbnMgaGF2ZSBjYWxsZWQgZm9yIHJlZ3VsYXIgcmFwaWQgdGVzdGluZyBhcyBwYXJ0IG9mIHRoZSByZS1vcGVuaW5nIG9mIHNjaG9vbHMgbmV4dCBtb250aC4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1wcm90ZXN0LXBlb3BsZS1iZWZvcmUtcHJvZml0LWxlLWNoZWlsZS01MzY0MjYyLUZlYjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNjQyNjIvcml2ZXI/dmVyc2lvbj01MzY1NTAxJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgUGVvcGxlIEJlZm9yZSBQcm9maXQgaGFzIG5vdCBvcmdhbmlzZWQgYSAncHJvLWxvY2tkb3duJyByYWxseSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM2NDI2Mi9yaXZlcj92ZXJzaW9uPTUzNjU1MDEmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgUGVvcGxlIEJlZm9yZSBQcm9maXQgaGFzIG5vdCBvcmdhbmlzZWQgYSAncHJvLWxvY2tkb3duJyByYWxseSIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLXByb3Rlc3QtcGVvcGxlLWJlZm9yZS1wcm9maXQtbGUtY2hlaWxlLTUzNjQyNjItRmViMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBObywgUGVvcGxlIEJlZm9yZSBQcm9maXQgaGFzIG5vdCBvcmdhbmlzZWQgYSAncHJvLWxvY2tkb3duJyByYWxseSAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZlYiAyNnRoIDIwMjEsIDY6MDAgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4xMyw2MDI8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1wcm90ZXN0LXBlb3BsZS1iZWZvcmUtcHJvZml0LWxlLWNoZWlsZS01MzY0MjYyLUZlYjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBEZWJ1bmtlZDogTm8sIFBlb3BsZSBCZWZvcmUgUHJvZml0IGhhcyBub3Qgb3JnYW5pc2VkIGEgJ3Byby1sb2NrZG93bicgcmFsbHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgQSBmYWxzZSBmbHllciBhZHZlcnRpc2luZyBhIHByby1sb2NrZG93biByYWxseSBoYXMgYmVlbiBpbmNvcnJlY3RseSBhdHRyaWJ1dGVkIHRvIFBlb3BsZSBCZWZvcmUgUHJvZml0IGFuZCBMZSBDaMOpaWxlLiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gV2VkbmVzZGF5IDI0IEZlYnJ1YXJ5LCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb3ZpZC0xOS12YWNjaW5lcy1yZXN0cmljdGlvbnMtZWZmaWNhY3ktZmFjdGNoZWNrLTUzNTk1MTEtRmViMjAyMS8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM1OTUxMS9yaXZlcj92ZXJzaW9uPTUzNTk5NDcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdEZpbmQ6IFdoYXQgYXJlIENvdmlkLTE5IHZhY2NpbmVzIGVmZmVjdGl2ZSBhdCBwcmV2ZW50aW5nPyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM1OTUxMS9yaXZlcj92ZXJzaW9uPTUzNTk5NDcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RGaW5kOiBXaGF0IGFyZSBDb3ZpZC0xOSB2YWNjaW5lcyBlZmZlY3RpdmUgYXQgcHJldmVudGluZz8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2NvdmlkLTE5LXZhY2NpbmVzLXJlc3RyaWN0aW9ucy1lZmZpY2FjeS1mYWN0Y2hlY2stNTM1OTUxMS1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdEZpbmQ6IFdoYXQgYXJlIENvdmlkLTE5IHZhY2NpbmVzIGVmZmVjdGl2ZSBhdCBwcmV2ZW50aW5nPyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZlYiAyNHRoIDIwMjEsIDg6MDAgUE0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4xOSw1MTc8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2NvdmlkLTE5LXZhY2NpbmVzLXJlc3RyaWN0aW9ucy1lZmZpY2FjeS1mYWN0Y2hlY2stNTM1OTUxMS1GZWIyMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRmFjdEZpbmQ6IFdoYXQgYXJlIENvdmlkLTE5IHZhY2NpbmVzIGVmZmVjdGl2ZSBhdCBwcmV2ZW50aW5nPyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBBIHNvY2lhbCBtZWRpYSBwb3N0IGhhcyBkcmF3biBpbmNvcnJlY3QgY29uY2x1c2lvbnMgdG8gc3VnZ2VzdCB0aGF0IENvdmlkLTE5IHZhY2NpbmVzIGFyZSBpbmVmZmVjdGl2ZS4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3Byb3Rlc3Qtcm9tYW5pYS1taXNpbmZvcm1hdGlvbi1mYWN0Y2hlY2stNTM2MzcwMi1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzYzNzAyL3JpdmVyP3ZlcnNpb249NTM2Mzc3NyZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IE5vLCB0aGlzIHBob3RvIG9mIGEgbWFzc2l2ZSBjcm93ZCBpbiBCdWNoYXJlc3QgZG9lcyBub3Qgc2hvdyBhIHByb3Rlc3QgYWdhaW5zdCBDb3ZpZC0xOSByZXN0cmljdGlvbnMiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNjM3MDIvcml2ZXI/dmVyc2lvbj01MzYzNzc3JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IE5vLCB0aGlzIHBob3RvIG9mIGEgbWFzc2l2ZSBjcm93ZCBpbiBCdWNoYXJlc3QgZG9lcyBub3Qgc2hvdyBhIHByb3Rlc3QgYWdhaW5zdCBDb3ZpZC0xOSByZXN0cmljdGlvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3Byb3Rlc3Qtcm9tYW5pYS1taXNpbmZvcm1hdGlvbi1mYWN0Y2hlY2stNTM2MzcwMi1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdENoZWNrOiBObywgdGhpcyBwaG90byBvZiBhIG1hc3NpdmUgY3Jvd2QgaW4gQnVjaGFyZXN0IGRvZXMgbm90IHNob3cgYSBwcm90ZXN0IGFnYWluc3QgQ292aWQtMTkgcmVzdHJpY3Rpb25zICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmViIDI0dGggMjAyMSwgNDo0OCBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjMwLDI3MzxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcHJvdGVzdC1yb21hbmlhLW1pc2luZm9ybWF0aW9uLWZhY3RjaGVjay01MzYzNzAyLUZlYjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBGYWN0Q2hlY2s6IE5vLCB0aGlzIHBob3RvIG9mIGEgbWFzc2l2ZSBjcm93ZCBpbiBCdWNoYXJlc3QgZG9lcyBub3Qgc2hvdyBhIHByb3Rlc3QgYWdhaW5zdCBDb3ZpZC0xOSByZXN0cmljdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgU29jaWFsIG1lZGlhIHBvc3RzIGhhdmUgZmFsc2VseSBkZXNjcmliZWQgYSBwaG90byBmcm9tIFJvbWFuaWEgaW4gMjAxNyBhcyBhIHJlY2VudCBhbnRpLXJlc3RyaWN0aW9ucyBwcm90ZXN0LiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gRnJpZGF5IDE5IEZlYnJ1YXJ5LCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kb25lZ2FsLW1vdW50LWVycmlnYWwtY2xvdWRzLWRlYnVuay01MzYwMDEwLUZlYjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNjAwMTAvcml2ZXI/dmVyc2lvbj01MzYwMTUxJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgdGhpcyBpbXByZXNzaXZlIHBob3RvIG9mIGEgbW91bnRhaW4gaXNuJ3QgZnJvbSBEb25lZ2FsIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzYwMDEwL3JpdmVyP3ZlcnNpb249NTM2MDE1MSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCB0aGlzIGltcHJlc3NpdmUgcGhvdG8gb2YgYSBtb3VudGFpbiBpc24ndCBmcm9tIERvbmVnYWwiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9tb3VudC1lcnJvci9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgTW91bnQgRXJyb3IgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9tb3VudC1lcnJvci9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBNb3VudCBFcnJvciAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZG9uZWdhbC1tb3VudC1lcnJpZ2FsLWNsb3Vkcy1kZWJ1bmstNTM2MDAxMC1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRGVidW5rZWQ6IE5vLCB0aGlzIGltcHJlc3NpdmUgcGhvdG8gb2YgYSBtb3VudGFpbiBpc24ndCBmcm9tIERvbmVnYWwgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWIgMTl0aCAyMDIxLCA1OjUzIFBNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NSw3NDg8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RvbmVnYWwtbW91bnQtZXJyaWdhbC1jbG91ZHMtZGVidW5rLTUzNjAwMTAtRmViMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIERlYnVua2VkOiBObywgdGhpcyBpbXByZXNzaXZlIHBob3RvIG9mIGEgbW91bnRhaW4gaXNuJ3QgZnJvbSBEb25lZ2FsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIEEgcGhvdG8gb2YgbW91bnRhaW4gd2l0aCB1bnVzdWFsIGNsb3VkcyBhYm92ZSBpdCBoYXMgYmVlbiBtaXN0YWtlbmx5IGxhYmVsbGVkIGFzIE1vdW50IEVycmlnYWwgaW4gRG9uZWdhbC4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1mYWxzZS1jbGFpbXMtcm9hZC1zaWducy1jb3ZpZC0xOS10ZXN0aW5nLXZhY2NpbmUtNTM1ODA4My1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzU4MDgzL3JpdmVyP3ZlcnNpb249NTM1ODczNiZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IENvdmlkLTE5IGNsYWltcyBzaGFyZWQgb24gYSBMRUQgZGlzcGxheSBkcml2ZW4gYXJvdW5kIGEgbnVtYmVyIG9mIGxvY2F0aW9ucyBpbiBJcmVsYW5kIGFyZSBmYWxzZSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM1ODA4My9yaXZlcj92ZXJzaW9uPTUzNTg3MzYmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogQ292aWQtMTkgY2xhaW1zIHNoYXJlZCBvbiBhIExFRCBkaXNwbGF5IGRyaXZlbiBhcm91bmQgYSBudW1iZXIgb2YgbG9jYXRpb25zIGluIElyZWxhbmQgYXJlIGZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgRGVidW5rZWQgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1mYWxzZS1jbGFpbXMtcm9hZC1zaWducy1jb3ZpZC0xOS10ZXN0aW5nLXZhY2NpbmUtNTM1ODA4My1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdENoZWNrOiBDb3ZpZC0xOSBjbGFpbXMgc2hhcmVkIG9uIGEgTEVEIGRpc3BsYXkgZHJpdmVuIGFyb3VuZCBhIG51bWJlciBvZiBsb2NhdGlvbnMgaW4gSXJlbGFuZCBhcmUgZmFsc2UgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWIgMTl0aCAyMDIxLCAxMjowNSBBTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjUwLDg3ODxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWZhbHNlLWNsYWltcy1yb2FkLXNpZ25zLWNvdmlkLTE5LXRlc3RpbmctdmFjY2luZS01MzU4MDgzLUZlYjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBGYWN0Q2hlY2s6IENvdmlkLTE5IGNsYWltcyBzaGFyZWQgb24gYSBMRUQgZGlzcGxheSBkcml2ZW4gYXJvdW5kIGEgbnVtYmVyIG9mIGxvY2F0aW9ucyBpbiBJcmVsYW5kIGFyZSBmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBNZXNzYWdlcyBmbGFzaGVkIG9uIGFuIExFRCBkaXNwbGF5IGJlc2lkZSByb2FkcyBhcmUgc3ByZWFkaW5nIG1pc2luZm9ybWF0aW9uIGFib3V0IENvdmlkLTE5LiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gU3VuZGF5IDE0IEZlYnJ1YXJ5LCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1ydGUtbW9uZXktZnJlZWRvbS1vZi1pbmZvcm1hdGlvbi1iaWxsLWdhdGVzLW9wZW4tc29jaWV0eS01MzQ5NDM3LUZlYjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNDk0Mzcvcml2ZXI/dmVyc2lvbj01MzUwODQ4JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgYW4gRk9JIHJlcXVlc3QgZGlkIG5vdCBzaG93IHRoYXQgUlTDiSAndG9vayBvcmRlcnMnIGZyb20gdGhlIEJpbGwgYW5kIE1lbGluZGEgR2F0ZXMgRm91bmRhdGlvbiIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM0OTQzNy9yaXZlcj92ZXJzaW9uPTUzNTA4NDgmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgYW4gRk9JIHJlcXVlc3QgZGlkIG5vdCBzaG93IHRoYXQgUlTDiSAndG9vayBvcmRlcnMnIGZyb20gdGhlIEJpbGwgYW5kIE1lbGluZGEgR2F0ZXMgRm91bmRhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1ydGUtbW9uZXktZnJlZWRvbS1vZi1pbmZvcm1hdGlvbi1iaWxsLWdhdGVzLW9wZW4tc29jaWV0eS01MzQ5NDM3LUZlYjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBEZWJ1bmtlZDogTm8sIGFuIEZPSSByZXF1ZXN0IGRpZCBub3Qgc2hvdyB0aGF0IFJUw4kgJ3Rvb2sgb3JkZXJzJyBmcm9tIHRoZSBCaWxsIGFuZCBNZWxpbmRhIEdhdGVzIEZvdW5kYXRpb24gICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWIgMTR0aCAyMDIxLCA3OjMwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MzUsMDkzPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1ydGUtbW9uZXktZnJlZWRvbS1vZi1pbmZvcm1hdGlvbi1iaWxsLWdhdGVzLW9wZW4tc29jaWV0eS01MzQ5NDM3LUZlYjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBEZWJ1bmtlZDogTm8sIGFuIEZPSSByZXF1ZXN0IGRpZCBub3Qgc2hvdyB0aGF0IFJUw4kgJ3Rvb2sgb3JkZXJzJyBmcm9tIHRoZSBCaWxsIGFuZCBNZWxpbmRhIEdhdGVzIEZvdW5kYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgQSBwb3N0IG9uIEZhY2Vib29rIHN1Z2dlc3RzIHRoYXQgdGhlIGJyb2FkY2FzdGVyIHJlY2VpdmVkIG1vbmV5IGZyb20gYSBudW1iZXIgb2YgaW50ZXJuYXRpb25hbCBncm91cHMuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBUdWVzZGF5IDkgRmVicnVhcnksIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkLWNvdmlkLTE5LWlzb2xhdGVkLXBob3RvZ3JhcGhlZC01MzQyNjEwLUZlYjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzNDI2MTAvcml2ZXI/dmVyc2lvbj01MzQyODEyJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBZZXMsIHRoZSB2aXJ1cyB0aGF0IGNhdXNlcyBDb3ZpZC0xOSBoYXMgYmVlbiBpc29sYXRlZCBhbmQgcGhvdG9ncmFwaGVkIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzQyNjEwL3JpdmVyP3ZlcnNpb249NTM0MjgxMiZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IFllcywgdGhlIHZpcnVzIHRoYXQgY2F1c2VzIENvdmlkLTE5IGhhcyBiZWVuIGlzb2xhdGVkIGFuZCBwaG90b2dyYXBoZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRGVidW5rZWQgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQtY292aWQtMTktaXNvbGF0ZWQtcGhvdG9ncmFwaGVkLTUzNDI2MTAtRmViMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBZZXMsIHRoZSB2aXJ1cyB0aGF0IGNhdXNlcyBDb3ZpZC0xOSBoYXMgYmVlbiBpc29sYXRlZCBhbmQgcGhvdG9ncmFwaGVkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmViIDl0aCAyMDIxLCA2OjMwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MzEsODgwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1jb3ZpZC0xOS1pc29sYXRlZC1waG90b2dyYXBoZWQtNTM0MjYxMC1GZWIyMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IFllcywgdGhlIHZpcnVzIHRoYXQgY2F1c2VzIENvdmlkLTE5IGhhcyBiZWVuIGlzb2xhdGVkIGFuZCBwaG90b2dyYXBoZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgQSBwb3N0IG9uIEluc3RhZ3JhbSBjbGFpbXMgdGhhdCBTQVJTLUNvVi0yIGhhcyBuZXZlciBiZWVuIGlzb2xhdGVkLiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gRnJpZGF5IDUgRmVicnVhcnksIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkLW1lZGlhLWJsYWNrb3V0LXNpbW9uLWNvdmVuZXktdHJpcC10dXJrZXktNTM0MzkyMS1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzQzOTIxL3JpdmVyP3ZlcnNpb249NTM0NDA3NyZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWJ1bmtlZDogTm8sIHRoZXJlIHdhc24ndCBhIG1lZGlhIGJsYWNrb3V0IG9uIFNpbW9uIENvdmVuZXkncyBvZmZpY2lhbCB2aXNpdCB0byBUdXJrZXkgbGFzdCBtb250aCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTM0MzkyMS9yaXZlcj92ZXJzaW9uPTUzNDQwNzcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgdGhlcmUgd2Fzbid0IGEgbWVkaWEgYmxhY2tvdXQgb24gU2ltb24gQ292ZW5leSdzIG9mZmljaWFsIHZpc2l0IHRvIFR1cmtleSBsYXN0IG1vbnRoIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgRGVidW5rZWQgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkLW1lZGlhLWJsYWNrb3V0LXNpbW9uLWNvdmVuZXktdHJpcC10dXJrZXktNTM0MzkyMS1GZWIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRGVidW5rZWQ6IE5vLCB0aGVyZSB3YXNuJ3QgYSBtZWRpYSBibGFja291dCBvbiBTaW1vbiBDb3ZlbmV5J3Mgb2ZmaWNpYWwgdmlzaXQgdG8gVHVya2V5IGxhc3QgbW9udGggICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWIgNXRoIDIwMjEsIDY6NDUgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4yMyw4Nzc8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkLW1lZGlhLWJsYWNrb3V0LXNpbW9uLWNvdmVuZXktdHJpcC10dXJrZXktNTM0MzkyMS1GZWIyMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IE5vLCB0aGVyZSB3YXNuJ3QgYSBtZWRpYSBibGFja291dCBvbiBTaW1vbiBDb3ZlbmV5J3Mgb2ZmaWNpYWwgdmlzaXQgdG8gVHVya2V5IGxhc3QgbW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgSXQgaGFzIGJlZW4gY2xhaW1lZCB0aGF0IHRoZSBtZWRpYSB3YXMgdG9sZCBub3QgdG8gY292ZXIgdGhlIG1pbmlzdGVyJiM4MjE3O3MgdHJpcCBsYXN0IG1vbnRoLiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gU2F0dXJkYXkgMzAgSmFudWFyeSwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvaXMtY29yb25hdmlydXMtcGFydGlhbGx5LXNlYXNvbmFsLWxlby12YXJhZGthci01MzM4MDAzLUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMzgwMDMvcml2ZXI/dmVyc2lvbj01MzM4MzE5JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RGaW5kOiBJcyB0aGUgY29yb25hdmlydXMgJ3BhcnRpYWxseSBzZWFzb25hbCcsIGFzIHRoZSBUw6FuYWlzdGUgaGFzIGNsYWltZWQ/IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzM4MDAzL3JpdmVyP3ZlcnNpb249NTMzODMxOSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdEZpbmQ6IElzIHRoZSBjb3JvbmF2aXJ1cyAncGFydGlhbGx5IHNlYXNvbmFsJywgYXMgdGhlIFTDoW5haXN0ZSBoYXMgY2xhaW1lZD8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb3JvbmF2aXJ1cy9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgQ29yb25hdmlydXMgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb3JvbmF2aXJ1cy9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBDb3JvbmF2aXJ1cyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvaXMtY29yb25hdmlydXMtcGFydGlhbGx5LXNlYXNvbmFsLWxlby12YXJhZGthci01MzM4MDAzLUphbjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0RmluZDogSXMgdGhlIGNvcm9uYXZpcnVzICdwYXJ0aWFsbHkgc2Vhc29uYWwnLCBhcyB0aGUgVMOhbmFpc3RlIGhhcyBjbGFpbWVkPyAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKYW4gMzB0aCAyMDIxLCA2OjMwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NTksNjIzPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9pcy1jb3JvbmF2aXJ1cy1wYXJ0aWFsbHktc2Vhc29uYWwtbGVvLXZhcmFka2FyLTUzMzgwMDMtSmFuMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RGaW5kOiBJcyB0aGUgY29yb25hdmlydXMgJ3BhcnRpYWxseSBzZWFzb25hbCcsIGFzIHRoZSBUw6FuYWlzdGUgaGFzIGNsYWltZWQ/ICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudFZlcnlQb3B1bGFyIj48L3NwYW4+IDUzPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBJdCYjODIxNztzIHRvbyBzb29uIHRvIGRldGVybWluZSB3aGV0aGVyIHRoaXMgY29yb25hdmlydXMgaXMgc2Vhc29uYWwsIHRoZSBXSE8gYW5kIGEgdmlyb2xvZ2lzdCBoYXZlIHNhaWQuICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFR1ZXNkYXkgMjYgSmFudWFyeSwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvd2V4Zm9yZC1kb2N0b3ItY292aWQtdmFjY2luZS1mYWxzZS01MzM1NTU5LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMzU1NTkvcml2ZXI/dmVyc2lvbj01MzM1NTcxJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgYSBXZXhmb3JkIGRvY3RvcidzIGRlYXRoIHdhcyBub3QgcmVsYXRlZCB0byB0aGUgQ292aWQtMTkgdmFjY2luZSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMzNTU1OS9yaXZlcj92ZXJzaW9uPTUzMzU1NzEmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgYSBXZXhmb3JkIGRvY3RvcidzIGRlYXRoIHdhcyBub3QgcmVsYXRlZCB0byB0aGUgQ292aWQtMTkgdmFjY2luZSIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS93ZXhmb3JkLWRvY3Rvci1jb3ZpZC12YWNjaW5lLWZhbHNlLTUzMzU1NTktSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBObywgYSBXZXhmb3JkIGRvY3RvcidzIGRlYXRoIHdhcyBub3QgcmVsYXRlZCB0byB0aGUgQ292aWQtMTkgdmFjY2luZSAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphbiAyNnRoIDIwMjEsIDM6MjIgUE0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4zMSw0NzA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3dleGZvcmQtZG9jdG9yLWNvdmlkLXZhY2NpbmUtZmFsc2UtNTMzNTU1OS1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IE5vLCBhIFdleGZvcmQgZG9jdG9yJ3MgZGVhdGggd2FzIG5vdCByZWxhdGVkIHRvIHRoZSBDb3ZpZC0xOSB2YWNjaW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIERyIEtlc2hhdiBTaGFybWEgZGllZCBvbiAxMSBKYW51YXJ5LiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFNhdHVyZGF5IDIzIEphbnVhcnksIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1mbHUtY2FzZXMtaXJlbGFuZC1jb3ZpZC0xOS01MzMyNTE0LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMzI1MTQvcml2ZXI/dmVyc2lvbj01MzMyNjEzJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIHRoZSBsYWNrIG9mIGhvc3BpdGFsaXNhdGlvbnMgZnJvbSBmbHUgaXMgbm90IGJlY2F1c2UgY2FzZXMgYXJlIG1pc3Rha2VubHkgYmVpbmcgZGlhZ25vc2VkIGFzIENvdmlkLTE5IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzMyNTE0L3JpdmVyP3ZlcnNpb249NTMzMjYxMyZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdENoZWNrOiBObywgdGhlIGxhY2sgb2YgaG9zcGl0YWxpc2F0aW9ucyBmcm9tIGZsdSBpcyBub3QgYmVjYXVzZSBjYXNlcyBhcmUgbWlzdGFrZW5seSBiZWluZyBkaWFnbm9zZWQgYXMgQ292aWQtMTkiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1mbHUtY2FzZXMtaXJlbGFuZC1jb3ZpZC0xOS01MzMyNTE0LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0Q2hlY2s6IE5vLCB0aGUgbGFjayBvZiBob3NwaXRhbGlzYXRpb25zIGZyb20gZmx1IGlzIG5vdCBiZWNhdXNlIGNhc2VzIGFyZSBtaXN0YWtlbmx5IGJlaW5nIGRpYWdub3NlZCBhcyBDb3ZpZC0xOSAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphbiAyM3JkIDIwMjEsIDEyOjA1IEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NDYsNTI5PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2stZmx1LWNhc2VzLWlyZWxhbmQtY292aWQtMTktNTMzMjUxNC1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRmFjdENoZWNrOiBObywgdGhlIGxhY2sgb2YgaG9zcGl0YWxpc2F0aW9ucyBmcm9tIGZsdSBpcyBub3QgYmVjYXVzZSBjYXNlcyBhcmUgbWlzdGFrZW5seSBiZWluZyBkaWFnbm9zZWQgYXMgQ292aWQtMTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgVGhlIGNsYWltIGdvZXMgYWdhaW5zdCB3aGF0IG1lZGljYWwgYW5kIHNjaWVudGlmaWMgZXhwZXJ0cyBoYXZlIG9ic2VydmVkIGluIElyZWxhbmQgYW5kIG90aGVyIGNvdW50cmllcyBhcm91bmQgdGhlIHdvcmxkLiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFRodXJzZGF5IDIxIEphbnVhcnksIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RmaW5kLW5waGV0LWlyZWxhbmQtYWR2aWNlLXNjaG9vbC1jbG9zdXJlcy1qYW51YXJ5LTIwMjEtNTMzMDQ1NC1KYW4yMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzMwNDU0L3JpdmVyP3ZlcnNpb249NTMzMDkxMSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0ZmluZDogV2hhdCBhZHZpY2UgZGlkIE5QSEVUIGdpdmUgdG8gR292ZXJubWVudCBhcm91bmQgdGhlIGNsb3N1cmUgb2Ygc2Nob29scz8iCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMzA0NTQvcml2ZXI/dmVyc2lvbj01MzMwOTExJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0ZmluZDogV2hhdCBhZHZpY2UgZGlkIE5QSEVUIGdpdmUgdG8gR292ZXJubWVudCBhcm91bmQgdGhlIGNsb3N1cmUgb2Ygc2Nob29scz8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGZpbmQgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0ZmluZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0ZmluZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtbnBoZXQtaXJlbGFuZC1hZHZpY2Utc2Nob29sLWNsb3N1cmVzLWphbnVhcnktMjAyMS01MzMwNDU0LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0ZmluZDogV2hhdCBhZHZpY2UgZGlkIE5QSEVUIGdpdmUgdG8gR292ZXJubWVudCBhcm91bmQgdGhlIGNsb3N1cmUgb2Ygc2Nob29scz8gICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKYW4gMjFzdCAyMDIxLCAxMjowNSBBTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjQ5LDM4NjxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtbnBoZXQtaXJlbGFuZC1hZHZpY2Utc2Nob29sLWNsb3N1cmVzLWphbnVhcnktMjAyMS01MzMwNDU0LUphbjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBGYWN0ZmluZDogV2hhdCBhZHZpY2UgZGlkIE5QSEVUIGdpdmUgdG8gR292ZXJubWVudCBhcm91bmQgdGhlIGNsb3N1cmUgb2Ygc2Nob29scz8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgRGViYXRlIGFib3V0IHRoZSBzYWZldHkgb2Ygc2Nob29scyBpbiByZWxhdGlvbiB0byBDb3ZpZC0xOSBpcyBvbmdvaW5nLiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gRnJpZGF5IDE1IEphbnVhcnksIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1kZWJ1bmstY2xvdGgtbWFza3MtNTMyNTkxNi1KYW4yMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzI1OTE2L3JpdmVyP3ZlcnNpb249NTMyNjM5MiZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IFllcywgbWFza3MsIGluY2x1ZGluZyBjbG90aCBtYXNrcywgY2FuIGhlbHAgcHJldmVudCBDb3ZpZC0xOSB0cmFuc21pc3Npb24iCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMjU5MTYvcml2ZXI/dmVyc2lvbj01MzI2MzkyJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IFllcywgbWFza3MsIGluY2x1ZGluZyBjbG90aCBtYXNrcywgY2FuIGhlbHAgcHJldmVudCBDb3ZpZC0xOSB0cmFuc21pc3Npb24iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmsvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIERlYnVuayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVuay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmsgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1kZWJ1bmstY2xvdGgtbWFza3MtNTMyNTkxNi1KYW4yMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdENoZWNrOiBZZXMsIG1hc2tzLCBpbmNsdWRpbmcgY2xvdGggbWFza3MsIGNhbiBoZWxwIHByZXZlbnQgQ292aWQtMTkgdHJhbnNtaXNzaW9uICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSmFuIDE1dGggMjAyMSwgNjowOSBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjI0LDk2MDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWRlYnVuay1jbG90aC1tYXNrcy01MzI1OTE2LUphbjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBGYWN0Q2hlY2s6IFllcywgbWFza3MsIGluY2x1ZGluZyBjbG90aCBtYXNrcywgY2FuIGhlbHAgcHJldmVudCBDb3ZpZC0xOSB0cmFuc21pc3Npb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgU3R1ZGllcyBoYXZlIHNob3duIHRoYXQgbWFza3MgY2FuIGhlbHAgcHJldmVudCB0aGUgc3ByZWFkIG9mIHRoZSB2aXJ1cy4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay13b3JsZC1oZWFsdGgtb3JnYW5pemF0aW9uLXRlc3QtY29sZC01MzI0NzQ3LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMjQ3NDcvcml2ZXI/dmVyc2lvbj01MzI1MjE2JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIHRoZSBXSE8gZGlkbid0IHNheSBhIHBvc2l0aXZlIENvdmlkLTE5IHRlc3QgaXMgbW9yZSBsaWtlbHkgZHVlIHRvIGEgY29sZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMyNDc0Ny9yaXZlcj92ZXJzaW9uPTUzMjUyMTYmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIHRoZSBXSE8gZGlkbid0IHNheSBhIHBvc2l0aXZlIENvdmlkLTE5IHRlc3QgaXMgbW9yZSBsaWtlbHkgZHVlIHRvIGEgY29sZCIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLXdvcmxkLWhlYWx0aC1vcmdhbml6YXRpb24tdGVzdC1jb2xkLTUzMjQ3NDctSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIEZhY3RDaGVjazogTm8sIHRoZSBXSE8gZGlkbid0IHNheSBhIHBvc2l0aXZlIENvdmlkLTE5IHRlc3QgaXMgbW9yZSBsaWtlbHkgZHVlIHRvIGEgY29sZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphbiAxNXRoIDIwMjEsIDExOjU0IEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MjUsNTA5PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2std29ybGQtaGVhbHRoLW9yZ2FuaXphdGlvbi10ZXN0LWNvbGQtNTMyNDc0Ny1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRmFjdENoZWNrOiBObywgdGhlIFdITyBkaWRuJ3Qgc2F5IGEgcG9zaXRpdmUgQ292aWQtMTkgdGVzdCBpcyBtb3JlIGxpa2VseSBkdWUgdG8gYSBjb2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIEZhbHNlIGNsYWltcyBvbiBzb2NpYWwgbWVkaWEgaGF2ZSBpbmFjY3VyYXRlbHkgYXR0cmlidXRlZCBhIHF1b3RlIHRvIHRoZSBXb3JsZCBIZWFsdGggT3JnYW5pemF0aW9uLiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gVGh1cnNkYXkgMTQgSmFudWFyeSwgMjAyMTwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQtY3NvLWRlYXRocy1pcmVsYW5kLWNvdmlkLTE5LWphbnVhcnktb2N0b2Jlci0yMDIwLTUzMjE5OTAtSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMyMTk5MC9yaXZlcj92ZXJzaW9uPTUzMjIxNzUmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IEEgY29tcGFyaXNvbiBvZiBkZWF0aHMgYmV0d2VlbiBKYW51YXJ5IGFuZCBPY3RvYmVyIDIwMjAgYW5kIG90aGVyIHllYXJzIGlzIG1pc2xlYWRpbmciCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMjE5OTAvcml2ZXI/dmVyc2lvbj01MzIyMTc1JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWJ1bmtlZDogQSBjb21wYXJpc29uIG9mIGRlYXRocyBiZXR3ZWVuIEphbnVhcnkgYW5kIE9jdG9iZXIgMjAyMCBhbmQgb3RoZXIgeWVhcnMgaXMgbWlzbGVhZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1jc28tZGVhdGhzLWlyZWxhbmQtY292aWQtMTktamFudWFyeS1vY3RvYmVyLTIwMjAtNTMyMTk5MC1KYW4yMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRGVidW5rZWQ6IEEgY29tcGFyaXNvbiBvZiBkZWF0aHMgYmV0d2VlbiBKYW51YXJ5IGFuZCBPY3RvYmVyIDIwMjAgYW5kIG90aGVyIHllYXJzIGlzIG1pc2xlYWRpbmcgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKYW4gMTR0aCAyMDIxLCA2OjEwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NjEsMTk3PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1jc28tZGVhdGhzLWlyZWxhbmQtY292aWQtMTktamFudWFyeS1vY3RvYmVyLTIwMjAtNTMyMTk5MC1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IEEgY29tcGFyaXNvbiBvZiBkZWF0aHMgYmV0d2VlbiBKYW51YXJ5IGFuZCBPY3RvYmVyIDIwMjAgYW5kIG90aGVyIHllYXJzIGlzIG1pc2xlYWRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgVGhlIHBvc3QgaW5jb3JyZWN0bHkgY29tcGFyZXMgQ1NPIGRhdGEgZm9yIHRlbiBtb250aHMgaW4gMjAyMCB3aXRoIHByZXZpb3VzIHllYXJzLiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBpbXBvcnRhbnQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RmaW5kLXN0ZXBoZW4tZG9ubmVsbHktbnBoZXQtNTMyMzU3NS1KYW4yMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9jMy50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDEvY2FiaW5ldC0wMjItNjMweDMzMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNjUwcHg7IGhlaWdodDogMzQzcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0ZmluZDogRGlkIHRoZSBnb3Zlcm5tZW50IGFjdHVhbGx5IGZvbGxvdyBOUEhFVCdzIGFkdmljZSBoZWFkaW5nIGludG8gRGVjZW1iZXI/IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9jMy50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDEvY2FiaW5ldC0wMjItNjMweDMzMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdGZpbmQ6IERpZCB0aGUgZ292ZXJubWVudCBhY3R1YWxseSBmb2xsb3cgTlBIRVQncyBhZHZpY2UgaGVhZGluZyBpbnRvIERlY2VtYmVyPyIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjY1MHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjM0M3B4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2FkdmljZS9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgQWR2aWNlICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvYWR2aWNlL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIEFkdmljZSAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtc3RlcGhlbi1kb25uZWxseS1ucGhldC01MzIzNTc1LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0ZmluZDogRGlkIHRoZSBnb3Zlcm5tZW50IGFjdHVhbGx5IGZvbGxvdyBOUEhFVCdzIGFkdmljZSBoZWFkaW5nIGludG8gRGVjZW1iZXI/ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSmFuIDE0dGggMjAyMSwgMTI6MDUgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj41OCwzMzQ8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RmaW5kLXN0ZXBoZW4tZG9ubmVsbHktbnBoZXQtNTMyMzU3NS1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRmFjdGZpbmQ6IERpZCB0aGUgZ292ZXJubWVudCBhY3R1YWxseSBmb2xsb3cgTlBIRVQncyBhZHZpY2UgaGVhZGluZyBpbnRvIERlY2VtYmVyPyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBUaGlzIHdlZWssIEhlYWx0aCBNaW5pbmlzdGVyIFN0ZXBoZW4gRG9ubmVsbHkgZGVuaWVkIHRoZSBnb3Zlcm5tZW50IGhhZCBnb25lIGFnYWluc3QgcHVibGljIGhlYWx0aCBhZHZpY2UuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBhcnRpY2xlLWV4dGVuZGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gU2F0dXJkYXkgOSBKYW51YXJ5LCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1kb2xvcmVzLWNhaGlsbC1jb3ZpZC0xOS12aWRlby1tYXNrcy1sb2NrZG93bi12YWNjaW5lcy01MzE1NTE5LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMTU1MTkvcml2ZXI/dmVyc2lvbj01MzE3Njk4JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBTZXZlcmFsIGNsYWltcyBhYm91dCBDb3ZpZC0xOSBpbiBhIHZpZGVvIGZlYXR1cmluZyBEb2xvcmVzIENhaGlsbCBhcmUgZmFsc2Ugb3IgbWlzbGVhZGluZyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxNTUxOS9yaXZlcj92ZXJzaW9uPTUzMTc2OTgmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBTZXZlcmFsIGNsYWltcyBhYm91dCBDb3ZpZC0xOSBpbiBhIHZpZGVvIGZlYXR1cmluZyBEb2xvcmVzIENhaGlsbCBhcmUgZmFsc2Ugb3IgbWlzbGVhZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1kb2xvcmVzLWNhaGlsbC1jb3ZpZC0xOS12aWRlby1tYXNrcy1sb2NrZG93bi12YWNjaW5lcy01MzE1NTE5LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICBEZWJ1bmtlZDogU2V2ZXJhbCBjbGFpbXMgYWJvdXQgQ292aWQtMTkgaW4gYSB2aWRlbyBmZWF0dXJpbmcgRG9sb3JlcyBDYWhpbGwgYXJlIGZhbHNlIG9yIG1pc2xlYWRpbmcgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKYW4gOXRoIDIwMjEsIDEwOjMwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MjkwLDIyNDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQtZG9sb3Jlcy1jYWhpbGwtY292aWQtMTktdmlkZW8tbWFza3MtbG9ja2Rvd24tdmFjY2luZXMtNTMxNTUxOS1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IFNldmVyYWwgY2xhaW1zIGFib3V0IENvdmlkLTE5IGluIGEgdmlkZW8gZmVhdHVyaW5nIERvbG9yZXMgQ2FoaWxsIGFyZSBmYWxzZSBvciBtaXNsZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIFRoZSB2aWRlbyB3YXMgcG9zdGVkIG9ubGluZSBiZWZvcmUgQ2hyaXN0bWFzIGFuZCBub3cgaGFzIG1vcmUgdGhhbiAxIG1pbGxpb24gdmlld3MuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBGcmlkYXkgOCBKYW51YXJ5LCAyMDIxPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2stcGZpemVyLXZhY2NpbmUtdW5wcm90ZWN0ZWQtc2V4LTUzMTk3NzktSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxOTc3OS9yaXZlcj92ZXJzaW9uPTUzMTk5MzYmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdENoZWNrOiBObywgUGZpemVyIGRpZCBub3Qgc2F5IHVucHJvdGVjdGVkIHNleCBzaG91bGQgYmUgYXZvaWRlZCBhZnRlciB0aGUgdmFjY2luZSBiZWNhdXNlIG9mIHJpc2sgZnJvbSAnZ2VuZXRpYyBtYW5pcHVsYXRpb24nIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzE5Nzc5L3JpdmVyP3ZlcnNpb249NTMxOTkzNiZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdENoZWNrOiBObywgUGZpemVyIGRpZCBub3Qgc2F5IHVucHJvdGVjdGVkIHNleCBzaG91bGQgYmUgYXZvaWRlZCBhZnRlciB0aGUgdmFjY2luZSBiZWNhdXNlIG9mIHJpc2sgZnJvbSAnZ2VuZXRpYyBtYW5pcHVsYXRpb24nIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2stcGZpemVyLXZhY2NpbmUtdW5wcm90ZWN0ZWQtc2V4LTUzMTk3NzktSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIEZhY3RDaGVjazogTm8sIFBmaXplciBkaWQgbm90IHNheSB1bnByb3RlY3RlZCBzZXggc2hvdWxkIGJlIGF2b2lkZWQgYWZ0ZXIgdGhlIHZhY2NpbmUgYmVjYXVzZSBvZiByaXNrIGZyb20gJ2dlbmV0aWMgbWFuaXB1bGF0aW9uJyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphbiA4dGggMjAyMSwgNjoxNyBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjQ3LDQ3MTxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLXBmaXplci12YWNjaW5lLXVucHJvdGVjdGVkLXNleC01MzE5Nzc5LUphbjIwMjEvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBGYWN0Q2hlY2s6IE5vLCBQZml6ZXIgZGlkIG5vdCBzYXkgdW5wcm90ZWN0ZWQgc2V4IHNob3VsZCBiZSBhdm9pZGVkIGFmdGVyIHRoZSB2YWNjaW5lIGJlY2F1c2Ugb2YgcmlzayBmcm9tICdnZW5ldGljIG1hbmlwdWxhdGlvbiciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgQSBmYWxzZSBjbGFpbSBvbiBzb2NpYWwgbWVkaWEgc3VnZ2VzdHMgdGhhdCBhIFBmaXplciBkb2N1bWVudCBzYWlkIHZhY2NpbmUgcmVjaXBpZW50cyBzaG91bGQgbm90IGhhdmUgdW5wcm90ZWN0ZWQgc2V4IGZvciAyOCBkYXlzIGFmdGVyIHJlY2VpdmluZyB0aGVpciBzZWNvbmQgZG9zZS4NCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWhzZS1uZWlnaGJvdXItd2VhcmluZy1tYXNrLXJlcG9ydC1mYWtlLXBvc3Rlci01MzE5NjQxLUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMTk2NDEvcml2ZXI/dmVyc2lvbj01MzE5NzM5JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgdGhpcyBwb3N0ZXIgaXMgbm90IGZyb20gdGhlIEhTRSB0ZWxsaW5nIHBlb3BsZSB0byByZXBvcnQgbmVpZ2hib3VycyB3aG8gZG8gbm90IHdlYXIgYSBtYXNrIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzE5NjQxL3JpdmVyP3ZlcnNpb249NTMxOTczOSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCB0aGlzIHBvc3RlciBpcyBub3QgZnJvbSB0aGUgSFNFIHRlbGxpbmcgcGVvcGxlIHRvIHJlcG9ydCBuZWlnaGJvdXJzIHdobyBkbyBub3Qgd2VhciBhIG1hc2siCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1oc2UtbmVpZ2hib3VyLXdlYXJpbmctbWFzay1yZXBvcnQtZmFrZS1wb3N0ZXItNTMxOTY0MS1KYW4yMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgRGVidW5rZWQ6IE5vLCB0aGlzIHBvc3RlciBpcyBub3QgZnJvbSB0aGUgSFNFIHRlbGxpbmcgcGVvcGxlIHRvIHJlcG9ydCBuZWlnaGJvdXJzIHdobyBkbyBub3Qgd2VhciBhIG1hc2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKYW4gOHRoIDIwMjEsIDEyOjU1IFBNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MjUsNzA2PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2staHNlLW5laWdoYm91ci13ZWFyaW5nLW1hc2stcmVwb3J0LWZha2UtcG9zdGVyLTUzMTk2NDEtSmFuMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIERlYnVua2VkOiBObywgdGhpcyBwb3N0ZXIgaXMgbm90IGZyb20gdGhlIEhTRSB0ZWxsaW5nIHBlb3BsZSB0byByZXBvcnQgbmVpZ2hib3VycyB3aG8gZG8gbm90IHdlYXIgYSBtYXNrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIEEgcG9zdGVyIHRoYXQgZmFsc2VseSBjbGFpbXMgdG8gaGF2ZSBiZWVuIHB1Ymxpc2hlZCBieSB0aGUgSFNFIGlzIGJlaW5nIHNoYXJlZCBvbiBzb2NpYWwgbWVkaWEuDQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIE1vbmRheSA0IEphbnVhcnksIDIwMjE8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkLWZha2UtcGhvdG8tbmtlbmNoby01MzE1ODY4LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMTU4Njgvcml2ZXI/dmVyc2lvbj01MzE1OTAxJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgdGhpcyBpcyBub3QgYSBwaG90byBvZiBhIG1hbiBhdHRhY2tlZCBieSBHZW9yZ2UgTmtlbmNobyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxNTg2OC9yaXZlcj92ZXJzaW9uPTUzMTU5MDEmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgdGhpcyBpcyBub3QgYSBwaG90byBvZiBhIG1hbiBhdHRhY2tlZCBieSBHZW9yZ2UgTmtlbmNobyIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQtZmFrZS1waG90by1ua2VuY2hvLTUzMTU4NjgtSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBObywgdGhpcyBpcyBub3QgYSBwaG90byBvZiBhIG1hbiBhdHRhY2tlZCBieSBHZW9yZ2UgTmtlbmNobyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphbiA0dGggMjAyMSwgNjowMiBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjYsNjM1PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC1mYWtlLXBob3RvLW5rZW5jaG8tNTMxNTg2OC1KYW4yMDIxLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRGVidW5rZWQ6IE5vLCB0aGlzIGlzIG5vdCBhIHBob3RvIG9mIGEgbWFuIGF0dGFja2VkIGJ5IEdlb3JnZSBOa2VuY2hvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIEFuIGltYWdlIGJlaW5nIHNoYXJlZCBvbiBzb2NpYWwgbWVkaWEgaXMgYWN0dWFsbHkgb2YgYW4gRXZlcnRvbiBmb290YmFsbCBmYW4gYXR0YWNrZWQgaW4gMjAxOS4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2dlb3JnZS1ua2VuY2hvLTMyLWNvbnZpY3Rpb25zLWZhY3RjaGVjay01MzE1NTg0LUphbjIwMjEvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMTU1ODQvcml2ZXI/dmVyc2lvbj01MzE1NTg4JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIEdlb3JnZSBOa2VuY2hvIHdhcyBub3QgYSBjb252aWN0ZWQgY3JpbWluYWwgb3V0IG9uIGJhaWwgZm9yIGF0dGFja2luZyBoaXMgZ2lybGZyaWVuZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxNTU4NC9yaXZlcj92ZXJzaW9uPTUzMTU1ODgmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIEdlb3JnZSBOa2VuY2hvIHdhcyBub3QgYSBjb252aWN0ZWQgY3JpbWluYWwgb3V0IG9uIGJhaWwgZm9yIGF0dGFja2luZyBoaXMgZ2lybGZyaWVuZCIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZ2VvcmdlLW5rZW5jaG8tMzItY29udmljdGlvbnMtZmFjdGNoZWNrLTUzMTU1ODQtSmFuMjAyMS8iPgogICAgICAgICAgICAgICAgICAgIEZhY3RDaGVjazogTm8sIEdlb3JnZSBOa2VuY2hvIHdhcyBub3QgYSBjb252aWN0ZWQgY3JpbWluYWwgb3V0IG9uIGJhaWwgZm9yIGF0dGFja2luZyBoaXMgZ2lybGZyaWVuZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphbiA0dGggMjAyMSwgNTo1MSBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjM3LDYwMTxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZ2VvcmdlLW5rZW5jaG8tMzItY29udmljdGlvbnMtZmFjdGNoZWNrLTUzMTU1ODQtSmFuMjAyMS8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RDaGVjazogTm8sIEdlb3JnZSBOa2VuY2hvIHdhcyBub3QgYSBjb252aWN0ZWQgY3JpbWluYWwgb3V0IG9uIGJhaWwgZm9yIGF0dGFja2luZyBoaXMgZ2lybGZyaWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBBIGNsYWltIG9uIHNvY2lhbCBtZWRpYSBzYXlzIHRoYXQgR2VvcmdlIE5rZW5jaG8gaGFkIDMyIGNvbnZpY3Rpb25zLCBidXQgdGhpcyBpcyBmYWxzZS4gICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBUdWVzZGF5IDI5IERlY2VtYmVyLCAyMDIwPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mcmVlZG9tLW9mLWluZm9ybWF0aW9uLXJlcXVlc3QtY292aWQtMTktaHNlLWRvZXMtbm90LWV4aXN0LTUzMTIyNzktRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxMjI3OS9yaXZlcj92ZXJzaW9uPTUzMTIyODcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCBhIEZyZWVkb20gb2YgSW5mb3JtYXRpb24gcmVxdWVzdCB0byB0aGUgSFNFIGRpZCBub3QgcHJvdmUgdGhhdCBDb3ZpZC0xOSBkb2VzIG5vdCBleGlzdCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxMjI3OS9yaXZlcj92ZXJzaW9uPTUzMTIyODcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgYSBGcmVlZG9tIG9mIEluZm9ybWF0aW9uIHJlcXVlc3QgdG8gdGhlIEhTRSBkaWQgbm90IHByb3ZlIHRoYXQgQ292aWQtMTkgZG9lcyBub3QgZXhpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgRGVidW5rZWQgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmtlZC9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZnJlZWRvbS1vZi1pbmZvcm1hdGlvbi1yZXF1ZXN0LWNvdmlkLTE5LWhzZS1kb2VzLW5vdC1leGlzdC01MzEyMjc5LURlYzIwMjAvIj4KICAgICAgICAgICAgICAgICAgICBEZWJ1bmtlZDogTm8sIGEgRnJlZWRvbSBvZiBJbmZvcm1hdGlvbiByZXF1ZXN0IHRvIHRoZSBIU0UgZGlkIG5vdCBwcm92ZSB0aGF0IENvdmlkLTE5IGRvZXMgbm90IGV4aXN0ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjIDI5dGggMjAyMCwgNTo1MiBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjM5LDk2NDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZnJlZWRvbS1vZi1pbmZvcm1hdGlvbi1yZXF1ZXN0LWNvdmlkLTE5LWhzZS1kb2VzLW5vdC1leGlzdC01MzEyMjc5LURlYzIwMjAvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBEZWJ1bmtlZDogTm8sIGEgRnJlZWRvbSBvZiBJbmZvcm1hdGlvbiByZXF1ZXN0IHRvIHRoZSBIU0UgZGlkIG5vdCBwcm92ZSB0aGF0IENvdmlkLTE5IGRvZXMgbm90IGV4aXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIFRoZSBjbGFpbSBvcmlnaW5hdGVkIGluIGEgc2VyaWVzIG9mIHBvc3RzIGJ5IEFudGktQ29ycnVwdGlvbiBJcmVsYW5kIGxhc3Qgd2Vlay4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIE1vbmRheSAyOCBEZWNlbWJlciwgMjAyMDwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQtcGZpemVyLWVtcGxveWVlLXF1b3Rlcy1taWtlLXllYWRvbi1jb3ZpZC0xOS12YWNjaW5lLTUzMTE5MzUtRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxMTkzNS9yaXZlcj92ZXJzaW9uPTUzMTE5NDEmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCBhIGZvcm1lciBQZml6ZXIgZW1wbG95ZWUgd2FzIG5vdCBjb3JyZWN0IHRvIHNheSB0aGVyZSBpcyAnbm8gbmVlZCBmb3IgdmFjY2luZXMnIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzExOTM1L3JpdmVyP3ZlcnNpb249NTMxMTk0MSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCBhIGZvcm1lciBQZml6ZXIgZW1wbG95ZWUgd2FzIG5vdCBjb3JyZWN0IHRvIHNheSB0aGVyZSBpcyAnbm8gbmVlZCBmb3IgdmFjY2luZXMnIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY292aWQtMTkvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIENvdmlkLTE5ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY292aWQtMTkvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgQ292aWQtMTkgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkLXBmaXplci1lbXBsb3llZS1xdW90ZXMtbWlrZS15ZWFkb24tY292aWQtMTktdmFjY2luZS01MzExOTM1LURlYzIwMjAvIj4KICAgICAgICAgICAgICAgICAgICBEZWJ1bmtlZDogTm8sIGEgZm9ybWVyIFBmaXplciBlbXBsb3llZSB3YXMgbm90IGNvcnJlY3QgdG8gc2F5IHRoZXJlIGlzICdubyBuZWVkIGZvciB2YWNjaW5lcycgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWMgMjh0aCAyMDIwLCAxOjUxIFBNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MTY1LDgyNjxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGVidW5rZWQtcGZpemVyLWVtcGxveWVlLXF1b3Rlcy1taWtlLXllYWRvbi1jb3ZpZC0xOS12YWNjaW5lLTUzMTE5MzUtRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIERlYnVua2VkOiBObywgYSBmb3JtZXIgUGZpemVyIGVtcGxveWVlIHdhcyBub3QgY29ycmVjdCB0byBzYXkgdGhlcmUgaXMgJ25vIG5lZWQgZm9yIHZhY2NpbmVzJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBRdW90ZXMgYXR0cmlidXRlZCB0byBEciBNaWtlIFllYWRvbiBhcmUgaW5hY2N1cmF0ZS4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2FudHJpbS1ob3NwaXRhbC1mdWxsLWNhcGFjaXR5LWRlYnVuay1mYWN0Y2hlY2stNTMxMTg5Ny1EZWMyMDIwLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzExODk3L3JpdmVyP3ZlcnNpb249NTMxMTkzNyZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWJ1bmtlZDogTm8sIHRoaXMgdmlkZW8gZG9lcyBub3Qgc2hvdyB0aGF0IGEgaG9zcGl0YWwgaW4gdGhlIE5vcnRoIGxpZWQgYWJvdXQgYmVpbmcgb3ZlciBjYXBhY2l0eSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMxMTg5Ny9yaXZlcj92ZXJzaW9uPTUzMTE5Mzcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlYnVua2VkOiBObywgdGhpcyB2aWRlbyBkb2VzIG5vdCBzaG93IHRoYXQgYSBob3NwaXRhbCBpbiB0aGUgTm9ydGggbGllZCBhYm91dCBiZWluZyBvdmVyIGNhcGFjaXR5IgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjMwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvbm9zY3JpcHQ+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0YWcgc2hvdy1vbi10b3VjaCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgICMgRmFjdGNoZWNrICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9hbnRyaW0taG9zcGl0YWwtZnVsbC1jYXBhY2l0eS1kZWJ1bmstZmFjdGNoZWNrLTUzMTE4OTctRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBObywgdGhpcyB2aWRlbyBkb2VzIG5vdCBzaG93IHRoYXQgYSBob3NwaXRhbCBpbiB0aGUgTm9ydGggbGllZCBhYm91dCBiZWluZyBvdmVyIGNhcGFjaXR5ICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYyAyOHRoIDIwMjAsIDE6MTcgUE0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj4xLDYyMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvYW50cmltLWhvc3BpdGFsLWZ1bGwtY2FwYWNpdHktZGVidW5rLWZhY3RjaGVjay01MzExODk3LURlYzIwMjAvI2NvbW1lbnRzIiB0aXRsZT0iQ29tbWVudCBvbiBEZWJ1bmtlZDogTm8sIHRoaXMgdmlkZW8gZG9lcyBub3Qgc2hvdyB0aGF0IGEgaG9zcGl0YWwgaW4gdGhlIE5vcnRoIGxpZWQgYWJvdXQgYmVpbmcgb3ZlciBjYXBhY2l0eSAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgVGhlIE5vcnRoZXJuIFRydXN0IGhhcyBzYWlkIHRoYXQgY2xhaW1zIG9mIGxpZXMgYWJvdXQgaG9zcGl0YWwgY2FwYWNpdHkgaW4gdGhlIE5vcnRoIGFyZSAmIzgyMjA7cmlkaWN1bG91cyYjODIyMTsuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBXZWRuZXNkYXkgMjMgRGVjZW1iZXIsIDIwMjA8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2NvdmlkLXZhY2NpbmUtZmFpbnRpbmctbnVyc2UtNTMwOTk4My1EZWMyMDIwLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzA5OTgzL3JpdmVyP3ZlcnNpb249NTMwOTk4NSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWJ1bmtlZDogTm8sIHRoaXMgVVMgbnVyc2Ugd2hvIGZhaW50ZWQgYWZ0ZXIgaGVyIENvdmlkLTE5IHZhY2NpbmUgaGFzIG5vdCBkaWVkIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzA5OTgzL3JpdmVyP3ZlcnNpb249NTMwOTk4NSZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCB0aGlzIFVTIG51cnNlIHdobyBmYWludGVkIGFmdGVyIGhlciBDb3ZpZC0xOSB2YWNjaW5lIGhhcyBub3QgZGllZCIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb3ZpZC12YWNjaW5lLWZhaW50aW5nLW51cnNlLTUzMDk5ODMtRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgICAgIERlYnVua2VkOiBObywgdGhpcyBVUyBudXJzZSB3aG8gZmFpbnRlZCBhZnRlciBoZXIgQ292aWQtMTkgdmFjY2luZSBoYXMgbm90IGRpZWQgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWMgMjNyZCAyMDIwLCA1OjMwIFBNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+OTAsODA4PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9jb3ZpZC12YWNjaW5lLWZhaW50aW5nLW51cnNlLTUzMDk5ODMtRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIERlYnVua2VkOiBObywgdGhpcyBVUyBudXJzZSB3aG8gZmFpbnRlZCBhZnRlciBoZXIgQ292aWQtMTkgdmFjY2luZSBoYXMgbm90IGRpZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgVGhlIG51cnNlIGhhcyBzYWlkIGhlciBmYWludGluZyB3YXMgbm90IGxpbmtlZCB0byB0aGUgdmFjY2luZSwgYnV0IHRvIGEgaGVhbHRoIGNvbmRpdGlvbiBzaGUgaGFzLiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVuay1wYXJpcy1wcm90ZXN0LWNvdmlkLTUzMDg3MjEtRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwODcyMS9yaXZlcj92ZXJzaW9uPTUzMDkzMjImd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRGVidW5rZWQ6IE5vLCB0aGlzIHBob3RvIGRvZXMgbm90IHNob3cgUGFyaXMgJ2luIGZ1bGwgb3V0IHdhcicgb3ZlciBDb3ZpZC0xOSByZXN0cmljdGlvbnMiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMDg3MjEvcml2ZXI/dmVyc2lvbj01MzA5MzIyJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWJ1bmtlZDogTm8sIHRoaXMgcGhvdG8gZG9lcyBub3Qgc2hvdyBQYXJpcyAnaW4gZnVsbCBvdXQgd2FyJyBvdmVyIENvdmlkLTE5IHJlc3RyaWN0aW9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWcgc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWJ1bmtlZCAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVua2VkL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIERlYnVua2VkICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kZWJ1bmstcGFyaXMtcHJvdGVzdC1jb3ZpZC01MzA4NzIxLURlYzIwMjAvIj4KICAgICAgICAgICAgICAgICAgICBEZWJ1bmtlZDogTm8sIHRoaXMgcGhvdG8gZG9lcyBub3Qgc2hvdyBQYXJpcyAnaW4gZnVsbCBvdXQgd2FyJyBvdmVyIENvdmlkLTE5IHJlc3RyaWN0aW9ucyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1Ymxpc2hlZC1hdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYyAyM3JkIDIwMjAsIDExOjE4IEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+MiwwODU8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2RlYnVuay1wYXJpcy1wcm90ZXN0LWNvdmlkLTUzMDg3MjEtRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIERlYnVua2VkOiBObywgdGhpcyBwaG90byBkb2VzIG5vdCBzaG93IFBhcmlzICdpbiBmdWxsIG91dCB3YXInIG92ZXIgQ292aWQtMTkgcmVzdHJpY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIFRoZSBwaG90byB3YXMgdGFrZW4gaW4gMjAxOCB3aGVuIEZyYW5jZSB3b24gdGhlIFdvcmxkIEN1cC4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFR1ZXNkYXkgMjIgRGVjZW1iZXIsIDIwMjA8L2gzPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUgc3RhbmRhcmQgbGFuZHNjYXBlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaW1hZ2UiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1wY3ItdGVzdHMtaXJpc2gtdmlkZW8tNTMwNDA5Ny1EZWMyMDIwLyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9pbWcyLnRoZWpvdXJuYWwuaWUvYXJ0aWNsZS81MzA0MDk3L3JpdmVyP3ZlcnNpb249NTMwNDMwMiZ3aWR0aD0yMzAiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjMwcHg7IGhlaWdodDogMTUwcHgiCiAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IE5vLCBhIGNsYWltIGJ5IGFuIElyaXNoIGRvY3RvciB0aGF0IFBDUiB0ZXN0cyBoYXZlIGEgOTclIGZhbHNlIHBvc2l0aXZlIHJhdGUgaXMgbm90IHRydWUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPG5vc2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMDQwOTcvcml2ZXI/dmVyc2lvbj01MzA0MzAyJndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJGYWN0Q2hlY2s6IE5vLCBhIGNsYWltIGJ5IGFuIElyaXNoIGRvY3RvciB0aGF0IFBDUiB0ZXN0cyBoYXZlIGEgOTclIGZhbHNlIHBvc2l0aXZlIHJhdGUgaXMgbm90IHRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1wY3ItdGVzdHMtaXJpc2gtdmlkZW8tNTMwNDA5Ny1EZWMyMDIwLyI+CiAgICAgICAgICAgICAgICAgICAgRmFjdENoZWNrOiBObywgYSBjbGFpbSBieSBhbiBJcmlzaCBkb2N0b3IgdGhhdCBQQ1IgdGVzdHMgaGF2ZSBhIDk3JSBmYWxzZSBwb3NpdGl2ZSByYXRlIGlzIG5vdCB0cnVlICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjIDIybmQgMjAyMCwgMTI6MDUgQU0gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW50ZXJhY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC12aWV3cyBpY29uIGljb25WaWV3VmVyeVBvcHVsYXIiPjwvc3Bhbj40NywyODA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gIFZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1wY3ItdGVzdHMtaXJpc2gtdmlkZW8tNTMwNDA5Ny1EZWMyMDIwLyNjb21tZW50cyIgdGl0bGU9IkNvbW1lbnQgb24gRmFjdENoZWNrOiBObywgYSBjbGFpbSBieSBhbiBJcmlzaCBkb2N0b3IgdGhhdCBQQ1IgdGVzdHMgaGF2ZSBhIDk3JSBmYWxzZSBwb3NpdGl2ZSByYXRlIGlzIG5vdCB0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50Ij48L3NwYW4+IDA8c3BhbiBjbGFzcz0ic2hvdy1vbi1kZXNrdG9wIj4gQ29tbWVudHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImV4Y2VycHQiPgogICAgICAgICAgICAgICAgICAgIFRoZSB2aWRlbywgd2hpY2ggaGFzIGF0dHJhY3RlZCBodW5kcmVkcyBvZiBzaGFyZXMgYW5kIGxpa2VzIG9uIEZhY2Vib29rLCBtYWtlcyBhIG51bWJlciBvZiBjbGFpbXMgYWJvdXQgUENSIHRlc3RpbmcuICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtYXJ0aWNsZSBkZXNrdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2hvdy1vbi1kZXNrdG9wIj4KICAgICAgICAgICAgPGgzPiMgZmFjdGNoZWNrIC0gTW9uZGF5IDIxIERlY2VtYmVyLCAyMDIwPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlIHN0YW5kYXJkIGxhbmRzY2FwZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImltYWdlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS92YWNjaW5lLW1pc2luZm9ybWF0aW9uLWlyZWxhbmQtYW50aS12YXh4ZXJzLTUzMDE0NjgtRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwMTQ2OC9yaXZlcj92ZXJzaW9uPTUzMDE0NzImd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iSG93IGFudGktdmFjY2luZSBtaXNpbmZvcm1hdGlvbiB0b29rIGFpbSBhdCB0aGUgVG95IFNob3cgLSBhbmQgd2hhdCBjYW4gYmUgZG9uZSBhYm91dCBpdCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwMTQ2OC9yaXZlcj92ZXJzaW9uPTUzMDE0NzImd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkhvdyBhbnRpLXZhY2NpbmUgbWlzaW5mb3JtYXRpb24gdG9vayBhaW0gYXQgdGhlIFRveSBTaG93IC0gYW5kIHdoYXQgY2FuIGJlIGRvbmUgYWJvdXQgaXQiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9hbnRpLXZheHhlcnMvbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEFudGktdmF4eGVycyAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2FudGktdmF4eGVycy9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBBbnRpLXZheHhlcnMgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3ZhY2NpbmUtbWlzaW5mb3JtYXRpb24taXJlbGFuZC1hbnRpLXZheHhlcnMtNTMwMTQ2OC1EZWMyMDIwLyI+CiAgICAgICAgICAgICAgICAgICAgSG93IGFudGktdmFjY2luZSBtaXNpbmZvcm1hdGlvbiB0b29rIGFpbSBhdCB0aGUgVG95IFNob3cgLSBhbmQgd2hhdCBjYW4gYmUgZG9uZSBhYm91dCBpdCAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWMgMjFzdCAyMDIwLCA3OjAwIEFNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NDUsMjk0PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS92YWNjaW5lLW1pc2luZm9ybWF0aW9uLWlyZWxhbmQtYW50aS12YXh4ZXJzLTUzMDE0NjgtRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEhvdyBhbnRpLXZhY2NpbmUgbWlzaW5mb3JtYXRpb24gdG9vayBhaW0gYXQgdGhlIFRveSBTaG93IC0gYW5kIHdoYXQgY2FuIGJlIGRvbmUgYWJvdXQgaXQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb25Db21tZW50VmVyeVBvcHVsYXIiPjwvc3Bhbj4gMTA0PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBJcmVsYW5kIGlzIHNlZWluZyBhIGxvdCBvZiBtaXNpbmZvcm1hdGlvbiBhYm91dCB2YWNjaW5lcyByaWdodCBub3cgJiM4MjExOyBhbmQgdGhlcmUmIzgyMTc7cyBubyBzaWduIG9mIGl0IHN0b3BwaW5nLiAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIEZyaWRheSAxOCBEZWNlbWJlciwgMjAyMDwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtZmFjdGNoZWNrLWNvdmlkLTE5LWRlYXRocy1udW1iZXJzLTUzMDQ1OTgtRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwNDU5OC9yaXZlcj92ZXJzaW9uPTUzMDUxMDcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdEZpbmQ6IEhhcyBDb3ZpZC0xOSBpbXBhY3RlZCB0aGUgb3ZlcmFsbCBudW1iZXIgb2YgZGVhdGhzIGluIElyZWxhbmQgdGhpcyB5ZWFyPyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwNDU5OC9yaXZlcj92ZXJzaW9uPTUzMDUxMDcmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RGaW5kOiBIYXMgQ292aWQtMTkgaW1wYWN0ZWQgdGhlIG92ZXJhbGwgbnVtYmVyIG9mIGRlYXRocyBpbiBJcmVsYW5kIHRoaXMgeWVhcj8iCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RmaW5kLWZhY3RjaGVjay1jb3ZpZC0xOS1kZWF0aHMtbnVtYmVycy01MzA0NTk4LURlYzIwMjAvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0RmluZDogSGFzIENvdmlkLTE5IGltcGFjdGVkIHRoZSBvdmVyYWxsIG51bWJlciBvZiBkZWF0aHMgaW4gSXJlbGFuZCB0aGlzIHllYXI/ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjIDE4dGggMjAyMCwgNzowMCBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjQ5LDUwNzxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGZpbmQtZmFjdGNoZWNrLWNvdmlkLTE5LWRlYXRocy1udW1iZXJzLTUzMDQ1OTgtRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RGaW5kOiBIYXMgQ292aWQtMTkgaW1wYWN0ZWQgdGhlIG92ZXJhbGwgbnVtYmVyIG9mIGRlYXRocyBpbiBJcmVsYW5kIHRoaXMgeWVhcj8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgRGVhdGhzIHJvc2UgYnkgMTQuMSUgaW4gdGhlIHNlY29uZCBxdWFydGVyIG9mIDIwMjAgY29tcGFyZWQgdG8gdGhlIHNhbWUgcGVyaW9kIGluIDIwMTkuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICA8aDM+IyBmYWN0Y2hlY2sgLSBUaHVyc2RheSAxNyBEZWNlbWJlciwgMjAyMDwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWNvdmlkLTE5LWRlYXRocy11ay1wcmUtZXhpc3RpbmctY29uZGl0aW9uLTUzMDMxNDktRGVjMjAyMC8iPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwMzE0OS9yaXZlcj92ZXJzaW9uPTUzMDM0NzEmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBSUFBQUFBQUFQLy8veUg1QkFFQUFBQUFMQUFBQUFBQkFBRUFBQUlCUkFBNyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIzMHB4OyBoZWlnaHQ6IDE1MHB4IgogICAgICAgICAgICAgICAgICAgIGFsdD0iRmFjdENoZWNrOiBObywgaXQgaXMgbm90IHRydWUgdGhhdCBvbmx5IHBlb3BsZSB3aXRoIHByZS1leGlzdGluZyBjb25kaXRpb25zIGhhdmUgZGllZCBmcm9tIENvdmlkLTE5IGluIHRoZSBVSyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwMzE0OS9yaXZlcj92ZXJzaW9uPTUzMDM0NzEmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogTm8sIGl0IGlzIG5vdCB0cnVlIHRoYXQgb25seSBwZW9wbGUgd2l0aCBwcmUtZXhpc3RpbmcgY29uZGl0aW9ucyBoYXZlIGRpZWQgZnJvbSBDb3ZpZC0xOSBpbiB0aGUgVUsiCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTBweCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9ub3NjcmlwdD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZyBzaG93LW9uLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAjIEZhY3RjaGVjayAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRhZyBzaG93LW9uLXRvdWNoIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgIyBGYWN0Y2hlY2sgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay1jb3ZpZC0xOS1kZWF0aHMtdWstcHJlLWV4aXN0aW5nLWNvbmRpdGlvbi01MzAzMTQ5LURlYzIwMjAvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0Q2hlY2s6IE5vLCBpdCBpcyBub3QgdHJ1ZSB0aGF0IG9ubHkgcGVvcGxlIHdpdGggcHJlLWV4aXN0aW5nIGNvbmRpdGlvbnMgaGF2ZSBkaWVkIGZyb20gQ292aWQtMTkgaW4gdGhlIFVLICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVibGlzaGVkLWF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjIDE3dGggMjAyMCwgNTo1NiBQTSAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnRlcmFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXZpZXdzIGljb24gaWNvblZpZXdWZXJ5UG9wdWxhciI+PC9zcGFuPjE3LDMxMzxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiAgVmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWNvdmlkLTE5LWRlYXRocy11ay1wcmUtZXhpc3RpbmctY29uZGl0aW9uLTUzMDMxNDktRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RDaGVjazogTm8sIGl0IGlzIG5vdCB0cnVlIHRoYXQgb25seSBwZW9wbGUgd2l0aCBwcmUtZXhpc3RpbmcgY29uZGl0aW9ucyBoYXZlIGRpZWQgZnJvbSBDb3ZpZC0xOSBpbiB0aGUgVUsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnQiPjwvc3Bhbj4gMDxzcGFuIGNsYXNzPSJzaG93LW9uLWRlc2t0b3AiPiBDb21tZW50czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICAgICAgQSBwb3N0IG9uIHNvY2lhbCBtZWRpYSBoYXMgZmFsc2VseSBjbGFpbWVkIHRoYXQgdGhlIE5IUyBjb25maXJtZWQgbm8gQ292aWQtMTkgZGVhdGhzIG9jY3VycmVkIGFtb25nIHBlb3BsZSB3aXRob3V0IGEgcHJlLWV4aXN0aW5nIGNvbmRpdGlvbi4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLWFydGljbGUgZGVza3RvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgIDxoMz4jIGZhY3RjaGVjayAtIFdlZG5lc2RheSAxNiBEZWNlbWJlciwgMjAyMDwvaDM+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS1hcnRpY2xlIGRlc2t0b3AiPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZSBzdGFuZGFyZCBsYW5kc2NhcGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJpbWFnZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWlyaXNoLWdvdmVybm1lbnQtYmFuay1ndWFyYW50ZWUtYmFpbG91dC01MzAxODMzLURlYzIwMjAvIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsPSJodHRwczovL2ltZzIudGhlam91cm5hbC5pZS9hcnRpY2xlLzUzMDE4MzMvcml2ZXI/dmVyc2lvbj01MzAyMzg5JndpZHRoPTIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3lINUJBRUFBQUFBTEFBQUFBQUJBQUVBQUFJQlJBQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMzBweDsgaGVpZ2h0OiAxNTBweCIKICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogV2FzIE1pY2hlw6FsIE1hcnRpbiByaWdodCB0byBzYXkgdGhhdCB0aGUgYmFua3Mgd2VyZSBub3QgYmFpbGVkIG91dCBpbiAyMDA4PyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1nMi50aGVqb3VybmFsLmllL2FydGljbGUvNTMwMTgzMy9yaXZlcj92ZXJzaW9uPTUzMDIzODkmd2lkdGg9MjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY3RDaGVjazogV2FzIE1pY2hlw6FsIE1hcnRpbiByaWdodCB0byBzYXkgdGhhdCB0aGUgYmFua3Mgd2VyZSBub3QgYmFpbGVkIG91dCBpbiAyMDA4PyIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1MHB4IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L25vc2NyaXB0PgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlY2Vzc2lvbi9uZXdzLyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnIHNob3ctb24tZGVza3RvcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICMgUmVjZXNzaW9uICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIHNob3ctb24tdG91Y2giIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcmVjZXNzaW9uL25ld3MvIj4KICAgICAgICAgICAgICAgICAgICAjIFJlY2Vzc2lvbiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrLWlyaXNoLWdvdmVybm1lbnQtYmFuay1ndWFyYW50ZWUtYmFpbG91dC01MzAxODMzLURlYzIwMjAvIj4KICAgICAgICAgICAgICAgICAgICBGYWN0Q2hlY2s6IFdhcyBNaWNoZcOhbCBNYXJ0aW4gcmlnaHQgdG8gc2F5IHRoYXQgdGhlIGJhbmtzIHdlcmUgbm90IGJhaWxlZCBvdXQgaW4gMjAwOD8gICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWJsaXNoZWQtYXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWMgMTZ0aCAyMDIwLCA2OjU2IFBNICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImludGVyYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdmlld3MgaWNvbiBpY29uVmlld1ZlcnlQb3B1bGFyIj48L3NwYW4+NjAsODQ4PHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+ICBWaWV3czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2staXJpc2gtZ292ZXJubWVudC1iYW5rLWd1YXJhbnRlZS1iYWlsb3V0LTUzMDE4MzMtRGVjMjAyMC8jY29tbWVudHMiIHRpdGxlPSJDb21tZW50IG9uIEZhY3RDaGVjazogV2FzIE1pY2hlw6FsIE1hcnRpbiByaWdodCB0byBzYXkgdGhhdCB0aGUgYmFua3Mgd2VyZSBub3QgYmFpbGVkIG91dCBpbiAyMDA4PyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiBpY29uQ29tbWVudCI+PC9zcGFuPiAwPHNwYW4gY2xhc3M9InNob3ctb24tZGVza3RvcCI+IENvbW1lbnRzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcnB0Ij4KICAgICAgICAgICAgICAgICAgICBUaGUgVGFvaXNlYWNoIGhhcyBzdWdnZXN0ZWQgdGhhdCB0aGUgYmFuayBndWFyYW50ZWUgd2FzIGFuIGludmVzdG1lbnQuICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJwYWdpbmF0ZSI+CiAgICA8ZGl2IGNsYXNzPSd3cC1wYWdlbmF2aSc+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nY3VycmVudCc+MTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvcGFnZS8yLyIgY2xhc3M9J3BhZ2UnPjI8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy9wYWdlLzMvIiBjbGFzcz0ncGFnZSc+MzwvYT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzL3BhZ2UvNC8iIGNsYXNzPSdwYWdlJz40PC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZmFjdGNoZWNrL25ld3MvcGFnZS81LyIgY2xhc3M9J3BhZ2UnPjU8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy9wYWdlLzIvIiBjbGFzcz0ibmV4dHBvc3RzbGluayI+TmV4dDwvYT4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2Pgo8L2Rpdj48IS0tIENsb3NlIG9mZiByaXZlciAtLT4KPCEtLSBTaWRlYmFyIC0tPgo8ZGl2IGNsYXNzPSJzaWRlYmFyIHNwYW4tNCBsYXN0IiBpZD0ic2lkZWJhci1ob2xkZXIiPgo8ZGl2IGNsYXNzPSJhZHZlcnQgYWRzZXJ2ZXJhZCI+CjxkaXYgaWQ9J2Rpdi1ncHQtYWQtMTM2NTA5MjQwNjIxMy0xJz4KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgpnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24oKSB7IGdvb2dsZXRhZy5kaXNwbGF5KCdkaXYtZ3B0LWFkLTEzNjUwOTI0MDYyMTMtMScpOyB9KTsKPC9zY3JpcHQ+CjwvZGl2PjwvZGl2PgoKPGRpdiBjbGFzcz0id2lkZ2V0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvblNlcGFyYXRvciI+CiAgICAgICAgICAgIDxoMz4KICAgICAgICAgICAgICA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyI+ZmFjdGNoZWNrPC9hPgogICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3aWRnZXRDb250ZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkgcG9zdE1pbmlMYW5kc2NhcGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9sdWtlLW9uZWlsbC12YWNjaW5lLTU0MTcxMjAtQXByMjAyMS8iPjxpbWcgc3JjPSJodHRwczovL2MyLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9sdWtlLTIwLTI5MHg4MC5wbmciIGNsYXNzPSJhdHRhY2htZW50LXN1cGVyX3dpZGVfMSIgd2lkdGg9IjI5MCIgaGVpZ2h0PSI4MCIgYWx0PSIiPjwvYT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY292aWQxOS1mYWN0cy9uZXdzLyIgY2xhc3M9InRhZyI+Y292aWQxOSBmYWN0czwvYT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgIDxoND48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2x1a2Utb25laWxsLXZhY2NpbmUtNTQxNzEyMC1BcHIyMDIxLyI+RGVidW5rZWQ6IE5vLCBQcm9mZXNzb3IgTHVrZSBPJ05laWxsIGRpZG4ndCByZWZ1c2UgYSBDb3ZpZCB2YWNjaW5lIGJlY2F1c2UgaGUgJ2RpZG4ndCB3YW50JyBvbmU8L2E+PC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gTWluaSBwb3N0IC0tPgogICAgPGRpdiBjbGFzcz0icG9zdCBwb3N0TWluaSAiPgogICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS90aGUtZXhwbGFpbmVyLXBvZGNhc3QtbWlzaW5mb3JtYXRpb24tNTQxMTAzNS1BcHIyMDIxLyI+PGltZyBzcmM9Imh0dHBzOi8vYzEudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0L2VwMTExLXRodW1ibmFpbC04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgYWx0PSIiPjwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9wb2RjYXN0L25ld3MvIiBjbGFzcz0idGFnIj5Qb2RjYXN0PC9hPgogICAgICAgIDxoNT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3RoZS1leHBsYWluZXItcG9kY2FzdC1taXNpbmZvcm1hdGlvbi01NDExMDM1LUFwcjIwMjEvIj5UaGUgRXhwbGFpbmVyOiBGcm9tIGluZmx1ZW5jZXJzIHRvIFFBbm9uIC0gaG93IG1pc2luZm9ybWF0aW9uIGNoYW5nZWQgaW4gSXJlbGFuZCBvdmVyIHRoZSBwYXN0IHllYXI8L2E+PC9oNT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSAvTWluaSBwb3N0IC0tPgoKICAgIDwhLS0gTWluaSBwb3N0IC0tPgogICAgPGRpdiBjbGFzcz0icG9zdCBwb3N0TWluaSAiPgogICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS90cmF2ZWxsZXJzLXdlcmUtbm90LW9jY3VweWluZy10aGUtY2FyLXBhcmstb2YtYS1wZml6ZXItZmFjdG9yeS10by1nZXQtdmFjY2luZXMtNTQwODQyNS1BcHIyMDIxLyI+PGltZyBzcmM9Imh0dHBzOi8vYzIudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0L2lsbHVzdHJhdGlvbnMtaW4taXJlbGFuZC04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgYWx0PSIiPjwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iIGNsYXNzPSJ0YWciPmZhY3RjaGVjazwvYT4KICAgICAgICA8aDU+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS90cmF2ZWxsZXJzLXdlcmUtbm90LW9jY3VweWluZy10aGUtY2FyLXBhcmstb2YtYS1wZml6ZXItZmFjdG9yeS10by1nZXQtdmFjY2luZXMtNTQwODQyNS1BcHIyMDIxLyI+RGVidW5rZWQ6IE5vLCBUcmF2ZWxsZXJzIHdlcmUgbm90IHByb3Rlc3Rpbmcgb3V0c2lkZSBhIER1YmxpbiBQZml6ZXIgcGxhbnQgZm9yIGFjY2VzcyB0byB0aGUgQ292aWQtMTkgdmFjY2luZTwvYT48L2g1PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIC9NaW5pIHBvc3QgLS0+CgogICAgPC9kaXY+CjwvZGl2PgoKCjxkaXYgY2xhc3M9IndpZGdldCB3aWRnZXRZb3VyU2F5Ij4KICAgIDxkaXYgY2xhc3M9InNlY3Rpb25TZXBhcmF0b3IiPgogICAgICAgIDxoMz5Zb3VyIHNheTwvaDM+PGEgY2xhc3M9ImRldGFpbHMiIGhyZWY9Ii95b3VyLXNheS9uZXdzLyI+VmlldyBtb3JlIHBvbGxzPC9hPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJ3aWRnZXRDb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0IHBvc3RNaW5pIHBvc3RNaW5pTGFuZHNjYXBlIHBvc3RZb3VyU2F5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcG9sbC1kcmluay1sZXNzLW1pbmltdW0tdW5pdHMtYWxjb2hvbC01NDIyMDc1LUFwcjIwMjEvIj48aW1nIHNyYz0iaHR0cHM6Ly9jMS50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvc2h1dHRlcnN0b2NrXzUyNjIwODcwNC0yOTB4ODAuanBnIiBjbGFzcz0iYXR0YWNobWVudC1zdXBlcl93aWRlXzEiIHdpZHRoPSIyOTAiIGhlaWdodD0iODAiIGFsdD0iUG9sbDogV291bGQgeW91IGRyaW5rIGxlc3MgaWYgYSBtaW5pbXVtIHVuaXQgcHJpY2luZyBmb3IgYWxjb2hvbCBpcyBicm91Z2h0IGluPyIgLz48L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgIDxoND48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3BvbGwtZHJpbmstbGVzcy1taW5pbXVtLXVuaXRzLWFsY29ob2wtNTQyMjA3NS1BcHIyMDIxLyI+UG9sbDogV291bGQgeW91IGRyaW5rIGxlc3MgaWYgYSBtaW5pbXVtIHVuaXQgcHJpY2luZyBmb3IgYWxjb2hvbCBpcyBicm91Z2h0IGluPzwvYT48L2g0PgogICAgICAgICAgICAgICAgPHA+V09VTEQgWU9VIERSSU5LIGxlc3MgaWYgdGhlIGdvdmVybm1lbnQgaW50cm9kdWNlZCBtaW5pbXVtIHVuaXQgcHJpY2luZyBmb3IgYWxjb2hvbD88L3A+CjxwPlRoZSBTdW5kYXkgSW5kZXBlbmRlbnQgcmVwb3J0ZWQgdGhhdCB0aGUgR292ZXJubWVudCBpcyB0b8KgaW50cm9kdWNlIG1pbmltdW0gdW5pdCBwcmljaW5nIG9uIGFsY29ob2wgd2l0aGluIHdlZWtzLCB3aGljaCB3b3VsZCBzZXQgYSBtaW5pbXVtIHByaWNlIG9mIDEwYyBwZXIgZ3JhbSBvZiBhbGNvaG9sLjwvcD4KPHA+VGhlIG1haW4gZHJpbmtzIHRoYXQgd2lsbCBpbmNyZWFzZSBpbiBwcmljZSBhcmUgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS93aGF0LWlzLW1pbmltdW0tdW5pdC1wcmljaW5nLTQ3MDk5MjAtSnVsMjAxOS8iPmNoZWFwIGRyaW5rcyB3aXRoIGEgaGlnaCBhbGNvaG9sIGNvbnRlbnQ8L2E+IOKAkyBzdWNoIGFzIHN1cGVybWFya2V0IG93bi1icmFuZHMgb2Ygc3Bpcml0cyAoVGVzY2/igJlzIE5pa2l0YSBJbXBlcmlhbCBWb2RrYSA3MDBtbCB3aWxsIGluY3JlYXNlIGZyb20g4oKsMTIuOTkgdG8g4oKsMjAuNzEpLiBBbiBhdmVyYWdlIGJvdHRsZSBvZiB3aW5lIGNhbuKAmXQgYmUgc29sZCBmb3IgbGVzcyB0aGFuIOKCrDcuNTAuwqBDaGVhcGVyIGJlZXJzIHN1Y2ggYXMgRHV0Y2ggR29sZCB3aWxsIGluY3JlYXNlIGJ5IDQ1YyBwZXIgY2FuIGluIGFuIGVpZ2h0IHBhY2suPC9wPgo8cD48L3A+CjxwPlNvLCB3ZeKAmXJlIGFza2luZzogd291bGQgeW91IGRyaW5rIGxlc3MgaWYgdGhlIEdvdmVybm1lbnQgaW50cm9kdWNlZCBhIG1pbmltdW0gdW5pdCBwcmljaW5nIGZvciBhbGNvaG9sPzxicj4KPGRpdiBjbGFzcz0iam91cm5hbF9wb2xsX2NvbnRhaW5lciIgaWQ9ImpfcC01NDIyMDc1IiA+PGRpdiBjbGFzcz0iaGlkZGVuX2Jsb2NrIGpvdXJuYWxfcG9sbF9yZXN1bHQgal9wX3Jlc3VsdC01NDIyMDc1Ij4KCiAgPGJyPgogIDxwPjxiPjxpPlBvbGwgUmVzdWx0czo8L2k+PC9iPjwvcD4KCiAgPGRpdiBpZD0ial9wX3BpZWNoYXJ0IiBjbGFzcz0ial9wX3BpZWNoYXJ0IiBkYXRhLW9wdGlvbnM9IiYjeDVCOyYjeDdCOyZxdW90O3F1ZXN0aW9uJnF1b3Q7JiN4M0E7JnF1b3Q7Tm8mcXVvdDssJnF1b3Q7Y291bnQmcXVvdDsmI3gzQTs4MTEyLCZxdW90O2JhY2tncm91bmRDb2xvdXImcXVvdDsmI3gzQTsmcXVvdDtmZjlhNjYmcXVvdDssJnF1b3Q7dGV4dENvbG91ciZxdW90OyYjeDNBOyZxdW90OzUwNTA1MCZxdW90OyYjeDdEOywmI3g3QjsmcXVvdDtxdWVzdGlvbiZxdW90OyYjeDNBOyZxdW90O1llcyZxdW90OywmcXVvdDtjb3VudCZxdW90OyYjeDNBOzkzNiwmcXVvdDtiYWNrZ3JvdW5kQ29sb3VyJnF1b3Q7JiN4M0E7JnF1b3Q7OWFjY2ZmJnF1b3Q7LCZxdW90O3RleHRDb2xvdXImcXVvdDsmI3gzQTsmcXVvdDs1MDUwNTAmcXVvdDsmI3g3RDssJiN4N0I7JnF1b3Q7cXVlc3Rpb24mcXVvdDsmI3gzQTsmcXVvdDtJJiN4MjA7ZG9uJiN4Mjc7dCYjeDIwO2tub3cmcXVvdDssJnF1b3Q7Y291bnQmcXVvdDsmI3gzQTs1OTMsJnF1b3Q7YmFja2dyb3VuZENvbG91ciZxdW90OyYjeDNBOyZxdW90O2NjZmU2NyZxdW90OywmcXVvdDt0ZXh0Q29sb3VyJnF1b3Q7JiN4M0E7JnF1b3Q7NTA1MDUwJnF1b3Q7JiN4N0Q7JiN4NUQ7Ij48L2Rpdj4KCiAgPGRpdiBjbGFzcz0ial9wX2xlZ2VuZCI+CgogICAgICAgICAgPGRpdiBjbGFzcz0ial9wX2xlZ2VuZF9vcHRpb24gY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9ImpfcF9sZWdlbmRfY29sb3IiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmY5YTY2Ij48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJqX3BfbGVnZW5kX2xhYmVsIj5ObyA8c3Bhbj4oODExMik8L3NwYW4+PC9kaXY+CiAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0ial9wX2xlZ2VuZF9vcHRpb24gY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9ImpfcF9sZWdlbmRfY29sb3IiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjOWFjY2ZmIj48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJqX3BfbGVnZW5kX2xhYmVsIj5ZZXMgPHNwYW4+KDkzNik8L3NwYW4+PC9kaXY+CiAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0ial9wX2xlZ2VuZF9vcHRpb24gY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9ImpfcF9sZWdlbmRfY29sb3IiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjY2NmZTY3Ij48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJqX3BfbGVnZW5kX2xhYmVsIj5JIGRvbiYjMDM5O3Qga25vdyA8c3Bhbj4oNTkzKTwvc3Bhbj48L2Rpdj4KICAgICAgPC9kaXY+CiAgICAKICA8L2Rpdj4KCjwvZGl2Pgo8ZGl2IGNsYXNzPSJqX3BfZm9ybS01NDIyMDc1IGhpZGRlbl9ibG9jayI+PGZvcm0gYWN0aW9uPSIvc3VibWl0LnBocCIgbWV0aG9kPSJwb3N0IiBjbGFzcz0ic2ltcGxlcG9sbCBmb3JtUG9sbCIgc3R5bGU9Im1hcmdpbi10b3A6MTBweCIgPjx1bD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24iIHZhbHVlPSJpbmxpbmVfcG9sbF92b3RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlZGlyZWN0IiB2YWx1ZT0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9wb2xsLWRyaW5rLWxlc3MtbWluaW11bS11bml0cy1hbGNvaG9sLTU0MjIwNzUtQXByMjAyMS8iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icG9sbCIgdmFsdWU9IjU0MjIwNzUiIC8+PGxpPjxpbnB1dCB0eXBlPSJyYWRpbyIgaWQ9InBvbGwtNTQyMjA3NS0wIiBuYW1lPSJ2b3RlIiB2YWx1ZT0iMCIgLz48bGFiZWwgZm9yPSJwb2xsLTU0MjIwNzUtMCI+WWVzPC9sYWJlbD48YnIgLz48L2xpPjxsaT48aW5wdXQgdHlwZT0icmFkaW8iIGlkPSJwb2xsLTU0MjIwNzUtMSIgbmFtZT0idm90ZSIgdmFsdWU9IjEiIC8+PGxhYmVsIGZvcj0icG9sbC01NDIyMDc1LTEiPk5vPC9sYWJlbD48YnIgLz48L2xpPjxsaT48aW5wdXQgdHlwZT0icmFkaW8iIGlkPSJwb2xsLTU0MjIwNzUtMiIgbmFtZT0idm90ZSIgdmFsdWU9IjIiIC8+PGxhYmVsIGZvcj0icG9sbC01NDIyMDc1LTIiPkkgZG9uJ3Qga25vdzwvbGFiZWw+PGJyIC8+PC9saT48L3VsPjxkaXYgY2xhc3M9InN1Ym1pdCIgLz48YnV0dG9uIGNsYXNzPSJidXR0b25Wb3RlIiB0eXBlPSJzdWJtaXQiPlZvdGU8L2J1dHRvbj48L2Rpdj48L2Zvcm0+PC9kaXY+PC9kaXY+PC9wPgo8cD48ZW0+V2l0aCByZXBvcnRpbmcgZnJvbSBTZWFuIE11cnJheS48L2VtPjwvcD4KPHA+PC9wPiAgICAgICAgICAgICAgICA8YnI+CiAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGFkYXRhIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaGFyZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2RpYWxvZy9mZWVkP2FwcF9pZD0xMTYxNDExMjE3NjgyMTUmZGlzcGxheT1wb3B1cCZsaW5rPWh0dHBzJTNBJTJGJTJGd3d3LnRoZWpvdXJuYWwuaWUlMkZwb2xsLWRyaW5rLWxlc3MtbWluaW11bS11bml0cy1hbGNvaG9sLTU0MjIwNzUtQXByMjAyMSUyRiZwaWN0dXJlPWh0dHBzJTNBJTJGJTJGYzIudGhlam91cm5hbC5pZSUyRm1lZGlhJTJGMjAyMSUyRjA0JTJGc2h1dHRlcnN0b2NrXzUyNjIwODcwNC0xOTd4MTk3LmpwZyZuYW1lPVBvbGwlM0ErV291bGQreW91K2RyaW5rK2xlc3MraWYrYSttaW5pbXVtK3VuaXQrcHJpY2luZytmb3IrYWxjb2hvbCtpcyticm91Z2h0K2luJTNGJmRlc2NyaXB0aW9uPVRoZSttYWluK2RyaW5rcyt0aGF0K3dpbGwraW5jcmVhc2UraW4rcHJpY2UrYXJlK2NoZWFwK2RyaW5rcyt3aXRoK2EraGlnaCthbGNvaG9sK2NvbnRlbnQuJm1lc3NhZ2U9JnJlZGlyZWN0X3VyaT1odHRwcyUzQSUyRiUyRnRoZWpvdXJuYWwuaWUlMkZ1dGlscyUyRmZiX3Bvc3QucGhwJTNGcF9pZCUzRDU0MjIwNzUgIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IlNoYXJlIG9uIEZhY2Vib29rIiBjbGFzcz0ib3Blbi13aW5kb3cgc29jaWFsIj48c3BhbiBjbGFzcz0iaWNvbiBpY29uRmFjZWJvb2siPjwvc3Bhbj4gU2hhcmU8c3BhbiBjbGFzcz0ibnVtYmVyIj4xOTwvc3Bhbj48L2E+IDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPWh0dHBzJTNBJTJGJTJGanJubC5pZSUyRjU0MjIwNzUmdGV4dD1Qb2xsJTNBK1dvdWxkK3lvdStkcmluaytsZXNzK2lmK2ErbWluaW11bSt1bml0K3ByaWNpbmcrZm9yK2FsY29ob2wraXMrYnJvdWdodCtpbiUzRislMjh2aWErJTQwdGhlam91cm5hbF9pZSUyOSZyZWxhdGVkPUB0aGVqb3VybmFsX2llIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IlR3ZWV0IHRoaXMiIGNsYXNzPSJvcGVuLXdpbmRvdyBzb2NpYWwgc2hhcmUtdHdpdHRlciB0d2l0dGVyLXR3ZWV0IGpybmwtdHdlZXQtNTQyMjA3NSI+PHNwYW4gY2xhc3M9Imljb24gaWNvblR3aXR0ZXIiPjwvc3Bhbj4gVHdlZXQ8L2E+IDwvc3Bhbj48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3BvbGwtZHJpbmstbGVzcy1taW5pbXVtLXVuaXRzLWFsY29ob2wtNTQyMjA3NS1BcHIyMDIxLyNjb21tZW50cyI+PHNwYW4gY2xhc3M9Imljb24gaWNvbkNvbW1lbnRWZXJ5UG9wdWxhciI+PC9zcGFuPiAxNDA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFkdmVydCBhZHNlcnZlcmFkIj4KPGRpdiBpZD0nZGl2LWdwdC1hZC0xMzY1MDkyNDA2MjEzLTAnPgo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+Cmdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpIHsgZ29vZ2xldGFnLmRpc3BsYXkoJ2Rpdi1ncHQtYWQtMTM2NTA5MjQwNjIxMy0wJyk7IH0pOwo8L3NjcmlwdD4KPC9kaXY+PC9kaXY+CjxkaXYgY2xhc3M9IndpZGdldCB3aWRnZXRPcGluaW9ucyI+CiAgICA8ZGl2IGNsYXNzPSJoZWFkIj4KICAgICAgICA8YSBocmVmPSIvcmVhZG1lLyIgY2xhc3M9InZvaWNlcy1iYW5uZXIiPgogICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS90aGVqb3VybmFsL3ZvaWNlcy1zbWFsbC5wbmciIC8+CiAgICAgICAgPC9hPgogICAgICAgIDxzdHJvbmc+U2hhcmUgeW91ciBzdG9yeTogPGEgaHJlZj0ibWFpbHRvOnZvaWNlc0B0aGVqb3VybmFsLmllIj52b2ljZXNAdGhlam91cm5hbC5pZTwvYT48L3N0cm9uZz4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0id2lkZ2V0Q29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkgcG9zdE1pbmlPcGluaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2YzLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9TY3JlZW4tU2hvdC0yMDIxLTA0LTA4LWF0LTA5LjE4LjIyLTEzM3gxMzMucG5nIiBoZWlnaHQ9IjYwIiB3aWR0aD0iNjAiIGFsdD0iQnJpYW4gUm93YW4iIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9hcmxlbmUtZm9zdGVyLWhlYXZlLTU0MjIwNjQtQXByMjAyMS8iPkJyaWFuIFJvd2FuOiBBcmxlbmUncyBmZWF0aGVycyBhcmUgcnVmZmxlZCB0b2RheSwgYnV0IHRoZSBEVVAgaXRzZWxmIGlzIHVuZGVyIHByZXNzdXJlPC9hPjwvaDU+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ5TGluZSI+QnkgQnJpYW4gUm93YW48L2Rpdj4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZXhjZXJwdCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9yZWFkbWUvYXJsZW5lLWZvc3Rlci1oZWF2ZS01NDIyMDY0LUFwcjIwMjEvIj5Gb3JtZXIgQkJDIGNvcnJlc3BvbmRlbnQgQnJpYW4gUm93YW4gbG9va3MgYXQgdGhlIGVtYmF0dGxlZCBEVVAgbGVhZGVyJiM4MjE3O3MgcG9zaXRpb24gdG9kYXkuPC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkgcG9zdE1pbmlPcGluaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2YzLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9Sb2lzaW4tT0RlYS0xMzN4MTMzLmpwZyIgaGVpZ2h0PSI2MCIgd2lkdGg9IjYwIiBhbHQ9IlLDs2lzw61uIE/igJlEZWEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9hcm1zLWNyaXNpcy1kb2N1bWVudGFyeS01NDIxNjIzLUFwcjIwMjEvIj5PcGluaW9uOiBSVMOJJ3MgR3VuUGxvdCBsb29rcyBiYWNrIGF0IHRoZSAxOTcwIEFybXMgQ3Jpc2lzIHdpdGggMjAyMSB2aXNpb248L2E+PC9oNT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnlMaW5lIj5CeSBSw7Npc8OtbiBP4oCZRGVhPC9kaXY+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImV4Y2VycHQiIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcmVhZG1lL2FybXMtY3Jpc2lzLWRvY3VtZW50YXJ5LTU0MjE2MjMtQXByMjAyMS8iPkd1blBsb3QgaXMgYSBuZXcgVFYgRG9jdW1lbnRhcnkgYW5kIHBvZGNhc3Qgc2VyaWVzIGZyb20gUlTDiSBvbiB0aGUgQXJtcyBDcmlzaXMgb2YgMTk3MC4gUmVzZWFyY2hlciBvbiB0aGUgVFYgZG9jdW1lbnRhcnksIFLDs2lzw61uIE/igJlEZWEgbG9va3MgYXQgdGhlIGNyaXNpcyBmaWZ0eSB5ZWFycyBvbiAmIzgyMzA7PC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkgcG9zdE1pbmlPcGluaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2YxLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9wYWRyYWljLWZvZ2FydHktMTMzeDEzMy5qcGciIGhlaWdodD0iNjAiIHdpZHRoPSI2MCIgYWx0PSJQw6FkcmFpYyBGb2dhcnR5IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9yZWFkbWUva2Vycnktd2lsZGZpcmVzLW1hbGljaW91cy1jbGltYXRlLWNoYW5nZS01NDIxMDI2LUFwcjIwMjEvIj5PcGluaW9uOiBBcyBoYWxmIEtpbGxhcm5leSBOYXRpb25hbCBQYXJrIGlzIGxvc3QsIHdlIG11c3QgZW5kIHRoZSBjeWNsZSBvZiBpbmZlcm5vczwvYT48L2g1PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJieUxpbmUiPkJ5IFDDoWRyYWljIEZvZ2FydHk8L2Rpdj4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZXhjZXJwdCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9yZWFkbWUva2Vycnktd2lsZGZpcmVzLW1hbGljaW91cy1jbGltYXRlLWNoYW5nZS01NDIxMDI2LUFwcjIwMjEvIj5Qw6FkcmFpYyBGb2dhcnR5IG9mIHRoZSBJcmlzaCBXaWxkbGlmZSBUcnVzdCBzYXlzIEdvdmVybm1lbnQgcG9saWN5LCBwYXJ0aWN1bGFybHkgYXJvdW5kIHRoZSBidXJuaW5nIG9mIGxhbmQgZm9yIGFncmljdWx0dXJlIG11c3QgYmUgb3ZlcmhhdWxlZC48L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdCBwb3N0TWluaSBwb3N0TWluaU9waW5pb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vZjIudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0LzIwMTZfU2Vhbl8xLTIxLTEzM3gxMzMuanBnIiBoZWlnaHQ9IjYwIiB3aWR0aD0iNjAiIGFsdD0iU2XDoW4gTW95bmloYW4iIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9vbGRlci1wZW9wbGUtY292aWQtMTktNTQyMDIzNS1BcHIyMDIxLyI+T3BpbmlvbjogT2xkZXIgcGVvcGxlIGhhdmUgbG9zdCB0aGVpciBjb25maWRlbmNlIGR1cmluZyBDb3ZpZCAtIHdlIGNhbm5vdCBmb3JnZXQgdGhlbTwvYT48L2g1PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJieUxpbmUiPkJ5IFNlw6FuIE1veW5paGFuPC9kaXY+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImV4Y2VycHQiIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcmVhZG1lL29sZGVyLXBlb3BsZS1jb3ZpZC0xOS01NDIwMjM1LUFwcjIwMjEvIj5DRU8gb2YgQUxPTkUgU2XDoW4gTW95bmloYW4gc2F5cyB3ZSBvd2UgaXQgdG8gb3VyIG9sZGVyIHBlb3BsZSB0byBwdXQgdGhlIGNvcnJlY3QgcGxhbnMgZm9yIHJlLWVtZXJnZW5jZS48L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdCBwb3N0TWluaSBwb3N0TWluaU9waW5pb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vZjMudGhlam91cm5hbC5pZS9tZWRpYS8yMDE4LzA5L21vbmV5LWRpYXJ5LXNlcmllcy1yaXZlci1pbWFnZTEtMTMzeDEzMy5wbmciIGhlaWdodD0iNjAiIHdpZHRoPSI2MCIgYWx0PSJUaGVKb3VybmFsLmllIHJlYWRlciIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcmVhZG1lL21vbmV5LWRpYXJpZXMtZmluYW5jZXMtNC01Mzk5NDE4LUFwcjIwMjEvIj5Nb25leSBEaWFyaWVzOiBBIHlvdXRoIHdvcmtlciBpbiBEdWJsaW4gb24g4oKsMzVLIGJhbGFuY2luZyBpbmNvbWUgYW5kIGhpZ2ggcmVudHM8L2E+PC9oNT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnlMaW5lIj5CeSBUaGVKb3VybmFsLmllIHJlYWRlcjwvZGl2PgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJleGNlcnB0IiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9tb25leS1kaWFyaWVzLWZpbmFuY2VzLTQtNTM5OTQxOC1BcHIyMDIxLyI+VGhpcyB3ZWVrLCBvdXIgcmVhZGVyIHNheXMgc2hlIGZpbmRzIER1YmxpbiB2ZXJ5IGV4cGVuc2l2ZSB0byBsaXZlIGluLCBzbyBzaGUmIzgyMTc7cyBoYXZpbmcgdG8gd2F0Y2ggaGVyIHNwZW5kaW5nIGNsb3NlbHkuPC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJ3aWRnZXQgd2lkZ2V0V2VhdGhlciI+CiAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uU2VwYXJhdG9yIj4KICAgICAgICA8aDM+CiAgICAgICAgICAgIER1YmxpbiBXZWF0aGVyCiAgICAgICAgPC9oMz4KICAgICAgICA8YSAgc3R5bGU9InRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7IiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3dlYXRoZXIvIiBjbGFzcz0iZGV0YWlscyI+Q2hhbmdlIGxvY2F0aW9uPC9hPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJ3ZWF0aGVyX2FkIj4KICAgICAgICAgICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJ3aWRnZXRDb250ZW50Ij4KICAgICAgICA8dWwgY2xhc3M9InRhYmxlY2VsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYm9yZGVyIj4KICAgICAgICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgV2VkbmVzZGF5ICAgICAgICAgICAgICAgIDwvc3Ryb25nPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvd2VhdGhlci1pY29ucy9zbWFsbC8xNC5wbmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgLz4KICAgICAgICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgUGFydGx5IHN1bm55IGFuZCBjb29sOyBhIHAubS4gc2hvd2VyICAgICAgICAgICAgICAgIDwvc3Ryb25nPgogICAgICAgICAgICAgICAgPGVtPgogICAgICAgICAgICAgICAgICAgIE1heDogMTAgJmRlZztDCiAgICAgICAgICAgICAgICA8L2VtPgogICAgICAgICAgICAgICAgPGVtPgogICAgICAgICAgICAgICAgICAgIE1pbjogMiAmZGVnO0MKICAgICAgICAgICAgICAgIDwvZW0+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYm9yZGVyIj4KICAgICAgICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgVGh1cnNkYXkgICAgICAgICAgICAgICAgPC9zdHJvbmc+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS93ZWF0aGVyLWljb25zL3NtYWxsLzEyLnBuZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiAvPgogICAgICAgICAgICAgICAgPHN0cm9uZz4KICAgICAgICAgICAgICAgICAgICBNb3N0bHkgY2xvdWR5LCBzaG93ZXJzIGFyb3VuZDsgY29vbCAgICAgICAgICAgICAgICA8L3N0cm9uZz4KICAgICAgICAgICAgICAgIDxlbT4KICAgICAgICAgICAgICAgICAgICBNYXg6IDEwICZkZWc7QwogICAgICAgICAgICAgICAgPC9lbT4KICAgICAgICAgICAgICAgIDxlbT4KICAgICAgICAgICAgICAgICAgICBNaW46IDEgJmRlZztDCiAgICAgICAgICAgICAgICA8L2VtPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJvcmRlciI+CiAgICAgICAgICAgICAgICA8c3Ryb25nPgogICAgICAgICAgICAgICAgICAgIEZyaWRheSAgICAgICAgICAgICAgICA8L3N0cm9uZz4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL3dlYXRoZXItaWNvbnMvc21hbGwvMDQucG5nIiB3aWR0aD0iNDAiIGhlaWdodD0iNDAiIC8+CiAgICAgICAgICAgICAgICA8c3Ryb25nPgogICAgICAgICAgICAgICAgICAgIENoaWxseSB3aXRoIHNvbWUgc3VuOyBhIHAubS4gc2hvd2VyICAgICAgICAgICAgICAgIDwvc3Ryb25nPgogICAgICAgICAgICAgICAgPGVtPgogICAgICAgICAgICAgICAgICAgIE1heDogMTAgJmRlZztDCiAgICAgICAgICAgICAgICA8L2VtPgogICAgICAgICAgICAgICAgPGVtPgogICAgICAgICAgICAgICAgICAgIE1pbjogMCAmZGVnO0MKICAgICAgICAgICAgICAgIDwvZW0+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2Rpdj48ZGl2IGlkPSJ0cmVuZGluZ0FydGljbGVzIiBjbGFzcz0idGFicyB1aS10YWJzIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIj4KICAgIDwhLS0gVGFicyAtLT4KICAgIDx1bCBjbGFzcz0ic2VjdGlvblNlcGFyYXRvciB0YWJNZW51IHVpLXRhYnMtbmF2IHVpLWhlbHBlci1yZXNldCB1aS1oZWxwZXItY2xlYXJmaXggdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItYWxsIj4KICAgICAgICA8bGk+PGEgdGl0bGU9Ik1vc3QgUG9wdWxhciIgaHJlZj0iI3RhYk1vc3RQb3B1bGFyIj5Nb3N0IFBvcHVsYXI8L2E+PC9saT4KICAgICAgICA8bGk+PGEgdGl0bGU9Ik1vc3QgQ29tbWVudGVkIiBocmVmPSIjdGFiTW9zdENvbW1lbnRlZCI+TW9zdCBDb21tZW50ZWQ8L2E+PC9saT4KICAgIDwvdWw+CiAgICA8IS0tIC9UYWJzIC0tPgoKICAgIDwhLS0gTW9zdCBwb3B1bGFyIC0tPgogICAgPGRpdiBpZD0idGFiTW9zdFBvcHVsYXIiIGNsYXNzPSJ3aWRnZXQgdGFiUGFuZWwiPgogICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb25TZXBhcmF0b3IiPjxoMz5Nb3N0IFBvcHVsYXI8L2gzPjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9IndpZGdldENvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWZpbml0aW9uIj5Nb3N0IHZpZXdlZCBhcnRpY2xlcyBpbiB0aGUgcGFzdCAyNCBob3VyczwvZGl2PgogICAgICAgICAgICA8IS0tIE1pbmkgcG9zdCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvaXJpc2gtY2l0aXplbi1tdXJkZXJlZC1pbi1idXJraW5hLWZhc28td29ya2luZy1pbi1hbnRpLXBvYWNoaW5nLTU0MjE2MDAtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYzIudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0L3JvcnkteW91bmctMi04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9idXJraW5hLWZhc28tYXR0YWNrL25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1cmtpbmEgRmFzbyBhdHRhY2sgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvaXJpc2gtY2l0aXplbi1tdXJkZXJlZC1pbi1idXJraW5hLWZhc28td29ya2luZy1pbi1hbnRpLXBvYWNoaW5nLTU0MjE2MDAtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElyaXNoIGNpdGl6ZW4ga2lsbGVkIGluIEJ1cmtpbmEgRmFzbyB3YXMgd29ya2luZyBpbiBhbnRpLXBvYWNoaW5nIG9wZXJhdGlvbnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdCBwb3N0TWluaSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9sYXRlc3QtY292aWQtMTktZmlndXJlcy1pcmVsYW5kLTUtNTQyMTE3Mi1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jMy50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvZGVwdC1vZi1oZWFsdGgtYnJpZWZpbmctMDAzLTMtODB4NTAuanBnIiBjbGFzcz0iYXR0YWNobWVudC1saXN0aW5nc18xIiB3aWR0aD0iODAiIGhlaWdodD0iNTAiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY292aWQtMTkvbmV3cy8iIGNsYXNzPSJ0YWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ292aWQtMTkgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvbGF0ZXN0LWNvdmlkLTE5LWZpZ3VyZXMtaXJlbGFuZC01LTU0MjExNzItQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcm9uYXZpcnVzOiBUZW4gZGVhdGhzIGFuZCA0MjYgbmV3IGNhc2VzIGNvbmZpcm1lZCBpbiBJcmVsYW5kICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvZGFtZS1zdHJlZXQtYXNzYXVsdC1pbnZlc3RpZ2F0aW9uLTU0MjE4MTItQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYzEudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0L2RhbWUtc3RyZWV0LTQ0NC04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kYW1lLXN0cmVldC9uZXdzLyIgY2xhc3M9InRhZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYW1lIFN0cmVldCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9kYW1lLXN0cmVldC1hc3NhdWx0LWludmVzdGlnYXRpb24tNTQyMTgxMi1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2FyZGEgaW52ZXN0aWdhdGlvbiBsYXVuY2hlZCBhZnRlciB3b21hbiAoMzBzKSBzZXJpb3VzbHkgYXNzYXVsdGVkIG9uIER1YmxpbidzIERhbWUgU3RyZWV0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0IHBvc3RNaW5pIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3BvbGwtZHJpbmstbGVzcy1taW5pbXVtLXVuaXRzLWFsY29ob2wtNTQyMjA3NS1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jMC50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvc2h1dHRlcnN0b2NrXzUyNjIwODcwNC04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii95b3VyLXNheS9uZXdzLyIgY2xhc3M9InRhZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3VyIFNheSAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9wb2xsLWRyaW5rLWxlc3MtbWluaW11bS11bml0cy1hbGNvaG9sLTU0MjIwNzUtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvbGw6IFdvdWxkIHlvdSBkcmluayBsZXNzIGlmIGEgbWluaW11bSB1bml0IHByaWNpbmcgZm9yIGFsY29ob2wgaXMgYnJvdWdodCBpbj8gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdCBwb3N0TWluaSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9nYXJkYS1nb3Zlcm5hbmNlLWFuZC1pcmlzaC1uYXRpb25hbC1zZWN1cml0eS1sYXdzLWNoYW5nZS1hbm5vdW5jZWQtYXQtY2FiaW5ldC01NDIxOTY2LUFwcjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2MzLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9qdXN0aWNlLW1pbmlzdGVyLWhlbGVuLW1jZW50ZWUtcHJlc3MtY29uZmVyZW5jZS0yLTgweDUwLmpwZyIgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdGluZ3NfMSIgd2lkdGg9IjgwIiBoZWlnaHQ9IjUwIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL25hdGlvbmFsLXNlY3VyaXR5L25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hdGlvbmFsIFNlY3VyaXR5ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2dhcmRhLWdvdmVybmFuY2UtYW5kLWlyaXNoLW5hdGlvbmFsLXNlY3VyaXR5LWxhd3MtY2hhbmdlLWFubm91bmNlZC1hdC1jYWJpbmV0LTU0MjE5NjYtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhYmluZXQgY2xlYXJzIHRoZSB3YXkgZm9yIHRoZSBiaWdnZXN0IHJlZm9ybSBvZiBuYXRpb25hbCBzZWN1cml0eSBpbiBhIGdlbmVyYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC9NaW5pIHBvc3QgLS0+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gL01vc3QgcG9wdWxhciAtLT4KCgogICAgPCEtLSBNb3N0IGNvbW1lbnRlZCAtLT4KICAgIDxkaXYgaWQ9InRhYk1vc3RDb21tZW50ZWQiIGNsYXNzPSJ3aWRnZXQgdGFiUGFuZWwiPgogICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb25TZXBhcmF0b3IiPjxoMz5Nb3N0IENvbW1lbnRlZDwvaDM+PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0Q29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlZmluaXRpb24iPk1vc3QgY29tbWVudGVkIGFydGljbGVzIGluIHRoZSBwYXN0IDMgZGF5czwvZGl2PgogICAgICAgICAgICA8IS0tIE1pbmkgcG9zdCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2VvZ2hhbi1tdXJwaHktcmVzaWducy01NDIwOTY3LUFwcjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jMi50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvNDAwOC1mZy1zb2NpYWwtaG91c2luZy01LTgweDUwLmpwZyIgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdGluZ3NfMSIgd2lkdGg9IjgwIiBoZWlnaHQ9IjUwIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZmluZS1nYWVsL25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbmUgR2FlbCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9lb2doYW4tbXVycGh5LXJlc2lnbnMtNTQyMDk2Ny1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWVyIGhvdXNpbmcgbWluaXN0ZXIgRW9naGFuIE11cnBoeSByZXNpZ25zIGFzIFREIGZvciBEdWJsaW4gQmF5IFNvdXRoICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2Nvcm9uYXZpcnVzLWxhdGVzdC1maWd1cmVzLTIyLTU0MTkxMDYtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2MzLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9kZXB0LW9mLWhlYWx0aC1icmllZmluZy0wMTItMi04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xhdGVzdC1maWd1cmVzL25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdCBmaWd1cmVzICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2Nvcm9uYXZpcnVzLWxhdGVzdC1maWd1cmVzLTIyLTU0MTkxMDYtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcm9uYXZpcnVzOiBGaXZlIGZ1cnRoZXIgZGVhdGhzIGFuZCA0NjEgbmV3IGNhc2VzIGNvbmZpcm1lZCBpbiBJcmVsYW5kICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGU0Mi5pZS9sZWluc3Rlci1tdW5zdGVyLXJhaW5ib3ctY3VwLTItNTQxOTM4Mi1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYzAudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0L2Nvbm9yLW11cnJheS1vbi1oaXMtd2F5LXRvLXNjb3JpbmctdHJ5LTgweDUwLmpwZyIgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdGluZ3NfMSIgd2lkdGg9IjgwIiBoZWlnaHQ9IjUwIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3VhZi9uZXdzLyIgY2xhc3M9InRhZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTVUFGICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGU0Mi5pZS9sZWluc3Rlci1tdW5zdGVyLXJhaW5ib3ctY3VwLTItNTQxOTM4Mi1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTXVycmF5IGRvdWJsZSBoZWxwcyBNdW5zdGVyIGZpbmFsbHkgZW5kIHRoZWlyIExlaW5zdGVyIGhvb2RvbyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0IHBvc3RNaW5pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9wb2xsLWRyaW5rLWxlc3MtbWluaW11bS11bml0cy1hbGNvaG9sLTU0MjIwNzUtQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2MwLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9zaHV0dGVyc3RvY2tfNTI2MjA4NzA0LTgweDUwLmpwZyIgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdGluZ3NfMSIgd2lkdGg9IjgwIiBoZWlnaHQ9IjUwIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIveW91ci1zYXkvbmV3cy8iIGNsYXNzPSJ0YWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBTYXkgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcG9sbC1kcmluay1sZXNzLW1pbmltdW0tdW5pdHMtYWxjb2hvbC01NDIyMDc1LUFwcjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb2xsOiBXb3VsZCB5b3UgZHJpbmsgbGVzcyBpZiBhIG1pbmltdW0gdW5pdCBwcmljaW5nIGZvciBhbGNvaG9sIGlzIGJyb3VnaHQgaW4/ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2Nvcm9uYXZpcnVzLWxhdGVzdC1maWd1cmVzLTI2LWFwcmlsLTU0MjAzNjktQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2MzLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9kZXB0LW9mLWhlYWx0aC1icmllZmluZy0wMDMtMi04MHg1MC5qcGciIGNsYXNzPSJhdHRhY2htZW50LWxpc3RpbmdzXzEiIHdpZHRoPSI4MCIgaGVpZ2h0PSI1MCIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xhdGVzdC1maWd1cmVzL25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdCBmaWd1cmVzICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2Nvcm9uYXZpcnVzLWxhdGVzdC1maWd1cmVzLTI2LWFwcmlsLTU0MjAzNjktQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcm9uYXZpcnVzOiBPbmUgZnVydGhlciBkZWF0aCBhbmQgNDM3IG5ldyBjYXNlcyBjb25maXJtZWQgaW4gSXJlbGFuZCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gL01pbmkgcG9zdCAtLT4gICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gL01vc3QgY29tbWVudGVkIC0tPgo8L2Rpdj4KPGRpdiBjbGFzcz0id2lkZ2V0IHdpZGdldEZyb21PdGhlclB1YmxpY2F0aW9uIHdpZGdldFRoZVNjb3JlIj4KICAgIDxkaXYgY2xhc3M9InNlY3Rpb25TZXBhcmF0b3IiPgogICAgICAgIDxoMz48YSBocmVmPSJodHRwczovL3d3dy50aGU0Mi5pZT91dG1fc291cmNlPXNpZGViYXIiPkZyb20gVGhlNDI8L2E+PC9oMz4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0id2lkZ2V0Q29udGVudCI+CiAgICAgICAgICAgIDwhLS0gUG9zdCBmcm9tIG90aGVyIHB1YmxpY2F0aW9uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkgcG9zdE1pbmlMYW5kc2NhcGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlNDIuaWUva2F0aWUtdGF5bG9yLXYtbmF0YXNoYS1qb25hcy01NDIxMjg2LUFwcjIwMjEvIj48aW1nIHNyYz0iaHR0cHM6Ly9jMC50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvcGppbWFnZS01LTEwNS0yOTB4ODAuanBnIiBhbHQ9IlNhbWUgYnV0IGRpZmZlcmVudDogVGF5bG9yIGFuZCBKb25hcyBwcm9taXNlIG1vcmUgZmlyZXdvcmtzIG5pbmUgeWVhcnMgb24gZnJvbSBPbHltcGljIGNsYXNzaWMiIGhlaWdodD0iODAiIHdpZHRoPSIyOTAiIC8+PC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlNDIuaWU/dXRtX3NvdXJjZT1zaWRlYmFyYmFjay10by10aGUtZnV0dXJlL25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICBCYWNrIFRvIFRoZSBGdXR1cmUgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICA8aDQ+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlNDIuaWUva2F0aWUtdGF5bG9yLXYtbmF0YXNoYS1qb25hcy01NDIxMjg2LUFwcjIwMjEvIj5TYW1lIGJ1dCBkaWZmZXJlbnQ6IFRheWxvciBhbmQgSm9uYXMgcHJvbWlzZSBtb3JlIGZpcmV3b3JrcyBuaW5lIHllYXJzIG9uIGZyb20gT2x5bXBpYyBjbGFzc2ljPC9hPjwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gL1Bvc3QgZnJvbSBvdGhlciBwdWJsaWNhdGlvbiAtLT4KCiAgICAgICAgICAgIDwhLS0gTWluaSBwb3N0IC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGU0Mi5pZS9sZWluc3Rlci1sYS1yb2NoZWxsZS1oYWxmYmFja3MtNTQyMjMyOS1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jMi50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvcGppbWFnZS0xMTA5LTgweDUwLmpwZyIgYWx0PSJMZWluc3RlciBsb3NlICdlbm9ybW91cyBleHBlcmllbmNlJyBhcyBMYSBSb2NoZWxsZSBoYWxmYmFja3MgcmV0dXJuIHRvIHRyYWluaW5nIiBoZWlnaHQ9IjUwIiB3aWR0aD0iODAiIC8+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlNDIuaWU/dXRtX3NvdXJjZT1zaWRlYmFycGxheW1ha2Vycy9uZXdzLyIgY2xhc3M9InRhZyI+CiAgICAgICAgICAgICAgICAgICAgcGxheW1ha2VycyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlNDIuaWUvbGVpbnN0ZXItbGEtcm9jaGVsbGUtaGFsZmJhY2tzLTU0MjIzMjktQXByMjAyMS8iPgogICAgICAgICAgICAgICAgICAgICAgICBMZWluc3RlciBsb3NlICdlbm9ybW91cyBleHBlcmllbmNlJyBhcyBMYSBSb2NoZWxsZSBoYWxmYmFja3MgcmV0dXJuIHRvIHRyYWluaW5nICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIC9NaW5pIHBvc3QgLS0+CiAgICAgICAgICAgIDwhLS0gTWluaSBwb3N0IC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBvc3QgcG9zdE1pbmkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGU0Mi5pZS9yaHlzLW1jY2xlbmFnaGFuLTUtNTQyMTEyNC1BcHIyMDIxLyI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9jMS50aGVqb3VybmFsLmllL21lZGlhLzIwMjEvMDQvcmh5cy1tY2NsZW5hZ2hhbi0xMi04MHg1MC5qcGciIGFsdD0iQSBFdXJvcGVhbiBDaGFtcHMgaW5qdXJ5IHNjYXJlLCB0aGUgJ2JpZ2dlciBwaWN0dXJlJyBvZiBPbHltcGljcyBhbmQgdmxvZ2dpbmcgbGlmZSBhcyBhbiBlbGl0ZSBhdGhsZXRlIiBoZWlnaHQ9IjUwIiB3aWR0aD0iODAiIC8+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlNDIuaWU/dXRtX3NvdXJjZT1zaWRlYmFyaW50ZXJ2aWV3L25ld3MvIiBjbGFzcz0idGFnIj4KICAgICAgICAgICAgICAgICAgICBJbnRlcnZpZXcgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZTQyLmllL3JoeXMtbWNjbGVuYWdoYW4tNS01NDIxMTI0LUFwcjIwMjEvIj4KICAgICAgICAgICAgICAgICAgICAgICAgQSBFdXJvcGVhbiBDaGFtcHMgaW5qdXJ5IHNjYXJlLCB0aGUgJ2JpZ2dlciBwaWN0dXJlJyBvZiBPbHltcGljcyBhbmQgdmxvZ2dpbmcgbGlmZSBhcyBhbiBlbGl0ZSBhdGhsZXRlICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIC9NaW5pIHBvc3QgLS0+CiAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBjbGFzcz0id2lkZ2V0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uU2VwYXJhdG9yIj4KICAgICAgICA8aDM+RG93bmxvYWQgb3VyIGFwcDwvaDM+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0Q29udGVudCIgc3R5bGU9ImhlaWdodDo3NXB4OyBtYXJnaW46MHB4OyAgcGFkZGluZzowcHgiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGVfYXBwX2xpbmsiIHN0eWxlPSJtYXJnaW4tdG9wOjVweDsgd2lkdGg6MTAwJSI+CgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZsb2F0OmxlZnQ7IG1hcmdpbi1sZWZ0OiAxNXB4Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vaWUvYXBwL3RoZWpvdXJuYWwtaWUvaWQ0MDkzNTk0OTE/bXQ9OCIgdGl0bGU9IkRvd25sb2FkIHRoZSBUaGVKb3VybmFsLmllIGZvciB0aGUgaVBob25lLCBpUGFkIGFuZCBpUG9kIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvaXR1bmVzX2ljb24ucG5nIiBjbGFzcz0iaXR1bmVzX2ltYWdlIiB3aWR0aD0iMTM0IiBoZWlnaHQ9IjQ1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tc3BhbiBjbGFzcz0iYXBwX2xpbmtfdGV4dCBhcHBfbGlua190ZXh0X2lvcyI+R2V0IG91ciBmcmVlIGFwcCBmb3I8YnIvPnRoZSBpUGhvbmUgJiBpUGFkPC9zcGFuLS0+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZsb2F0OnJpZ2h0OyBtYXJnaW4tcmlnaHQ6NXB4Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLmRpc3RpbGxlZG1lZGlhLnRoZWpvdXJuYWwiIHRpdGxlPSJEb3dubG9hZCB0aGUgVGhlSm91cm5hbC5pZSBmb3IgQW5kcm9pZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2IwLnRoZWpvdXJuYWwuaWUvZGVza3RvcC9pL2FuZHJvaWRfZ2V0X2l0X29uX3BsYXlfbG9nb19zbWFsbC5wbmciIGNsYXNzPSJpdHVuZXNfaW1hZ2UiIHdpZHRoPSIxMjkiIGhlaWdodD0iNDUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1zcGFuIGNsYXNzPSJhcHBfbGlua190ZXh0IGFwcF9saW5rX3RleHRfYW5kcm9pZCI+QWxzbyBhdmFpbGFibGUgaW48YnIvPnRoZSBBbmRyb2lkIE1hcmtldDwvc3Bhbi0tPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPCEtLWRpdiBzdHlsZT0icGFkZGluZzoxMHB4IDIwcHggMDsgY2xlYXI6Ym90aDsgbGluZS1oZWlnaHQ6MWVtIj4KICAgICAgICAgICAgPGgzPlRvcCBGZWF0dXJlczo8L2gzPgogICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICA8bGk+NXggZmFzdGVyIGxvYWRpbmcgb2YgYXJ0aWNsZXMKICAgICAgICAgICAgICAgIDxsaT5Jbi1mbGlnaHQvb2ZmbGluZSByZWFkaW5nCiAgICAgICAgICAgICAgICA8bGk+U3dpcGUgYmV0d2VlbiBhcnRpY2xlcyAmIHBob3RvcwogICAgICAgICAgICAgICAgPGxpPkxpdmUtc2NvcmVzIGZyb20gcnVnYnkgYW5kIGZvb3RiYWxsIG1hdGNoZXMKICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgIDwvZGl2LS0+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKPC9kaXY+CjwhLS0gL1NpZGViYXIgLS0+ICAgIDwhLS0gTGF0ZXN0IE9waW5pb25zIC0tPgogICAgPGRpdiBjbGFzcz0idHJlbmRpbmdUYWdzIHNwYW4tMTIiIGlkPSJzY3JvbGwtZm9vdGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uU2VwYXJhdG9yIj4KICAgICAgICAgICAgPGgzPlRyZW5kaW5nIE9waW5pb25zPC9oMz4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9sbyI+CiAgICAgICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImZvb3Rlcl9sb19hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2F1dGhvci9icmlhbi1yb3dhbi8iPjxpbWcgc3JjPSJodHRwczovL2YzLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9TY3JlZW4tU2hvdC0yMDIxLTA0LTA4LWF0LTA5LjE4LjIyLTEzM3gxMzMucG5nIiBhbHQ9IkJyaWFuIFJvd2FuIiB3aWR0aD0iNjAiIGhlaWdodD0iNjAiICBjbGFzcz0iZm9vdGVyX2xvX2F2YXRhciIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImZvb3Rlcl9sb19hcnRpY2xlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9yZWFkbWUvYXJsZW5lLWZvc3Rlci1oZWF2ZS01NDIyMDY0LUFwcjIwMjEvIiBjbGFzcz0iYXJ0aWNsZSI+QnJpYW4gUm93YW46IEFybGVuZSdzIGZlYXRoZXJzIGFyZSBydWZmbGVkIHRvZGF5LCBidXQgdGhlIERVUCBpdHNlbGYgaXMgdW5kZXIgcHJlc3N1cmU8L2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvYXV0aG9yL2JyaWFuLXJvd2FuLyIgY2xhc3M9ImF1dGhvciI+QnJpYW4gUm93YW48L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9sbyBmb290ZXJfbG9fMm5kX3JvdyI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZXhjZXJwdCIgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9yZWFkbWUvYXJsZW5lLWZvc3Rlci1oZWF2ZS01NDIyMDY0LUFwcjIwMjEvIj5Gb3JtZXIgQkJDIGNvcnJlc3BvbmRlbnQgQnJpYW4gUm93YW4gbG9va3MgYXQgdGhlIGVtYmF0dGxlZCBEVVAgbGVhZGVyJiM4MjE3O3MgcG9zaXRpb24gdG9kYXkuPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9sbyI+CiAgICAgICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImZvb3Rlcl9sb19hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2F1dGhvci9yw7Npc8Otbi1v4oCZZGVhLyI+PGltZyBzcmM9Imh0dHBzOi8vZjMudGhlam91cm5hbC5pZS9tZWRpYS8yMDIxLzA0L1JvaXNpbi1PRGVhLTEzM3gxMzMuanBnIiBhbHQ9IlLDs2lzw61uIE/igJlEZWEiIHdpZHRoPSI2MCIgaGVpZ2h0PSI2MCIgIGNsYXNzPSJmb290ZXJfbG9fYXZhdGFyIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZm9vdGVyX2xvX2FydGljbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9hcm1zLWNyaXNpcy1kb2N1bWVudGFyeS01NDIxNjIzLUFwcjIwMjEvIiBjbGFzcz0iYXJ0aWNsZSI+T3BpbmlvbjogUlTDiSdzIEd1blBsb3QgbG9va3MgYmFjayBhdCB0aGUgMTk3MCBBcm1zIENyaXNpcyB3aXRoIDIwMjEgdmlzaW9uPC9hPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2F1dGhvci9yw7Npc8Otbi1v4oCZZGVhLyIgY2xhc3M9ImF1dGhvciI+UsOzaXPDrW4gT+KAmURlYTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX2xvIGZvb3Rlcl9sb18ybmRfcm93Ij4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJleGNlcnB0IiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9hcm1zLWNyaXNpcy1kb2N1bWVudGFyeS01NDIxNjIzLUFwcjIwMjEvIj5HdW5QbG90IGlzIGEgbmV3IFRWIERvY3VtZW50YXJ5IGFuZCBwb2RjYXN0IHNlcmllcyBmcm9tIFJUw4kgb24gdGhlIEFybXMgQ3Jpc2lzIG9mIDE5NzAuIFJlc2VhcmNoZXIgb24gdGhlIFRWIGRvY3VtZW50YXJ5LCBSw7Npc8OtbiBP4oCZRGVhIGxvb2tzIGF0IHRoZSBjcmlzaXMgZmlmdHkgeWVhcnMgb24gJiM4MjMwOzwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfbG8iPgogICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb290ZXJfbG9fYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9hdXRob3IvcMOhZHJhaWMtZm9nYXJ0eS8iPjxpbWcgc3JjPSJodHRwczovL2YxLnRoZWpvdXJuYWwuaWUvbWVkaWEvMjAyMS8wNC9wYWRyYWljLWZvZ2FydHktMTMzeDEzMy5qcGciIGFsdD0iUMOhZHJhaWMgRm9nYXJ0eSIgd2lkdGg9IjYwIiBoZWlnaHQ9IjYwIiAgY2xhc3M9ImZvb3Rlcl9sb19hdmF0YXIiIC8+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb290ZXJfbG9fYXJ0aWNsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvcmVhZG1lL2tlcnJ5LXdpbGRmaXJlcy1tYWxpY2lvdXMtY2xpbWF0ZS1jaGFuZ2UtNTQyMTAyNi1BcHIyMDIxLyIgY2xhc3M9ImFydGljbGUiPk9waW5pb246IEFzIGhhbGYgS2lsbGFybmV5IE5hdGlvbmFsIFBhcmsgaXMgbG9zdCwgd2UgbXVzdCBlbmQgdGhlIGN5Y2xlIG9mIGluZmVybm9zPC9hPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2F1dGhvci9ww6FkcmFpYy1mb2dhcnR5LyIgY2xhc3M9ImF1dGhvciI+UMOhZHJhaWMgRm9nYXJ0eTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX2xvIGZvb3Rlcl9sb18ybmRfcm93Ij4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJleGNlcnB0IiBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL3JlYWRtZS9rZXJyeS13aWxkZmlyZXMtbWFsaWNpb3VzLWNsaW1hdGUtY2hhbmdlLTU0MjEwMjYtQXByMjAyMS8iPlDDoWRyYWljIEZvZ2FydHkgb2YgdGhlIElyaXNoIFdpbGRsaWZlIFRydXN0IHNheXMgR292ZXJubWVudCBwb2xpY3ksIHBhcnRpY3VsYXJseSBhcm91bmQgdGhlIGJ1cm5pbmcgb2YgbGFuZCBmb3IgYWdyaWN1bHR1cmUgbXVzdCBiZSBvdmVyaGF1bGVkLjwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgPCEtLSAvTGF0ZXN0IE9waW5pb25zIC0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gL01haW4gY29udGVudCAtLT4KICAgICAgICA8IS0tIEZvb3RlciAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXIgYmFja2dyb3VuZCI+CiAgICAgICAgICAgIDxkaXYgaWQ9InNlcnZlcl9pZGVudGlmaWVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJSZW5kZXJlZCBhdCAyMDIxLTA0LTI4IDE3OjU1OjM2IEV1cm9wZS9EdWJsaW4gKzAxMDAgRFNUOjAgb24gMGI3ZGMzZmJkM2ZiNjJlZWEudGhlam91cm5hbC5pZS5hd3MubG9jIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmIzg3MzQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuLTIiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJib3JkZXIiPkFib3V0IFVzPC9oMz4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9hYm91dC11cy8iPkFib3V0IFVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vY2FyZWVycy50aGVqb3VybmFsLmllLyI+V2UncmUgSGlyaW5nITwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2NvbnRhY3QvIj5Db250YWN0IFVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vYWR2ZXJ0aXNpbmcudGhlam91cm5hbC5pZSI+QWR2ZXJ0aXNlIFdpdGggVXM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuLTIiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJib3JkZXIiPkZvbGxvdyBVczwvaDM+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vdGhlam91cm5hbF9pZSI+VHdpdHRlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vdGhlam91cm5hbC5pZSI+RmFjZWJvb2s8L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuLTIiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJib3JkZXIiPkNvcnJlY3Rpb25zPC9oMz4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9ImxpZ2h0Ym94VHJpZ2dlciIgaHJlZj0iI1JlcG9ydENvbnRlbnQiIHRpdGxlPSJDb3JyZWN0aW9ucyI+UmVwb3J0IENvbnRlbnQ8L2E+PC9saT4KCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Bhbi0yIj4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iYm9yZGVyIj5Qb2xpY2llczwvaDM+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdGVybXMvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlcm1zIG9mIFVzZQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb29raWVzLXByaXZhY3ktcG9saWN5LyIgdGl0bGU9IkNvb2tpZXMgYW5kIFByaXZhY3kiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29va2llcyAmYW1wOyBQcml2YWN5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWR2ZXJ0aXNpbmctcG9saWN5LyIgdGl0bGU9IkFkdmVydGlzaW5nIj5BZHZlcnRpc2luZzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29tbWVudHMtcG9saWN5LyIgdGl0bGU9IkNvbW1lbnRzIj5Db21tZW50czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29weXJpZ2h0LXBvbGljeS8iIHRpdGxlPSJDb3B5cmlnaHQiPkNvcHlyaWdodDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29tcGV0aXRpb25zLXRlcm1zLWFuZC1jb25kaXRpb25zLyI+Q29tcGV0aXRpb248L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb3B5cmlnaHQgc3Bhbi00IGxhc3QiPgogICAgICAgICAgICAgICAgPHN0cm9uZz5Db250ZW50IGNvcHlyaWdodCAmY29weTsgSm91cm5hbCBNZWRpYSBMdGQuIDIwMjE8L3N0cm9uZz4KICAgICAgICAgICAgICAgIFJlZ2lzdGVyZWQgaW4gRHVibGluLCByZWdpc3RyYXRpb24gbnVtYmVyOiA0ODM2MjMuCiAgICAgICAgICAgICAgICBSZWdpc3RlcmVkIG9mZmljZTogM3JkIGZsb29yLCBMYXRpbiBIYWxsLCBHb2xkZW4gTGFuZSwgRHVibGluIDguCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWdhbCBib3JkZXIgc3Bhbi0xMiI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdQQ0ktZm9vdGVyLWxvZ28gUENJLWxvZ28nPjwvc3Bhbj4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgPGI+PGk+VGhlSm91cm5hbC5pZTwvaT48L2I+IHN1cHBvcnRzIHRoZSB3b3JrIG9mIHRoZSBQcmVzcyBDb3VuY2lsIG9mIElyZWxhbmQgYW5kIHRoZSBPZmZpY2Ugb2YgdGhlIFByZXNzIE9tYnVkc21hbiwgYW5kIG91ciBzdGFmZiBvcGVyYXRlIHdpdGhpbiB0aGUgQ29kZSBvZiBQcmFjdGljZS4gIFlvdSBjYW4gb2J0YWluIGEgY29weSBvZiB0aGUgQ29kZSwgb3IgY29udGFjdCB0aGUgQ291bmNpbCwgYXQgPGEgaHJlZj0naHR0cDovL3d3dy5wcmVzc2NvdW5jaWwuaWUnIHRhcmdldD0iX2JsYW5rIj53d3cucHJlc3Njb3VuY2lsLmllPC9hPiwgUEg6ICgwMSkgNjQ4OTEzMCwgTG8tQ2FsbCAxODkwIDIwOCAwODAgb3IgZW1haWw6IDxhIGhyZWY9Im1haWx0bzppbmZvQHByZXNzY291bmNpbC5pZSIgdGFyZ2V0PSJfYmxhbmsiPmluZm9AcHJlc3Njb3VuY2lsLmllPC9hPgogICAgICAgICAgICAgIDxicj4mbmJzcDsgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8cD5QbGVhc2Ugbm90ZSB0aGF0IFRoZUpvdXJuYWwuaWUgdXNlcyBjb29raWVzIHRvIGltcHJvdmUgeW91ciBleHBlcmllbmNlIGFuZCB0byBwcm92aWRlIHNlcnZpY2VzIGFuZCBhZHZlcnRpc2luZy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gY29va2llcyBwbGVhc2UgcmVmZXIgdG8gb3VyIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvY29va2llcy1wb2xpY3kiPmNvb2tpZXMgcG9saWN5PC9hPi48L3A+CiAgICAgICAgICAgIDxwPk5ld3MgaW1hZ2VzIHByb3ZpZGVkIGJ5IDxhIGhyZWY9Imh0dHBzOi8vd3d3LnByZXNzYXNzb2NpYXRpb24uY29tL2ltYWdlcy5odG1sIj5QcmVzcyBBc3NvY2lhdGlvbjwvYT4gYW5kIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnBob3RvY2FsbGlyZWxhbmQuY29tLyI+UGhvdG9jYWxsIElyZWxhbmQ8L2E+IHVubGVzcyBvdGhlcndpc2Ugc3RhdGVkLiBJcmlzaCBzcG9ydCBpbWFnZXMgcHJvdmlkZWQgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5waG8uaWUiPklucGhvIFBob3RvZ3JhcGh5PC9hPiB1bmxlc3Mgb3RoZXJ3aXNlIHN0YXRlZC4gV2lyZSBzZXJ2aWNlIHByb3ZpZGVkIGJ5IDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZWpvdXJuYWwuaWUvdGVybXMvP2M9MSNhcCI+QXNzb2NpYXRlZCBQcmVzczwvYT4uPC9wPgoKICAgICAgICAgICAgPHA+Sm91cm5hbCBNZWRpYSBkb2VzIG5vdCBjb250cm9sIGFuZCBpcyBub3QgcmVzcG9uc2libGUgZm9yIHVzZXIgY3JlYXRlZCBjb250ZW50LCBwb3N0cywgY29tbWVudHMsIHN1Ym1pc3Npb25zIG9yIHByZWZlcmVuY2VzLiBVc2VycyBhcmUgcmVtaW5kZWQgdGhhdCB0aGV5IGFyZSBmdWxseSByZXNwb25zaWJsZSBmb3IgdGhlaXIgb3duIGNyZWF0ZWQgY29udGVudCBhbmQgdGhlaXIgb3duIHBvc3RzLCBjb21tZW50cyBhbmQgc3VibWlzc2lvbnMgYW5kIGZ1bGx5IGFuZCBlZmZlY3RpdmVseSB3YXJyYW50IGFuZCBpbmRlbW5pZnkgSm91cm5hbCBNZWRpYSBpbiByZWxhdGlvbiB0byBzdWNoIGNvbnRlbnQgYW5kIHRoZWlyIGFiaWxpdHkgdG8gbWFrZSBzdWNoIGNvbnRlbnQsIHBvc3RzLCBjb21tZW50cyBhbmQgc3VibWlzc2lvbnMgYXZhaWxhYmxlLiBKb3VybmFsIE1lZGlhIGRvZXMgbm90IGNvbnRyb2wgYW5kIGlzIG5vdCByZXNwb25zaWJsZSBmb3IgdGhlIGNvbnRlbnQgb2YgZXh0ZXJuYWwgd2Vic2l0ZXMuPC9wPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmUiPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN3aXRjaGVyIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLz9zd2l0Y2hlcj10b3VjaCIgcmVsPSJub2ZvbGxvdyI+U3dpdGNoIHRvIE1vYmlsZSBTaXRlPC9hPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRpc3RpbGxlZCI+U2l0ZXM6CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS8iPlRoZUpvdXJuYWwuaWU8L2E+IHwKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5ub3Rld29ydGh5LmllLyI+Tm90ZXdvcnRoeTwvYT4gfAogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRoZTQyLmllLyI+VGhlNDI8L2E+IHwKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5ib2FyZHMuaWUvIj5Cb2FyZHMuaWU8L2E+IHwKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5hZHZlcnRzLmllLyI+QWR2ZXJ0cy5pZTwvYT4gfAogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhZnQuaWUvIj5EYWZ0LmllPC9hPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIC9Gb290ZXIgLS0+CgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gL01haW4gY29udGFpbmVyIC0tPgoKICAgICAgICA8IS0tIExpZ2h0Ym94ZXMgLS0+CiAgICA8ZGl2IGNsYXNzPSJsaWdodGJveGVzIj4KCjxkaXYgaWQ9IkNvbW1lbnRMb2dJbiIgY2xhc3M9ImxpZ2h0Ym94Ij4KICAgIDxoMSBjbGFzcz0iYm9yZGVyIj5QbGVhc2UgbG9nIGluIHRvIGNvbW1lbnQ8L2gxPgogICAgPGRpdiBjbGFzcz0ibG9naW4tYnV0dG9ucyBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBpZD0iYWx0LWxvZ2luLW1ldGhvZHMiPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmYWNlYm9va19jb25uZWN0X2J1dHRvbiBsYWJlbCIgaWQ9IiIgb25jbGljaz0ianJubF9zb2NpYWxfbG9naW4oJ2ZhY2Vib29rJywgdHJ1ZSwgZmFsc2UpIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvZmItbG9naW4ucG5nIiB3aWR0aD0iMTY5IiBoZWlnaHQ9IjIyIiAvPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0d2l0dGVyX2Nvbm5lY3RfYnV0dG9uIGxhYmVsIiBpZD0iIiBvbmNsaWNrPSJqcm5sX3NvY2lhbF9sb2dpbigndHdpdHRlcicsIHRydWUsIGZhbHNlKSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyB3aWR0aD0iMTUxIiBoZWlnaHQ9IjI0IiBib3JkZXI9IjAiIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS90dy1sb2dpbi5wbmciPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICA8aW1nIGlkPSJtYWluX3BhZ2VfbG9naW4iIGNsYXNzPSJsb2dpbl9sb2FkaW5nX3Rocm9iIiBzcmM9Ii8vYjAudGhlam91cm5hbC5pZS9kZXNrdG9wL2kvbG9hZGluZy5naWYiPgogICAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGlkPSJmZWVkLXBvcHVwIiBjbGFzcz0ibGlnaHRib3giPgoKICAgIDxoMSBjbGFzcz0iYm9yZGVyIj5SU1MgZmVlZHMgYXZhaWxhYmxlIGhlcmU6PC9oMT4KCiAgICA8ZGl2IGNsYXNzPSJmZWVkbGlzdCBib3JkZXIiPgo8cCBjbGFzcz0icnNzIj48YSBocmVmPSIvZmVlZC8iPlRoZUpvdXJuYWwuaWUgTGF0ZXN0IE5ld3MgRmVlZDwvYT48L3A+PHAgY2xhc3M9InJzcyI+PGEgaHJlZj0iL3RvcGljL2ZhY3RjaGVjay9mZWVkLyI+I2ZhY3RjaGVjayBMYXRlc3QgTmV3cyBGZWVkPC9hPjwvcD4gICAgPC9kaXY+Cgo8L2Rpdj4KPGRpdiBpZD0iUmVwb3J0Q29udGVudCIgY2xhc3M9ImxpZ2h0Ym94IHJlcG9ydENvbnRlbnQiPgogICAgPGZvcm0gaWQ9InJlcG9ydC1jb250ZW50LXBvcHVwLWZvcm0iIG1ldGhvZD0icG9zdCI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdXJyZW50X3BhZ2UiIHZhbHVlPSJodHRwczovL3d3dy50aGVqb3VybmFsLmllL2ZhY3RjaGVjay9uZXdzLyIgLz4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24iIHZhbHVlPSJwb3N0X3JlcG9ydF9jb250ZW50X2Zvcm0iIC8+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYXJ0aWNsZS1pZCIgdmFsdWU9IiIgLz4KICAgICAgICA8aDEgY2xhc3M9ImZvcm0tZWxlbWVudCBib3JkZXIiPlJlcG9ydCBhbiBlcnJvciwgb21pc3Npb24gb3IgcHJvYmxlbTo8L2gxPgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgbWVzc2FnZSI+CiAgICAgICAgICAgIDxkaXYgaWQ9IkFsZXJ0QXV0aG9yTWVzc2FnZSIgY2xhc3M9ImZpZWxkIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkFsZXJ0QXV0aG9yTWVzc2FnZSI+TWVzc2FnZTo8L2xhYmVsPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9Im1lc3NhZ2UiIGlkPSJBbGVydEF1dGhvck1lc3NhZ2UiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQiPgogICAgICAgICAgICA8bGFiZWwgZm9yPSJ5b3VyRW1haWwiPllvdXIgRW1haWwgKG9wdGlvbmFsKTwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgY2xhc3M9InRleHQiIGlkPSJ5b3VyRW1haWwiIG5hbWU9ImVtYWlsLWZyb20iIC8+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uU3VibWl0IiB0eXBlPSJzdWJtaXQiPlN1Ym1pdDwvYnV0dG9uPgogICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9sb2FkaW5nLmdpZiIgIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgIGNsYXNzPSJsb2FkaW5nIiBhbHQ9Ik9uZSBtb21lbnQuLi4iIC8+CiAgICAgICAgPC9kaXY+CgogICAgPC9mb3JtPgo8L2Rpdj4KPGRpdiBpZD0iRW1haWxBbGVydCIgY2xhc3M9ImxpZ2h0Ym94IGVtYWlsQWxlcnQiPgogICAgPGZvcm0gaWQ9ImNyZWF0ZS1lbWFpbC1hbGVydC1mb3JtIiBtZXRob2Q9InBvc3QiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3VycmVudF9wYWdlIiB2YWx1ZT0iaHR0cHM6Ly93d3cudGhlam91cm5hbC5pZS9mYWN0Y2hlY2svbmV3cy8iIC8+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0icG9zdF9jcmVhdGVfZW1haWxfYWxlcnRfZm9ybSIgLz4KICAgICAgICA8aDEgY2xhc3M9ImZvcm0tZWxlbWVudCBib3JkZXIiPkNyZWF0ZSBFbWFpbCBBbGVydDwvaDE+CiAgICAgICAgPHA+Q3JlYXRlIGFuIGVtYWlsIGFsZXJ0IGJhc2VkIG9uIHRoZSBjdXJyZW50IGFydGljbGU8L3A+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImFsZXJ0RW1haWxBZGRyZXNzIj5FbWFpbCBBZGRyZXNzPC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJ0ZXh0IiBpZD0iYWxlcnRFbWFpbEFkZHJlc3MiIG5hbWU9ImVtYWlsLWFkZHJlc3MiIC8+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgY2xhc3M9InJhZGlvIGVtYWlsQWxlcnQiIGlkPSJhbGVydEZyZXF1ZW5jeURhaWx5IiBuYW1lPSJhbGVydC1mcmVxdWVuY3kiIHZhbHVlPSJkYWlseSIgY2hlY2tlZD0iY2hlY2tlZCIgLz4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iYWxlcnRGcmVxdWVuY3lEYWlseSIgY2xhc3M9ImVtYWlsQWxlcnQiPk9uZSBlbWFpbCBldmVyeSBtb3JuaW5nPC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBjbGFzcz0icmFkaW8gZW1haWxBbGVydCIgaWQ9ImFsZXJ0RnJlcXVlbmN5SW5zdGFudGx5IiBuYW1lPSJhbGVydC1mcmVxdWVuY3kiIHZhbHVlPSJpbnN0YW50bHkiIC8+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImFsZXJ0RnJlcXVlbmN5SW5zdGFudGx5IiBjbGFzcz0iZW1haWxBbGVydCI+QXMgc29vbiBhcyBuZXcgYXJ0aWNsZXMgY29tZSBvbmxpbmU8L2xhYmVsPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpcC1hZGRyZXNzIiB2YWx1ZT0iMzcuMjI4LjIzMS41NCIgLz4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmZWVkLXVybCIgdmFsdWU9Ii90b3BpYy8vZmVlZCIgLz4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmZWVkLWRlc2NyaXB0aW9uIiB2YWx1ZT0iQXJ0aWNsZXMgcmVsYXRlZCB0byAiIC8+CgogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uU3VibWl0IiB0eXBlPSJzdWJtaXQiPlN1Ym1pdDwvYnV0dG9uPgogICAgICAgICAgICA8aW1nIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvaS9sb2FkaW5nLmdpZiIgIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgIGNsYXNzPSJsb2FkaW5nIiBhbHQ9Ik9uZSBtb21lbnQuLi4iIC8+CiAgICAgICAgPC9kaXY+CgogICAgPC9mb3JtPgo8L2Rpdj4KCjxkaXYgaWQ9IlRoYW5rcyIgY2xhc3M9ImxpZ2h0Ym94Ij4KICAgIDxoMSBpZD0idGhhbmtzLW1lc3NhZ2UiIHN0eWxlPSJjb2xvcjojY2MwMDAwIj48L2gxPgo8L2Rpdj4KPC9kaXY+CiAgICAgICAgPCEtLSAvTGlnaHRib3hlcyAtLT4KCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICB2YXIgX2FjID0gJ3RoZWpvdXJuYWwuaWUnOwogICAgICAgICAgICB2YXIgX3NpZCA9ICcyMzQ2MDQnOwogICAgICAgICAgICB2YXIgX3VuID0gJ3RoZWpvdXJuYWwuaWUnOwogICAgICAgICAgICB2YXIgX3BhID0gJzc2YWYwYjRkOGE2OTgzOWMwZDM2MWMwODYyZmQwZWQ4JzsKICAgICAgICA8L3NjcmlwdD4KCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9iMC50aGVqb3VybmFsLmllL2Rlc2t0b3AvanMvcGluZy4xLmpzP2FkVHlwZT1zYWxlIj48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oJCl7CiAgICAgICAgICAgICAgICBpZih3aW5kb3cuZmtqZXJiZ2tuZmJlID09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkLmdldCgnL2ludGVybmFsLnBocCcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3B1YmxpY2F0aW9uJyA6ICd0aGVqb3VybmFsJywKICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXRlJyA6IHRydWUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkLmdldCgnL2ludGVybmFsLnBocCcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3B1YmxpY2F0aW9uJyA6ICd0aGVqb3VybmFsJwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICA8L3NjcmlwdD4KICAgIDwvYm9keT4KPC9odG1sPgo=
  recorded_at: Wed, 28 Apr 2021 16:55:36 GMT
recorded_with: VCR 6.0.0
