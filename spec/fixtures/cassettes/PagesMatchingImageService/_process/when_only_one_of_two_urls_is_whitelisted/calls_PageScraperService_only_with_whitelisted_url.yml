---
http_interactions:
- request:
    method: get
    uri: http://organisation.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Typhoeus - https://github.com/typhoeus/typhoeus
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 28 Apr 2021 16:55:35 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '28595'
      Connection:
      - keep-alive
      X-Hacker:
      - If you're reading this, you should visit wpvip.com/careers and apply to join
        the fun, mention this header.
      X-Powered-By:
      - WordPress VIP <https://wpvip.com>
      Host-Header:
      - a9130478a60e5f9135f765b23f26593b
      Content-Security-Policy:
      - 'default-src ''self''; script-src ''self'' http://* https://* ''unsafe-inline'';
        connect-src ''self'' http://* https://* wss://*; img-src ''self'' data: http://*
        https://*; style-src ''self'' http://* https://* ''unsafe-inline''; base-uri
        ''self''; form-action ''self'' http://* https://*; font-src ''self'' data:
        http://* https://*; frame-src ''self'' data: http://* https://*; media-src
        ''self'' data: http://* https://*'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Xss-Protection:
      - 1; mode=block
      Link:
      - "<https://organisation.com/>; rel=shortlink"
      - <https://organisation.com/wp-json/>; rel="https://api.w.org/"
      - <https://organisation.com/wp-json/wp/v2/pages/163>; rel="alternate"; type="application/json"
      X-Rq:
      - lhr2 109 63 3236
      Cache-Control:
      - max-age=300, must-revalidate
      Age:
      - '1043'
      X-Cache:
      - hit
      Vary:
      - Accept-Encoding
      Accept-Ranges:
      - bytes
      Strict-Transport-Security:
      - max-age=31536000;includeSubdomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuLVVTIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0idXNlci1zY2FsYWJsZT1ubywgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIG1pbmltdW0tc2NhbGU9MSwgd2lkdGg9ZGV2aWNlLXdpZHRoLCBzaHJpbmstdG8tZml0PW5vIj4KICAgIDxsaW5rIHJlbD0icHJvZmlsZSIgaHJlZj0iaHR0cHM6Ly9nbXBnLm9yZy94Zm4vMTEiPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTgweDE4MCIgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vd3AtY29udGVudC90aGVtZXMvc3RvcnlmdWwvYXNzZXRzL2ltYWdlcy9mYXZpY29uL2FwcGxlLXRvdWNoLWljb24ucG5nIj4KICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMzJ4MzIiIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL3dwLWNvbnRlbnQvdGhlbWVzL3N0b3J5ZnVsL2Fzc2V0cy9pbWFnZXMvZmF2aWNvbi9mYXZpY29uLTMyeDMyLnBuZyI+CiAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgc2l6ZXM9IjE2eDE2IiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1jb250ZW50L3RoZW1lcy9zdG9yeWZ1bC9hc3NldHMvaW1hZ2VzL2Zhdmljb24vZmF2aWNvbi0xNngxNi5wbmciPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiMwZjE0MmMiPgogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMwZjE0MmMiPgoJPG1ldGEgbmFtZT0ncm9ib3RzJyBjb250ZW50PSdtYXgtaW1hZ2UtcHJldmlldzpsYXJnZScgLz4KCgk8IS0tIFRoaXMgc2l0ZSBpcyBvcHRpbWl6ZWQgd2l0aCB0aGUgWW9hc3QgU0VPIFByZW1pdW0gcGx1Z2luIHYxNS41IC0gaHR0cHM6Ly95b2FzdC5jb20vd29yZHByZXNzL3BsdWdpbnMvc2VvLyAtLT4KCTx0aXRsZT5TdG9yeWZ1bCAtIEEgTmV3cyBhbmQgSW50ZWxsaWdlbmNlIEFnZW5jeTwvdGl0bGU+Cgk8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iU3RvcnlmdWwgaXMgYSBuZXdzIGFuZCBpbnRlbGxpZ2VuY2UgYWdlbmN5IHRoYXQgbWFrZSBzZW5zZSBvZiB0aGUgaW5mb3JtYXRpb24gZW52aXJvbm1lbnQgZm9yIG5ld3MgYW5kIGJ1c2luZXNzIHBhcnRuZXJzLiIgLz4KCTxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0iaW5kZXgsIGZvbGxvdywgbWF4LXNuaXBwZXQ6LTEsIG1heC1pbWFnZS1wcmV2aWV3OmxhcmdlLCBtYXgtdmlkZW8tcHJldmlldzotMSIgLz4KCTxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS8iIC8+Cgk8bWV0YSBwcm9wZXJ0eT0ib2c6bG9jYWxlIiBjb250ZW50PSJlbl9VUyIgLz4KCTxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIiAvPgoJPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJTdG9yeWZ1bCAtIEEgTmV3cyBhbmQgSW50ZWxsaWdlbmNlIEFnZW5jeSIgLz4KCTxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iU3RvcnlmdWwgaXMgYSBuZXdzIGFuZCBpbnRlbGxpZ2VuY2UgYWdlbmN5IHRoYXQgbWFrZSBzZW5zZSBvZiB0aGUgaW5mb3JtYXRpb24gZW52aXJvbm1lbnQgZm9yIG5ld3MgYW5kIGJ1c2luZXNzIHBhcnRuZXJzLiIgLz4KCTxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vc3RvcnlmdWwuY29tLyIgLz4KCTxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IlN0b3J5ZnVsIiAvPgoJPG1ldGEgcHJvcGVydHk9ImFydGljbGU6cHVibGlzaGVyIiBjb250ZW50PSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vU3RvcnlmdWwiIC8+Cgk8bWV0YSBwcm9wZXJ0eT0iYXJ0aWNsZTptb2RpZmllZF90aW1lIiBjb250ZW50PSIyMDIwLTA5LTE4VDEwOjUyOjIyKzAwOjAwIiAvPgoJPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wOS9Ib21lLU5ld3MtQ29udGVudC1sb2dvLnN2ZyIgLz4KCTxtZXRhIG5hbWU9InR3aXR0ZXI6Y2FyZCIgY29udGVudD0ic3VtbWFyeV9sYXJnZV9pbWFnZSIgLz4KCTxtZXRhIG5hbWU9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iQHN0b3J5ZnVsIiAvPgoJPG1ldGEgbmFtZT0idHdpdHRlcjpsYWJlbDEiIGNvbnRlbnQ9IkVzdC4gcmVhZGluZyB0aW1lIj4KCTxtZXRhIG5hbWU9InR3aXR0ZXI6ZGF0YTEiIGNvbnRlbnQ9IjAgbWludXRlcyI+Cgk8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iIGNsYXNzPSJ5b2FzdC1zY2hlbWEtZ3JhcGgiPnsiQGNvbnRleHQiOiJodHRwczovL3NjaGVtYS5vcmciLCJAZ3JhcGgiOlt7IkB0eXBlIjoiV2ViU2l0ZSIsIkBpZCI6Imh0dHBzOi8vc3RvcnlmdWwuY29tLyN3ZWJzaXRlIiwidXJsIjoiaHR0cHM6Ly9zdG9yeWZ1bC5jb20vIiwibmFtZSI6IlN0b3J5ZnVsIiwiZGVzY3JpcHRpb24iOiJUaGUgV29ybGQmIzAzOTtzIFNvY2lhbCBNZWRpYSBJbnRlbGxpZ2VuY2UgQWdlbmN5IiwicG90ZW50aWFsQWN0aW9uIjpbeyJAdHlwZSI6IlNlYXJjaEFjdGlvbiIsInRhcmdldCI6Imh0dHBzOi8vc3RvcnlmdWwuY29tLz9zPXtzZWFyY2hfdGVybV9zdHJpbmd9IiwicXVlcnktaW5wdXQiOiJyZXF1aXJlZCBuYW1lPXNlYXJjaF90ZXJtX3N0cmluZyJ9XSwiaW5MYW5ndWFnZSI6ImVuLVVTIn0seyJAdHlwZSI6IkltYWdlT2JqZWN0IiwiQGlkIjoiaHR0cHM6Ly9zdG9yeWZ1bC5jb20vI3ByaW1hcnlpbWFnZSIsImluTGFuZ3VhZ2UiOiJlbi1VUyIsInVybCI6Imh0dHBzOi8vc3RvcnlmdWwuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA5L0hvbWUtTmV3cy1Db250ZW50LWxvZ28uc3ZnIn0seyJAdHlwZSI6IldlYlBhZ2UiLCJAaWQiOiJodHRwczovL3N0b3J5ZnVsLmNvbS8jd2VicGFnZSIsInVybCI6Imh0dHBzOi8vc3RvcnlmdWwuY29tLyIsIm5hbWUiOiJTdG9yeWZ1bCAtIEEgTmV3cyBhbmQgSW50ZWxsaWdlbmNlIEFnZW5jeSIsImlzUGFydE9mIjp7IkBpZCI6Imh0dHBzOi8vc3RvcnlmdWwuY29tLyN3ZWJzaXRlIn0sInByaW1hcnlJbWFnZU9mUGFnZSI6eyJAaWQiOiJodHRwczovL3N0b3J5ZnVsLmNvbS8jcHJpbWFyeWltYWdlIn0sImRhdGVQdWJsaXNoZWQiOiIyMDE5LTEwLTAyVDExOjI2OjE2KzAwOjAwIiwiZGF0ZU1vZGlmaWVkIjoiMjAyMC0wOS0xOFQxMDo1MjoyMiswMDowMCIsImRlc2NyaXB0aW9uIjoiU3RvcnlmdWwgaXMgYSBuZXdzIGFuZCBpbnRlbGxpZ2VuY2UgYWdlbmN5IHRoYXQgbWFrZSBzZW5zZSBvZiB0aGUgaW5mb3JtYXRpb24gZW52aXJvbm1lbnQgZm9yIG5ld3MgYW5kIGJ1c2luZXNzIHBhcnRuZXJzLiIsImluTGFuZ3VhZ2UiOiJlbi1VUyIsInBvdGVudGlhbEFjdGlvbiI6W3siQHR5cGUiOiJSZWFkQWN0aW9uIiwidGFyZ2V0IjpbImh0dHBzOi8vc3RvcnlmdWwuY29tLyJdfV19XX08L3NjcmlwdD4KCTwhLS0gLyBZb2FzdCBTRU8gUHJlbWl1bSBwbHVnaW4uIC0tPgoKCjxsaW5rIHJlbD0nZG5zLXByZWZldGNoJyBocmVmPScvL3VucGtnLmNvbScgLz4KPGxpbmsgcmVsPSdkbnMtcHJlZmV0Y2gnIGhyZWY9Jy8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tJyAvPgo8bGluayByZWw9J2Rucy1wcmVmZXRjaCcgaHJlZj0nLy9nb29nbGUuY29tJyAvPgo8bGluayByZWw9J2Rucy1wcmVmZXRjaCcgaHJlZj0nLy9zLncub3JnJyAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgdHlwZT0iYXBwbGljYXRpb24vcnNzK3htbCIgdGl0bGU9IlN0b3J5ZnVsICZyYXF1bzsgRmVlZCIgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vZmVlZC8iIC8+CjxsaW5rIHJlbD0iYWx0ZXJuYXRlIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIiB0aXRsZT0iU3RvcnlmdWwgJnJhcXVvOyBDb21tZW50cyBGZWVkIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS9jb21tZW50cy9mZWVkLyIgLz4KPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyBpZD0nYWxsLWNzcy0wJyBocmVmPSdodHRwczovL3N0b3J5ZnVsLmNvbS9fc3RhdGljLz8/LWVKeVYwYzBPd2lBTUIvQVhFbkNKTHU1Z2ZCWmduYUo4U1VzbWJ5OFRUMTRNeDVML3IyMktXQ016WHRzOEF3cU5LR2FESkpRTitzR3NVVW1tSXBDS0JlNk01eld3RTFYbzRBazhDYnFCcXc0cHBMSmtLeVFpVU91alFpQ2tKR012MUxtK3VoNngxQWlUSzJCdzNXdHVGditDenoyK0lOVk16NFQ3TTBNcVhMM1FtaG5TWDlxdS9adHltVVdicjhiWGhrQlIxdStaK05nR3RIb2pGM2NleHVGMDNBL1RkSGdEUFQ2em9RPT0nIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPgo8c3R5bGUgaWQ9J3dwLWJsb2NrLWxpYnJhcnktaW5saW5lLWNzcyc+Ci5oYXMtdGV4dC1hbGlnbi1qdXN0aWZ5e3RleHQtYWxpZ246anVzdGlmeTt9Cjwvc3R5bGU+CjxzY3JpcHQgZGVmZXI9ImRlZmVyIiBzcmM9J2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtODgzNjU1NTEtMSYjMDM4O3Zlcj01LjcuMScgaWQ9J2dvb2dsZS1hbmFseXRpYy1qcyc+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9J2dvb2dsZS1hbmFseXRpYy1qcy1hZnRlcic+CndpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdOwogICAgICBmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9CiAgICAgIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7CiAgICAKICAgICAgZ3RhZygnY29uZmlnJywgJ1VBLTg4MzY1NTUxLTEnKTsKPC9zY3JpcHQ+CjxsaW5rIHJlbD0iaHR0cHM6Ly9hcGkudy5vcmcvIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1qc29uLyIgLz48bGluayByZWw9ImFsdGVybmF0ZSIgdHlwZT0iYXBwbGljYXRpb24vanNvbiIgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vd3AtanNvbi93cC92Mi9wYWdlcy8xNjMiIC8+PGxpbmsgcmVsPSJFZGl0VVJJIiB0eXBlPSJhcHBsaWNhdGlvbi9yc2QreG1sIiB0aXRsZT0iUlNEIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS94bWxycGMucGhwP3JzZCIgLz4KPGxpbmsgcmVsPSJ3bHdtYW5pZmVzdCIgdHlwZT0iYXBwbGljYXRpb24vd2x3bWFuaWZlc3QreG1sIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1pbmNsdWRlcy93bHdtYW5pZmVzdC54bWwiIC8+IAo8bWV0YSBuYW1lPSJnZW5lcmF0b3IiIGNvbnRlbnQ9IldvcmRQcmVzcyA1LjcuMSIgLz4KPGxpbmsgcmVsPSdzaG9ydGxpbmsnIGhyZWY9J2h0dHBzOi8vc3RvcnlmdWwuY29tLycgLz4KPGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL2pzb24rb2VtYmVkIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1qc29uL29lbWJlZC8xLjAvZW1iZWQ/dXJsPWh0dHBzJTNBJTJGJTJGc3RvcnlmdWwuY29tJTJGIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgdHlwZT0idGV4dC94bWwrb2VtYmVkIiBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1qc29uL29lbWJlZC8xLjAvZW1iZWQ/dXJsPWh0dHBzJTNBJTJGJTJGc3RvcnlmdWwuY29tJTJGJiMwMzg7Zm9ybWF0PXhtbCIgLz4KICAgICAgICAgICAgICAgIDxzdHlsZSBpZD0iY3RjYy1jc3MiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0ic2NyZWVuIj4nOwogICAgICAgICAgICAgICAgICAgICNjYXRhcHVsdC1jb29raWUtYmFyIHsKICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogOTk5OTk7CiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMDAwMDAwOwogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5OwogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDsKCQkJCQlyaWdodDogMjBweDsKCQkJCQlib3R0b206IDYlOwoJCQkJCXdpZHRoOiAzMDBweDsgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgI2NhdGFwdWx0LWNvb2tpZS1iYXIgYSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMDAwMDAwOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgI2NhdGFwdWx0LWNvb2tpZS1iYXIgLnhfY2xvc2Ugc3BhbiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGJ1dHRvbiNjYXRhcHVsdENvb2tpZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IDsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IDsKICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDA7IHBhZGRpbmc6IDZweCA5cHg7IGJvcmRlci1yYWRpdXM6IDNweDsgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgI2NhdGFwdWx0LWNvb2tpZS1iYXIgaDMgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC5oYXMtY29va2llLWJhciAjY2F0YXB1bHQtY29va2llLWJhciB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDk5OXB4OwogICAgICAgICAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OiAzMHB4OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDwvc3R5bGU+CgkJCQk8c3R5bGUgdHlwZT0ndGV4dC9jc3MnPmltZyN3cHN0YXRze2Rpc3BsYXk6bm9uZX08L3N0eWxlPgoJCTwvaGVhZD4KPGJvZHkgY2xhc3M9ImhvbWUgcGFnZS10ZW1wbGF0ZS1kZWZhdWx0IHBhZ2UgcGFnZS1pZC0xNjMiPgo8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4NCjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOg0KbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLA0Kaj1kLmNyZWF0ZUVsZW1lbnQocyksZGw9bCE9J2RhdGFMYXllcic/JyZhbXA7bD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQ0KJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOw0KfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tTUNRWlIzNCcpOzwvc2NyaXB0Pg0KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPg0KDQo8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPg0KPG5vc2NyaXB0PjxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1NQ1FaUjM0IiBoZWlnaHQ9IjAiIHdpZHRoPSIwIiBzdHlsZT0iZGlzcGxheTpub25lO3Zpc2liaWxpdHk6aGlkZGVuIj48L2lmcmFtZT48L25vc2NyaXB0Pg0KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+PGRpdiBpZD0icGFnZSIgY2xhc3M9InNpdGUiPgogICAgPGEgY2xhc3M9InNraXAtbGluayBzY3JlZW4tcmVhZGVyLXRleHQiIGhyZWY9IiNjb250ZW50Ij5Ta2lwIHRvIGNvbnRlbnQ8L2E+CiAgICA8aGVhZGVyIGlkPSJtYXN0aGVhZCIgY2xhc3M9InNpdGUtaGVhZGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpdGUtYnJhbmRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS8iIHJlbD0iaG9tZSI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxvZ28iIHNyYz0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTEvbG9nby1zdG9yeWZ1bC5zdmciIGFsdD0ibG9nbyIvPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLnNpdGUtYnJhbmRpbmcgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMCI+CiAgICAgICAgICAgICAgICAgICAgPG5hdiBpZD0ic2l0ZS1uYXZpZ2F0aW9uIiBjbGFzcz0ibWFpbi1uYXZpZ2F0aW9uIGNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyIGNvbGxhcHNlZCIgdHlwZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjbmF2aWdhdGlvbiIgYXJpYS1jb250cm9scz0ibmF2YmFyTmF2RHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIgdG9wLWJhciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIG1pZGRsZS1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciBib3R0b20tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIj4KCQkJCQkJCTxkaXYgY2xhc3M9Im1lbnUtbWFpbi1jb250YWluZXIiPjx1bCBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHBzOi8vd3d3LnNjaGVtYS5vcmcvU2l0ZU5hdmlnYXRpb25FbGVtZW50IiBpZD0ibWFpbi1tZW51IiBjbGFzcz0ibWVudSI+PGxpIGlkPSJtZW51LWl0ZW0tMjMyNDYiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0taGFzLWNoaWxkcmVuIG1lbnUtaXRlbS0yMzI0NiI+PGEgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vbmV3cy8iPk5ld3M8L2E+Cjx1bCBjbGFzcz0ic3ViLW1lbnUiPgoJPGxpIGlkPSJtZW51LWl0ZW0tMjMyNDkiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tMjMyNDkiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL25ld3MvbmV3c3dpcmUvIj5OZXdzd2lyZTwvYT48L2xpPgoJPGxpIGlkPSJtZW51LWl0ZW0tMjMyNDgiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tMjMyNDgiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL25ld3MvbGljZW5zaW5nLWFuZC1hZHZlcnRpc2luZy8iPkxpY2Vuc2luZyAmIzAzODsgQWR2ZXJ0aXNpbmc8L2E+PC9saT4KCTxsaSBpZD0ibWVudS1pdGVtLTIzMjQ3IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTIzMjQ3Ij48YSBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS9uZXdzL25ld3MtaW52ZXN0aWdhdGlvbnMvIj5OZXdzIEludmVzdGlnYXRpb25zPC9hPjwvbGk+CjwvdWw+CjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTIzMjUwIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLWhhcy1jaGlsZHJlbiBtZW51LWl0ZW0tMjMyNTAiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL2ludGVsbGlnZW5jZS8iPkludGVsbGlnZW5jZTwvYT4KPHVsIGNsYXNzPSJzdWItbWVudSI+Cgk8bGkgaWQ9Im1lbnUtaXRlbS0yMzI1MyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS0yMzI1MyI+PGEgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vaW50ZWxsaWdlbmNlL3JlcG9ydGluZy8iPlJlcG9ydGluZzwvYT48L2xpPgoJPGxpIGlkPSJtZW51LWl0ZW0tMjMyNTIiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tMjMyNTIiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL2ludGVsbGlnZW5jZS9tZXRob2RvbG9neS8iPk1ldGhvZG9sb2d5PC9hPjwvbGk+Cgk8bGkgaWQ9Im1lbnUtaXRlbS0yMzI1MSIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS0yMzI1MSI+PGEgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vaW50ZWxsaWdlbmNlL3RlY2hub2xvZ3kvIj5UZWNobm9sb2d5PC9hPjwvbGk+CjwvdWw+CjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTIwNjM5IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLWhhcy1jaGlsZHJlbiBtZW51LWl0ZW0tMjA2MzkiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL2Fib3V0LyI+QWJvdXQ8L2E+Cjx1bCBjbGFzcz0ic3ViLW1lbnUiPgoJPGxpIGlkPSJtZW51LWl0ZW0tMjA2MDQiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tMjA2MDQiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL3ByZXNzLyI+UHJlc3M8L2E+PC9saT4KCTxsaSBpZD0ibWVudS1pdGVtLTIwNTg0IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTIwNTg0Ij48YSBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS9jYXJlZXJzLyI+Q2FyZWVyczwvYT48L2xpPgo8L3VsPgo8L2xpPgo8bGkgaWQ9Im1lbnUtaXRlbS0yMDU5NyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS1oYXMtY2hpbGRyZW4gbWVudS1pdGVtLTIwNTk3Ij48YSBocmVmPSJodHRwczovL3N0b3J5ZnVsLmNvbS9yZXNvdXJjZXMvIj5SZXNvdXJjZXM8L2E+Cjx1bCBjbGFzcz0ic3ViLW1lbnUiPgoJPGxpIGlkPSJtZW51LWl0ZW0tMjA1OTgiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tMjA1OTgiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL3Jlc291cmNlcy9ibG9nLyI+QmxvZzwvYT48L2xpPgoJPGxpIGlkPSJtZW51LWl0ZW0tMjA1OTkiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tMjA1OTkiPjxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tL3Jlc291cmNlcy9jYXNlLXN0dWRpZXMvIj5DYXNlIFN0dWRpZXM8L2E+PC9saT4KPC91bD4KPC9saT4KPC91bD48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L25hdj48IS0tICNzaXRlLW5hdmlnYXRpb24gLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj48IS0tICNtYXN0aGVhZCAtLT4KCiAgICA8ZGl2IGlkPSJjb250ZW50IiBjbGFzcz0ic2l0ZS1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBpZD0icHJpbWFyeSIgY2xhc3M9ImNvbnRlbnQtYXJlYSI+CiAgICAgICAgICAgIDxtYWluIGlkPSJtYWluIiBjbGFzcz0ic2l0ZS1tYWluIj4KCgkJCQkKPGFydGljbGUgaWQ9InBvc3QtMTYzIiBjbGFzcz0icG9zdC0xNjMgcGFnZSB0eXBlLXBhZ2Ugc3RhdHVzLXB1Ymxpc2ggaGVudHJ5Ij4KCgk8ZGl2IGNsYXNzPSJlbnRyeS1jb250ZW50Ij4KCQkKPGRpdiBjbGFzcz0id3AtYmxvY2stc3RvcnlmdWwtbXVsdGlwdXJwb3NlLWd1dGVuYmVyZy1ibG9jayBpcy1ibG9jay1jZW50ZXIgc3RvcnlmdWwtaG9tZS1wYWdlLW1haW4iPgo8ZGl2IGNsYXNzPSJ3cC1ibG9jay1zdG9yeWZ1bC1tdWx0aXB1cnBvc2UtZ3V0ZW5iZXJnLWJsb2NrIGhhcy1mdWxsIGlzLWJsb2NrLWNlbnRlciBob21lLXBhZ2UtaGVyby1zZWN0aW9uIGNvbnRlbnQtYmxvY2siIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiMxYTJiNDk7cGFkZGluZy10b3A6MTIwcHg7cGFkZGluZy1ib3R0b206MzYwcHgiPgo8ZGl2IGNsYXNzPSJ3cC1ibG9jay1zdG9yeWZ1bC1tdWx0aXB1cnBvc2UtZ3V0ZW5iZXJnLWJsb2NrIGlzLWJsb2NrLWNlbnRlciBjb250YWluZXIiPgo8ZGl2IGNsYXNzPSJ3cC1ibG9jay1jb2x1bW5zIj4KPGRpdiBjbGFzcz0id3AtYmxvY2stY29sdW1uIG5ld3MtYnktc3RvcnlmdWwtc2VjdGlvbiI+CjxmaWd1cmUgY2xhc3M9IndwLWJsb2NrLWltYWdlIHNpemUtbGFyZ2UgaXMtcmVzaXplZCI+PGEgaHJlZj0iL25ld3MvIj48aW1nIGxvYWRpbmc9ImxhenkiIHNyYz0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDkvSG9tZS1OZXdzLUNvbnRlbnQtbG9nby5zdmciIGFsdD0iIiBjbGFzcz0id3AtaW1hZ2UtMjMyMjciIHdpZHRoPSI0MTUiIGhlaWdodD0iNjQiLz48L2E+PC9maWd1cmU+CjwvZGl2PgoKCgo8ZGl2IGNsYXNzPSJ3cC1ibG9jay1jb2x1bW4gaW50ZWxsaWdlbmNlLWJ5LXN0b3J5ZnVsLXNlY3Rpb24iPgo8ZmlndXJlIGNsYXNzPSJ3cC1ibG9jay1pbWFnZSBzaXplLWxhcmdlIj48YSBocmVmPSIvaW50ZWxsaWdlbmNlLyI+PGltZyBzcmM9Imh0dHBzOi8vc3RvcnlmdWwuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA5L0hvbWUtSW50ZWxsaWdlbmNlLUxvZ28uc3ZnIiBhbHQ9IiIgY2xhc3M9IndwLWltYWdlLTIzMjI4Ii8+PC9hPjwvZmlndXJlPgo8L2Rpdj4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KCgoKPGRpdiBjbGFzcz0id3AtYmxvY2stc3RvcnlmdWwtbXVsdGlwdXJwb3NlLWd1dGVuYmVyZy1ibG9jayBoYXMtZnVsbCBpcy1ibG9jay1jZW50ZXIgc3RvcnlmdWwtaG9tZS1hYm91dC1zZWN0aW9uIGNvbnRlbnQtYmxvY2siIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiMwZjE0MmM7cGFkZGluZy10b3A6MzAwcHg7cGFkZGluZy1yaWdodDo1NXB4O3BhZGRpbmctYm90dG9tOjM2MHB4O3BhZGRpbmctbGVmdDo1NXB4Ij4KPGgxIGNsYXNzPSJoYXMtd2hpdGUtY29sb3IgaGFzLXRleHQtY29sb3IiPkEgTmV3cyBhbmQgSW50ZWxsaWdlbmNlIEFnZW5jeTwvaDE+CgoKCjxkaXYgY2xhc3M9IndwLWJsb2NrLXN0b3J5ZnVsLXN0b3J5ZnVsLWJ1dHRvbiBzdG9yeWZ1bC1idG4tbWFpbiIgaWQ9ImJsb2NrLTViYzk2MTliLWMwYjEtNDNjOS1iNTQ1LTZlNWYxMTI1MDIzMCIgc3R5bGU9InRleHQtYWxpZ246TGVmdCI+PGEgY2xhc3M9InRpdGxlIGJ0bi1wcmltYXJ5ICIgaHJlZj0iL2Fib3V0LyIgdGFyZ2V0PSJfc2VsZiIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIiBzdHlsZT0iZm9udC1zaXplOjE0cHg7Zm9udC1mYW1pbHk6b2JqZWt0aXYtbWszLCBzYW5zLXNlcmlmO3BhZGRpbmctdG9wOjdweDtwYWRkaW5nLWJvdHRvbTo4cHg7cGFkZGluZy1sZWZ0OjE2cHg7cGFkZGluZy1yaWdodDoxNXB4O21hcmdpbi10b3A6MHB4O21hcmdpbi1ib3R0b206MHB4O21hcmdpbi1sZWZ0OjBweDttYXJnaW4tcmlnaHQ6MHB4O3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyIj5MZWFybiBtb3JlPC9hPjwvZGl2Pgo8L2Rpdj4KCgogICAgPHNjcmlwdD4KICAgICAgICBmdW5jdGlvbiBzdG9yeWZ1bF90aW1lc3RhbXAoKSB7CiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJnLXJlY2FwdGNoYS1yZXNwb25zZSIpOwogICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UudmFsdWUudHJpbSgpID09PSAiIikgewogICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBKU09OLnBhcnNlKGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCJjYXB0Y2hhX3NldHRpbmdzIilbMF0udmFsdWUpOwogICAgICAgICAgICAgICAgZWxlbWVudFsidHMiXSA9IEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkuZ2V0VGltZSgpKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCJjYXB0Y2hhX3NldHRpbmdzIilbMF0udmFsdWUgPSBKU09OLnN0cmluZ2lmeShlbGVtZW50KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgc2V0SW50ZXJ2YWwoc3RvcnlmdWxfdGltZXN0YW1wLCA1MDApOwogICAgPC9zY3JpcHQ+CgoJCiAgICA8c2VjdGlvbiBpZD0iYmxvY2stZm9ybSIgY2xhc3M9ImNvbnRhY3QtZm9ybSByZXF1ZXN0LWZvcm0tbWFpbi1ibG9jayAgYmctc2Vjb25kYXJ5IGNvbnRlbnQtYmxvY2siPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZGxpbmUiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJiZy1wcmltYXJ5IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJCQkJCVN0YXJ0IE1ha2luZyBTZW5zZTwvaDI+CiAgICAgICAgICAgICAgICA8cD5XZSBtYWtlIHNlbnNlIG9mIHRoZSBuZXcgaW5mb3JtYXRpb24gZW52aXJvbm1lbnQgZm9yIG5ld3MgYW5kIGJ1c2luZXNzIHBhcnRuZXJzLiBMZWF2ZSB5b3VyIGluZm9ybWF0aW9uIGhlcmUgYW5kIHdl4oCZbGwgY29ubmVjdCB5b3Ugd2l0aCB0aGUgcmlnaHQgcGVyc29uLjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlcXVlc3QtZm9ybS1mb3JtLWJsb2NrIj4KICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSJodHRwczovL3dlYnRvLnNhbGVzZm9yY2UuY29tL3NlcnZsZXQvc2VydmxldC5XZWJUb0xlYWQ/ZW5jb2Rpbmc9VVRGLTgiIGNsYXNzPSJuZWVkcy12YWxpZGF0aW9uIHNhbGVzZm9yY2UtZm9ybSIgbm92YWxpZGF0ZT4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJibG9ja19mcm9tX25vbmNlIiB2YWx1ZT0iODI3NDQyY2JhMyIvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPWhpZGRlbiBuYW1lPSdjYXB0Y2hhX3NldHRpbmdzJyB2YWx1ZT0neyJrZXluYW1lIjoicmVDYXB0Y2hhX3YyIiwiZmFsbGJhY2siOiJ0cnVlIiwib3JnSWQiOiIwMEQzNjAwMDAwMEgwQWYiLCJ0cyI6IiJ9Jz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1oaWRkZW4gbmFtZT0ib2lkIiB2YWx1ZT0iMDBEMzYwMDAwMDBIMEFmIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXRVUkwiIHZhbHVlPSJodHRwczovL3N0b3J5ZnVsLmNvbS90aGFuay15b3UvIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxlYWRfc291cmNlIiB2YWx1ZT0iV2Vic2l0ZSI+CgkJCQkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAJPGxhYmVsPkZ1bGwgTmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZmlyc3RfbmFtZSIgbmFtZT0iZmlyc3RfbmFtZSIgYXJpYS1sYWJlbD0iRmlyc3QgTmFtZSIgcGxhY2Vob2xkZXI9IkZpcnN0IE5hbWUqIiByZXF1aXJlZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayI+UGxlYXNlIHByb3ZpZGUgeW91ciBmaXJzdCBuYW1lLjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIAk8bGFiZWw+TGFzdCBOYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJsYXN0X25hbWUiIG5hbWU9Imxhc3RfbmFtZSIgYXJpYS1sYWJlbD0iTGFzdCBOYW1lIiBwbGFjZWhvbGRlcj0iTGFzdCBOYW1lKiIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludmFsaWQtZmVlZGJhY2siPlBsZWFzZSBwcm92aWRlIHlvdXIgbGFzdCBuYW1lLjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIAk8bGFiZWw+VGl0bGU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InRpdGxlIiBuYW1lPSJ0aXRsZSIgYXJpYS1sYWJlbD0iVGl0bGUiIHBsYWNlaG9sZGVyPSJUaXRsZSoiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnZhbGlkLWZlZWRiYWNrIj5QbGVhc2UgcHJvdmlkZSB5b3VyIHRpdGxlIChuL2EgaWYgbm9uZSkuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgCTxsYWJlbD5Db21wYW55PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJjb21wYW55IiBuYW1lPSJjb21wYW55IiBhcmlhLWxhYmVsPSJDb21wYW55IiBwbGFjZWhvbGRlcj0iQ29tcGFueSoiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnZhbGlkLWZlZWRiYWNrIj5QbGVhc2UgcHJvdmlkZSBjb21wYW55IG5hbWUgKG4vYSBpZiBub25lKS48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGZvcm0tZ3JvdXAtc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgICAJPGxhYmVsPlN0b3J5ZnVsIFBpbGxhcjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9IjAwTjFRMDAwMDBTbXJZMCIgbmFtZT0iMDBOMVEwMDAwMFNtclkwIiBhcmlhLWxhYmVsPSJBcmVhcyBvZiBCdXNpbmVzcyIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkIHZhbHVlPSIiPkFyZWFzIG9mIEJ1c2luZXNzKjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgdmFsdWU9Ik5ld3MiPk5ld3M8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gIHZhbHVlPSJJbnRlbGxpZ2VuY2UiPkludGVsbGlnZW5jZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayI+UGxlYXNlIHNlbGVjdCBhIEFyZWFzIG9mIEJ1c2luZXNzLjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZm9ybS1ncm91cC1zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgIAk8bGFiZWw+U2VsZWN0PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iMDBOMzYwMDAwMFExT3N3IiBuYW1lPSIwME4zNjAwMDAwUTFPc3ciIGFyaWEtbGFiZWw9IlJlZ2lvbiIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkIHZhbHVlPSIiPlJlZ2lvbio8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlVTIj5VUzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRU1FQSI+RU1FQTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iQVBBQyI+QVBBQzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayI+UGxlYXNlIHNlbGVjdCBhIHJlZ2lvbi48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAJPGxhYmVsPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZW1haWwiIG5hbWU9ImVtYWlsIiBhcmlhLWxhYmVsPSJFbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsKiIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludmFsaWQtZmVlZGJhY2siPlBsZWFzZSBwcm92aWRlIGEgdmFsaWQgZW1haWwuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgCTxsYWJlbD5QaG9uZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZWwiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJwaG9uZSIgbmFtZT0icGhvbmUiIGFyaWEtbGFiZWw9IlBob25lIiBwbGFjZWhvbGRlcj0iUGhvbmUiPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIAk8bGFiZWw+TWVzc2FnZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iMDBOMzYwMDAwMFNZNXp0IiBuYW1lPSIwME4zNjAwMDAwU1k1enQiIGFyaWEtbGFiZWw9Ik1lc3NhZ2UiIHBsYWNlaG9sZGVyPSJNZXNzYWdlKiIgcmVxdWlyZWQ+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayI+UGxlYXNlIGluY2x1ZGUgYSBtZXNzYWdlLjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIGZvcm0tY2hlY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJwZXJtaXNzaW9uIiBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCIgdmFsdWU9IiIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBlcm1pc3Npb24iPkJ5IHN1Ym1pdHRpbmcgeW91ciBpbmZvcm1hdGlvbiB5b3UgYWxsb3cgdXMgdG8gY29udGFjdCB5b3UuPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayI+WW91IG11c3QgYWdyZWUgYmVmb3JlIHN1Ym1pdHRpbmc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImctcmVjYXB0Y2hhIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiBkYXRhLWNhbGxiYWNrPSJyZWNhcHRjaGFDYWxsYmFjayIgZGF0YS1zaXRla2V5PSI2TGYtRkhjVUFBQUFBRWV4RWNGbHRKZ3FDQjlNMzZXLVl0amswX1hTIj48L2Rpdj4KCQkJCQkJPGRpdiBjbGFzcz0iaW52YWxpZC1mZWVkYmFjayBnLXJlY2FwdGNoYS1lcnJvciI+UGxlYXNlIHByb3ZlIHRoYXQgeW91IGFyZSBodW1hbi48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4iIGlkPSJmb3JtU3VibWl0Ij5TdWJtaXQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L3NlY3Rpb24+CgkKICAgIDxzY3JpcHQ+CiAgICAgICAgZnVuY3Rpb24gcmVjYXB0Y2hhQ2FsbGJhY2soKSB7CiAgICAgICAgICAgIGlmKCBncmVjYXB0Y2hhICYmIGdyZWNhcHRjaGEuZ2V0UmVzcG9uc2UoKS5sZW5ndGggIT09IDAgKSB7CiAgICAgICAgICAgICAgICBqUXVlcnkoJy5nLXJlY2FwdGNoYScpLnNpYmxpbmdzKCcuaW52YWxpZC1mZWVkYmFjaycpLmhpZGUoKTsKICAgICAgICAgICAgfQoJCX0KICAgIDwvc2NyaXB0PgoJCgoKICAgIDxzZWN0aW9uIGlkPSJibG9jay1mb3JtIiBjbGFzcz0iY29udGFjdC1mb3JtIG5ld3NsZXR0ZXIgIGJnLXNlY29uZGFyeSBjb250ZW50LWJsb2NrIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIAk8ZGl2IGNsYXNzPSJuZXdzbGV0dGVyLWlubmVyLWJsb2NrIj4KCSAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZGxpbmUiPgoJICAgICAgICAgICAgICAgIDxoMj5TdWJzY3JpYmUgZm9yIFVwZGF0ZXM8L2gyPgoJICAgICAgICAgICAgICAgIDxwPlJlY2VpdmUgYSBub3RpZmljYXRpb24gZWFjaCB0aW1lIHdlIHB1Ymxpc2ggYSBuZXcgcG9zdC48L3A+CgkgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KCSAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Imh0dHBzOi8vc3RvcnlmdWwudXMyLmxpc3QtbWFuYWdlLmNvbS9zdWJzY3JpYmUvcG9zdCIgbWV0aG9kPSJQT1NUIiBjbGFzcz0iZm9ybS1pbmxpbmUiPgoJICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ1IiB2YWx1ZT0iYTlhMTlkNTcxMTliMjBlMGUwZWQzYzBhMiI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiB2YWx1ZT0iNGJhYTVhMDYyMCI+CgkgICAgICAgICAgICAgICAgICAgIDwhLS0gcGVvcGxlIHNob3VsZCBub3QgZmlsbCB0aGVzZSBpbiBhbmQgZXhwZWN0IGdvb2QgdGhpbmdzIC0tPgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIG1iLTIgbXgtc20tMyI+CgkgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIG5hbWU9IkVNQUlMIiB0YWJpbmRleD0iLTEiIHZhbHVlPSIiIHBsYWNlaG9sZGVyPSJFbWFpbCBBZGRyZXNzKiIgaWQ9ImJfZW1haWwiIHJlcXVpcmVkPSIiPgoJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJPCEtLSByZWFsIHBlb3BsZSBzaG91bGQgbm90IGZpbGwgdGhpcyBpbiBhbmQgZXhwZWN0IGdvb2QgdGhpbmdzIC0gZG8gbm90IHJlbW92ZSB0aGlzIG9yIHJpc2sgZm9ybSBib3Qgc2lnbnVwcy0tPgoJCQkJCQk8ZGl2IHN0eWxlPSJwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IC01MDAwcHg7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CgkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImF2b2lkX3Jpc2siIG5hbWU9ImJfYTlhMTlkNTcxMTliMjBlMGUwZWQzYzBhMl80YmFhNWEwNjIwIiB0YWJpbmRleD0iLTEiIHZhbHVlPSIiPgoJCQkJCQk8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VibWl0X2NvbnRhaW5lciBjbGVhciB0ZXh0LWNlbnRlciI+CgkgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biIgbmFtZT0ic3VibWl0Ij5TdWJzY3JpYmU8L2J1dHRvbj4KCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLXR5cGUtb3B0aW9uIj4KCQkJCQkJCQk8aW5wdXQgdHlwZT0icmFkaW8iIGlkPSJyYWRpby1uZXdzIiBuYW1lPSJzdG9yeWZ1bC1mb3JtVHlwZSIgdmFsdWU9Im5ld3MiIGNoZWNrZWQ+CgkJCQkJCQkJPGxhYmVsIGZvcj0icmFkaW8tbmV3cyI+TmV3czwvbGFiZWw+CgkJCQkJCQkJPGlucHV0IHR5cGU9InJhZGlvIiBpZD0icmFkaW8taW50ZWxsaWdlbmNlIiBuYW1lPSJzdG9yeWZ1bC1mb3JtVHlwZSIgdmFsdWU9ImludGVsbGlnZW5jZSI+CgkJCQkJCQkJPGxhYmVsIGZvcj0icmFkaW8taW50ZWxsaWdlbmNlIj5JbnRlbGxpZ2VuY2U8L2xhYmVsPgoJCQkJCQkJPC9kaXY+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1jX3NpZ251cHNvdXJjZSIgdmFsdWU9Imhvc3RlZCI+CgkgICAgICAgICAgICAgICAgPC9mb3JtPgoJICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgoKCTwvZGl2PgoJPC9kaXY+PCEtLSAuZW50cnktY29udGVudCAtLT4KPC9hcnRpY2xlPjwhLS0gI3Bvc3QtMTYzIC0tPgoKICAgICAgICAgICAgPC9tYWluPjwhLS0gI21haW4gLS0+CiAgICAgICAgPC9kaXY+PCEtLSAjcHJpbWFyeSAtLT4KICAgIDwvZGl2PgoKPC9kaXY+PCEtLSAjY29udGVudCAtLT4KCjxmb290ZXIgY2xhc3M9InNpdGUtZm9vdGVyIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2l0ZS1mb290ZXItaGVhZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nbyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vc3RvcnlmdWwuY29tLyIgcmVsPSJob21lIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ibG9nbyIgc3JjPSJodHRwczovL3N0b3J5ZnVsLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOS8xMS9sb2dvLXN0b3J5ZnVsLnN2ZyIgYWx0PSJsb2dvIi8+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC05Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD0idGV4dC04IiBjbGFzcz0id2lkZ2V0IHdpZGdldF90ZXh0Ij4JCQk8ZGl2IGNsYXNzPSJ0ZXh0d2lkZ2V0Ij48aDI+Q29tcGFueTwvaDI+Cjx1bD4KPGxpPjxhIGhyZWY9Ii9hYm91dC8iPkFib3V0PC9hPjwvbGk+CjxsaT48YSBocmVmPSIvcmVzb3VyY2VzLyI+UmVzb3VyY2VzPC9hPjwvbGk+CjxsaT48YSBocmVmPSIvdGVybXMtb2YtdXNlLyI+VGVybXMgb2YgVXNlPC9hPjwvbGk+CjxsaT48YSBocmVmPSIvcHJpdmFjeS8iPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+CjwvdWw+CjwvZGl2PgoJCTwvc2VjdGlvbj48c2VjdGlvbiBpZD0idGV4dC05IiBjbGFzcz0id2lkZ2V0IHdpZGdldF90ZXh0Ij4JCQk8ZGl2IGNsYXNzPSJ0ZXh0d2lkZ2V0Ij48aDI+PGEgaHJlZj0iL25ld3MvIj5OZXdzPC9hPjwvaDI+Cjx1bD4KPGxpPjxhIGhyZWY9Ii9uZXdzL25ld3N3aXJlLyI+TmV3c3dpcmU8L2E+PC9saT4KPGxpPjxhIGhyZWY9Ii9uZXdzL2xpY2Vuc2luZy1hbmQtYWR2ZXJ0aXNpbmcvIj5MaWNlbnNpbmcgJmFtcDsgQWR2ZXJ0aXNpbmc8L2E+PC9saT4KPGxpPjxhIGhyZWY9Ii9uZXdzL25ld3MtaW52ZXN0aWdhdGlvbnMvIj5JbnZlc3RpZ2F0aW9uczwvYT48L2xpPgo8L3VsPgo8L2Rpdj4KCQk8L3NlY3Rpb24+PHNlY3Rpb24gaWQ9InRleHQtMTAiIGNsYXNzPSJ3aWRnZXQgd2lkZ2V0X3RleHQiPgkJCTxkaXYgY2xhc3M9InRleHR3aWRnZXQiPjxoMj48YSBocmVmPSIvaW50ZWxsaWdlbmNlLyI+SW50ZWxsaWdlbmNlPC9hPjwvaDI+Cjx1bD4KPGxpPjxhIGhyZWY9Ii9pbnRlbGxpZ2VuY2UvcmVwb3J0aW5nIj5SZXBvcnRpbmc8L2E+PC9saT4KPGxpPjxhIGhyZWY9Ii9pbnRlbGxpZ2VuY2UvbWV0aG9kb2xvZ3kvIj5NZXRob2RvbG9neTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iL2ludGVsbGlnZW5jZS90ZWNobm9sb2d5LyI+VGVjaG5vbG9neTwvYT48L2xpPgo8L3VsPgo8L2Rpdj4KCQk8L3NlY3Rpb24+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2l0ZS1mb290ZXItc29jaWFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Tb2NpYWwgTWVkaWE8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb2NpYWwtbmF2Ij4KICAgICAgICAJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL3N0b3J5ZnVsIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+VHdpdHRlcjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCQkJCQkJICAgICAgICAJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vU3RvcnlmdWwiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5GYWNlYm9vazwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAJCQkJCQkgICAgICAgIAkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L3N0b3J5ZnVsIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+TGlua2VkSW48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCQkJCQkJICAgICAgICAJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3N0b3J5ZnVsdmlkZW8vIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+SW5zdGFncmFtPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgIAkJCQkJCSAgICAgICAgCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9zdG9yeWZ1bCIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiPllvdVR1YmU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PiA8IS0tIC5zaXRlLWZvb3Rlci1oZWFkIC0tPgogICAgPC9kaXY+CjwvZm9vdGVyPjwhLS0gLnNpdGUtZm9vdGVyIC0tPgo8L2Rpdj48IS0tICNwYWdlIC0tPgoKICAgICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgICAgIHdpbmRvdy5pbnRlcmNvbVNldHRpbmdzID0gIEpTT04ucGFyc2UoIGRlY29kZVVSSUNvbXBvbmVudCggJyU3QiUyMmFwcF9pZCUyMiUzQSUyMmthNTVramp0JTIyJTdEJyApICk7CiAgICAgICAgICAgIDwvc2NyaXB0PgoKCQkJPHNjcmlwdCBpZD0nY29va2llLWNvbnNlbnQtanMtZXh0cmEnPgp2YXIgY3RjY192YXJzID0geyJleHBpcnkiOiIzMCIsIm1ldGhvZCI6IiIsInZlcnNpb24iOiIxIn07Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPSdodHRwczovL3N0b3J5ZnVsLmNvbS9fc3RhdGljLz8/LWVKeDFqbDBLd2pBUWhDOWt1K1pCYXgvRXMyaXkxYVQ1cWRsZHRMYzNsWUFGRlJZV1p1WWJCaDVUWTZQMllwREFsYnNMNXJtKzF0RUdTa0NueUJnWkppOVhHd21DS1F4ajFpbkFtUWo1amE3VU50ajRENWF4U0dtMHVEaTBPSitLTDY5eDlLdUxieGpLWHVLVTUwSDhxcUVPdnp6Slc0TzV3cWR3Vkh0MTJHMVYzM2Z1QlRVM1d0az0nPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0naHR0cHM6Ly91bnBrZy5jb20vaW1hZ2VzbG9hZGVkQDQvaW1hZ2VzbG9hZGVkLnBrZ2QubWluLmpzJyBpZD0nc3RvcnlmdWwtaW1hZ2VzbG9hZGVkLWpzJz48L3NjcmlwdD4KPHNjcmlwdCBpZD0nc3RvcnlmdWwtY3VzdG9tLWpzLWV4dHJhJz4KdmFyIHN0b3J5ZnVsQ3VzdG9tID0geyJhamF4X3VybCI6Imh0dHBzOlwvXC9zdG9yeWZ1bC5jb21cL3dwLWFkbWluXC9hZG1pbi1hamF4LnBocCIsInN0b3J5ZnVsX2Jyb3dzZV9maWx0ZXJfbm9uY2UiOiI3ODYzZGU0NTZjIn07Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPSdodHRwczovL3N0b3J5ZnVsLmNvbS93cC1jb250ZW50L3RoZW1lcy9zdG9yeWZ1bC9hc3NldHMvanMvc3RvcnlmdWwubWluLmpzP209MTYxMTc1MTk5OWcnPjwvc2NyaXB0Pgo8c2NyaXB0IGRlZmVyPSJkZWZlciIgc3JjPScvL2dvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcycgaWQ9J3N0b3J5ZnVsLXJlY2FwdGNoYS1qcyc+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSdodHRwczovL3N0YXRzLndwLmNvbS9lLTIwMjExNy5qcycgZGVmZXI+PC9zY3JpcHQ+CjxzY3JpcHQ+Cglfc3RxID0gd2luZG93Ll9zdHEgfHwgW107Cglfc3RxLnB1c2goWyAndmlldycsIHt2OidleHQnLGo6JzE6OS42LjEnLGJsb2c6JzE2MzQ5ODE2MScscG9zdDonMTYzJyx0ejonMCcsc3J2OidzdG9yeWZ1bC5jb20nfSBdKTsKCV9zdHEucHVzaChbICdjbGlja1RyYWNrZXJJbml0JywgJzE2MzQ5ODE2MScsICcxNjMnIF0pOwo8L3NjcmlwdD4KCiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoJCkgewoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhdGFwdWx0UmVhZENvb2tpZSgiY2F0QWNjQ29va2llcyIpKSB7IC8vIElmIHRoZSBjb29raWUgaGFzIG5vdCBiZWVuIHNldCB0aGVuIHNob3cgdGhlIGJhcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiaHRtbCIpLmFkZENsYXNzKCJoYXMtY29va2llLWJhciIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiaHRtbCIpLmFkZENsYXNzKCJjb29raWUtYmFyLWJvdHRvbS1yaWdodC1ibG9jayIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiaHRtbCIpLmFkZENsYXNzKCJjb29raWUtYmFyLWJsb2NrIik7CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICB9CgkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCgkJCSAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXRhcHVsdC1jb29raWUtYmFyIiBjbGFzcz0iIHJvdW5kZWQtY29ybmVycyBkcm9wLXNoYWRvdyI+CgoJCQkJCTxoMz5Db29raWVzPC9oMz48c3BhbiBjbGFzcz0iY3RjYy1sZWZ0LXNpZGUiPlRoaXMgd2Vic2l0ZSB1c2VzIGNvb2tpZXMgdG8gZW5zdXJlIHlvdSBnZXQgdGhlIGJlc3QgZXhwZXJpZW5jZSBvbiBvdXIgd2Vic2l0ZS4gPGEgY2xhc3M9ImN0Y2MtbW9yZS1pbmZvLWxpbmsiIHRhYmluZGV4PSIwIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9zdG9yeWZ1bC5jb20vcHJpdmFjeS9jb29raWUtbm90aWNlLyI+TW9yZSBJbmZvcm1hdGlvbjwvYT48L3NwYW4+PHNwYW4gY2xhc3M9ImN0Y2MtcmlnaHQtc2lkZSI+PGJ1dHRvbiBpZD0iY2F0YXB1bHRDb29raWUiIHRhYmluZGV4PSIwIj5BY2NlcHQ8L2J1dHRvbj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj48IS0tICNjYXRhcHVsdC1jb29raWUtYmFyIC0tPgoKCQkJCTwvYm9keT4KPC9odG1sPgo=
  recorded_at: Wed, 28 Apr 2021 16:55:35 GMT
recorded_with: VCR 6.0.0
